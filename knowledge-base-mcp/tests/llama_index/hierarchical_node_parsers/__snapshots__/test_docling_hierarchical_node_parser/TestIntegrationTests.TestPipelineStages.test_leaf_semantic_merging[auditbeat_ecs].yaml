- node_id: '0'
  node_depth: 0
  node_type: Node
  content_length: 13
  content: 'mapped_pages:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/0'
    headings: []
  is_isolated: true
  relationships:
    next: '1'
- node_id: '1'
  node_depth: 0
  node_type: Node
  content_length: 82
  content: '- https://www.elastic.co/guide/en/beats/auditbeat/current/exported-fields-ecs.html'
  metadata:
    docling_label: list
    docling_ref: '#/groups/0'
    headings: []
  is_isolated: true
  relationships:
    next: '2'
    previous: '0'
- node_id: '2'
  node_depth: 0
  node_type: Node
  content_length: 251401
  content: "# ECS fields [exported-fields-ecs]\n\nThis section defines Elastic Common\
    \ Schema (ECS) fields\u2014a common set of fields to be used when storing event\
    \ data in {{es}}.\n\nThis is an exhaustive list, and fields listed here are not\
    \ necessarily used by Auditbeat. The goal of ECS is to enable and encourage users\
    \ of {{es}} to normalize their event data, so that they can better analyze, visualize,\
    \ and correlate the data represented in their events.\n\nSee the ECS reference\
    \ for more information.\n\n**`@timestamp`** :   Date/time when the event originated.\
    \ This is the date/time extracted from the event, typically representing when\
    \ the event was generated by the source. If the event source has no original timestamp,\
    \ this value is typically populated by the first time the event was received by\
    \ the pipeline. Required field for all events.\n\ntype: date\n\nexample: 2016-05-23T08:05:34.853Z\n\
    \nrequired: True\n\n**`labels`** :   Custom key/value pairs. Can be used to add\
    \ meta information to events. Should not contain ne..."
  metadata:
    docling_label: title
    docling_ref: '#/texts/2'
    headings:
    - '# ECS fields [exported-fields-ecs]'
  relationships:
    children:
    - '3'
    - '4'
    - '5'
    - '8'
    - '10'
    - '20'
    - '27'
    - '30'
    - '33'
    - '37'
    - '45'
    - '50'
    - '57'
    - '59'
    - '63'
    - '65'
    - '80'
    - '82'
    - '97'
    - '100'
    - '102'
    - '104'
    - '111'
    - '115'
    - '117'
    - '122'
    - '128'
    - '137'
    - '139'
    - '141'
    - '144'
    - '147'
    - '150'
    - '170'
    - '173'
    - '176'
    - '180'
    - '190'
    - '202'
    - '210'
    - '282'
    - '298'
    - '304'
    - '311'
    - '314'
    - '317'
    - '322'
    previous: '1'
- node_id: '3'
  node_depth: 1
  node_type: Node
  content_length: 889
  content: "# ECS fields [exported-fields-ecs]\n\nThis section defines Elastic Common\
    \ Schema (ECS) fields\u2014a common set of fields to be used when storing event\
    \ data in {{es}}.\n\nThis is an exhaustive list, and fields listed here are not\
    \ necessarily used by Auditbeat. The goal of ECS is to enable and encourage users\
    \ of {{es}} to normalize their event data, so that they can better analyze, visualize,\
    \ and correlate the data represented in their events.\n\nSee the ECS reference\
    \ for more information.\n\n**`@timestamp`** :   Date/time when the event originated.\
    \ This is the date/time extracted from the event, typically representing when\
    \ the event was generated by the source. If the event source has no original timestamp,\
    \ this value is typically populated by the first time the event was received by\
    \ the pipeline. Required field for all events.\n\ntype: date\n\nexample: 2016-05-23T08:05:34.853Z\n\
    \nrequired: True"
  metadata:
    docling_label: title
    docling_ref: '#/texts/2'
    headings:
    - '# ECS fields [exported-fields-ecs]'
  relationships:
    next: '4'
    parent: '2'
- node_id: '4'
  node_depth: 1
  node_type: Node
  content_length: 733
  content: |-
    **`labels`** :   Custom key/value pairs. Can be used to add meta information to events. Should not contain nested objects. All values are stored as keyword. Example: `docker` and `k8s` labels.

    type: object

    example: {"application": "foo-bar", "env": "production"}

    **`message`** :   For log events the message field contains the log message, optimized for viewing in a log viewer. For structured logs without an original message field, other fields can be concatenated to form a human-readable summary of the event. If multiple messages exist, they can be combined into one message.

    type: match_only_text

    example: Hello World

    **`tags`** :   List of keywords used to tag each event.

    type: keyword

    example: ["production", "env2"]
  metadata:
    docling_label: inline
    docling_ref: '#/groups/3'
    headings:
    - '# ECS fields [exported-fields-ecs]'
  relationships:
    next: '5'
    parent: '2'
    previous: '3'
- node_id: '5'
  node_depth: 1
  node_type: Node
  content_length: 1760
  content: |-
    ## agent [_agent]

    The agent fields contain the data about the software entity, if any, that collects, detects, or observes events on a host, or takes measurements on a host. Examples include Beats. Agents may also run on observers. ECS agent.* fields shall be populated with details of the agent running on the host or observer where the event happened or the measurement was taken.

    **`agent.build.original`** :   Extended build information for the agent. This field is intended to contain any build information that a data source may provide, no specific formatting is required.

    type: keyword

    example: metricbeat version 7.6.0 (amd64), libbeat 7.6.0 [6a23e8f8f30f5001ba344e4e54d8d9cb82cb107c built 2020-02-05 23:10:10 +0000 UTC]

    **`agent.ephemeral_id`** :   Ephemeral identifier of this agent (if one exists). This id normally changes across restarts, but `agent.id` does not.

    type: keyword

    example: 8a4f500f

    **`agent.id`** :   Unique identifier of this agent (if one exists). Example: For B...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/29'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## agent [_agent]'
  relationships:
    children:
    - '6'
    - '7'
    next: '8'
    parent: '2'
    previous: '4'
- node_id: '6'
  node_depth: 2
  node_type: Node
  content_length: 1042
  content: |-
    ## agent [_agent]

    The agent fields contain the data about the software entity, if any, that collects, detects, or observes events on a host, or takes measurements on a host. Examples include Beats. Agents may also run on observers. ECS agent.* fields shall be populated with details of the agent running on the host or observer where the event happened or the measurement was taken.

    **`agent.build.original`** :   Extended build information for the agent. This field is intended to contain any build information that a data source may provide, no specific formatting is required.

    type: keyword

    example: metricbeat version 7.6.0 (amd64), libbeat 7.6.0 [6a23e8f8f30f5001ba344e4e54d8d9cb82cb107c built 2020-02-05 23:10:10 +0000 UTC]

    **`agent.ephemeral_id`** :   Ephemeral identifier of this agent (if one exists). This id normally changes across restarts, but `agent.id` does not.

    type: keyword

    example: 8a4f500f

    **`agent.id`** :   Unique identifier of this agent (if one exists). Example: For B...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/29'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## agent [_agent]'
  relationships:
    next: '7'
    parent: '5'
- node_id: '7'
  node_depth: 2
  node_type: Node
  content_length: 716
  content: |-
    example: 8a4f500d

    **`agent.name`** :   Custom name of the agent. This is a name that can be given to an agent. This can be helpful if for example two Filebeat instances are running on the same host but a human readable separation is needed on which Filebeat instance data is coming from. If no name is given, the name is often left empty.

    type: keyword

    example: foo

    **`agent.type`** :   Type of the agent. The agent type always stays the same and should be given by the agent used. In case of Filebeat the agent would always be Filebeat also if two Filebeat instances are run on the same machine.

    type: keyword

    example: filebeat

    **`agent.version`** :   Version of the agent.

    type: keyword

    example: 6.0.0-rc2
  metadata:
    docling_label: text
    docling_ref: '#/texts/44'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## agent [_agent]'
  relationships:
    parent: '5'
    previous: '6'
- node_id: '8'
  node_depth: 1
  node_type: Node
  content_length: 614
  content: |-
    ## as [_as]

    An autonomous system (AS) is a collection of connected Internet Protocol (IP) routing prefixes under the control of one or more network operators on behalf of a single administrative entity or domain that presents a common, clearly defined routing policy to the internet.

    **`as.number`** :   Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.

    type: long

    example: 15169

    **`as.organization.name`** :   Organization name.

    type: keyword

    example: Google LLC

    **`as.organization.name.text`** :   type: match_only_text
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/57'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## as [_as]'
  relationships:
    children:
    - '9'
    next: '10'
    parent: '2'
    previous: '5'
- node_id: '9'
  node_depth: 2
  node_type: Node
  content_length: 614
  content: |-
    ## as [_as]

    An autonomous system (AS) is a collection of connected Internet Protocol (IP) routing prefixes under the control of one or more network operators on behalf of a single administrative entity or domain that presents a common, clearly defined routing policy to the internet.

    **`as.number`** :   Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.

    type: long

    example: 15169

    **`as.organization.name`** :   Organization name.

    type: keyword

    example: Google LLC

    **`as.organization.name.text`** :   type: match_only_text
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/57'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## as [_as]'
  relationships:
    parent: '8'
- node_id: '10'
  node_depth: 1
  node_type: Node
  content_length: 7133
  content: |-
    ## client [_client]

    A client is defined as the initiator of a network connection for events regarding sessions, connections, or bidirectional flow records. For TCP events, the client is the initiator of the TCP connection that sends the SYN packet(s). For other protocols, the client is generally the initiator or requestor in the network transaction. Some systems use the term "originator" to refer the client in TCP connections. The client fields describe details about the system acting as the client in the network event. Client fields are usually populated in conjunction with server fields. Client fields are generally not populated for packet-level events. Client / server representations can add semantic context to an exchange, which is helpful to visualize the data in certain situations. If your context falls in that category, you should still ensure that source and destination are filled appropriately.

    **`client.address`** :   Some event client addresses are defined ambiguously. The...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/69'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## client [_client]'
  relationships:
    children:
    - '11'
    - '12'
    - '13'
    - '14'
    - '15'
    - '16'
    - '17'
    - '18'
    - '19'
    next: '20'
    parent: '2'
    previous: '8'
- node_id: '11'
  node_depth: 2
  node_type: Node
  content_length: 19
  content: '## client [_client]'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/69'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## client [_client]'
  relationships:
    next: '12'
    parent: '10'
- node_id: '12'
  node_depth: 2
  node_type: Node
  content_length: 896
  content: A client is defined as the initiator of a network connection for events
    regarding sessions, connections, or bidirectional flow records. For TCP events,
    the client is the initiator of the TCP connection that sends the SYN packet(s).
    For other protocols, the client is generally the initiator or requestor in the
    network transaction. Some systems use the term "originator" to refer the client
    in TCP connections. The client fields describe details about the system acting
    as the client in the network event. Client fields are usually populated in conjunction
    with server fields. Client fields are generally not populated for packet-level
    events. Client / server representations can add semantic context to an exchange,
    which is helpful to visualize the data in certain situations. If your context
    falls in that category, you should still ensure that source and destination are
    filled appropriately.
  metadata:
    docling_label: text
    docling_ref: '#/texts/70'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## client [_client]'
  relationships:
    next: '13'
    parent: '10'
    previous: '11'
- node_id: '13'
  node_depth: 2
  node_type: Node
  content_length: 1034
  content: |-
    **`client.address`** :   Some event client addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field. Then it should be duplicated to `.ip` or `.domain` , depending on which one it is.

    type: keyword

    **`client.as.number`** :   Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.

    type: long

    example: 15169

    **`client.as.organization.name`** :   Organization name.

    type: keyword

    example: Google LLC

    **`client.as.organization.name.text`** :   type: match_only_text

    **`client.bytes`** :   Bytes sent from the client to the server.

    type: long

    example: 184

    format: bytes

    **`client.domain`** :   The domain name of the client system. This value may be a host name, a fully qualified domain name, or another host naming format. The value may derive from the original event or be added from enrichment.

    type:...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/15'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## client [_client]'
  relationships:
    next: '14'
    parent: '10'
    previous: '12'
- node_id: '14'
  node_depth: 2
  node_type: Node
  content_length: 1111
  content: "**`client.geo.city_name`** :   City name.\n\ntype: keyword\n\nexample:\
    \ Montreal\n\n**`client.geo.continent_code`** :   Two-letter code representing\
    \ continent\u2019s name.\n\ntype: keyword\n\nexample: NA\n\n**`client.geo.continent_name`**\
    \ :   Name of the continent.\n\ntype: keyword\n\nexample: North America\n\n**`client.geo.country_iso_code`**\
    \ :   Country ISO code.\n\ntype: keyword\n\nexample: CA\n\n**`client.geo.country_name`**\
    \ :   Country name.\n\ntype: keyword\n\nexample: Canada\n\n**`client.geo.location`**\
    \ :   Longitude and latitude.\n\ntype: geo_point\n\nexample: { \"lon\": -73.614830,\
    \ \"lat\": 45.505918 }\n\n**`client.geo.name`** :   User-defined description of\
    \ a location, at the level of granularity they care about. Could be the name of\
    \ their data centers, the floor number, if this describes a local physical entity,\
    \ city names. Not typically used in automated geolocation.\n\ntype: keyword\n\n\
    example: boston-dc\n\n**`client.geo.postal_code`** :   Postal code associated\
    \ with the location. Values appropriate for this field may also ..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/21'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## client [_client]'
  relationships:
    next: '15'
    parent: '10'
    previous: '13'
- node_id: '15'
  node_depth: 2
  node_type: Node
  content_length: 1073
  content: |-
    **`client.geo.region_iso_code`** :   Region ISO code.

    type: keyword

    example: CA-QC

    **`client.geo.region_name`** :   Region name.

    type: keyword

    example: Quebec

    **`client.geo.timezone`** :   The time zone of the location, such as IANA time zone name.

    type: keyword

    example: America/Argentina/Buenos_Aires

    **`client.ip`** :   IP address of the client (IPv4 or IPv6).

    type: ip

    **`client.mac`** :   MAC address of the client. The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.

    type: keyword

    example: 00-00-5E-00-53-23

    **`client.nat.ip`** :   Translated IP of source based NAT sessions (e.g. internal client to internet). Typically connections traversing load balancers, firewalls, or routers.

    type: ip

    **`client.nat.port`** :   Translated port of source based NAT sessions (e.g. internal client to internet)...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/29'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## client [_client]'
  relationships:
    next: '16'
    parent: '10'
    previous: '14'
- node_id: '16'
  node_depth: 2
  node_type: Node
  content_length: 622
  content: |-
    type: long

    format: string

    **`client.packets`** :   Packets sent from the client to the server.

    type: long

    example: 12

    **`client.port`** :   Port of the client.

    type: long

    format: string

    **`client.registered_domain`** :   The highest registered client domain, stripped of the subdomain. For example, the registered domain for "foo.example.com" is "example.com". This value can be determined precisely with a list like the public suffix list ( http://publicsuffix.org ). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".

    type: keyword

    example: example.com
  metadata:
    docling_label: text
    docling_ref: '#/texts/155'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## client [_client]'
  relationships:
    next: '17'
    parent: '10'
    previous: '15'
- node_id: '17'
  node_depth: 2
  node_type: Node
  content_length: 1028
  content: |-
    **`client.subdomain`** :   The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain. For example the subdomain portion of "www.east.mydomain.co.uk" is "east". If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.

    type: keyword

    example: east

    **`client.top_level_domain`** :   The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com". This value can be determined precisely with a list like the public suffix list ( http://publicsuffix.org ). Trying to approximate this by simply taking the last label will not work well for effective TLDs suc...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/39'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## client [_client]'
  relationships:
    next: '18'
    parent: '10'
    previous: '16'
- node_id: '18'
  node_depth: 2
  node_type: Node
  content_length: 1049
  content: "example: co.uk\n\n**`client.user.domain`** :   Name of the directory the\
    \ user is a member of. For example, an LDAP or Active Directory domain name.\n\
    \ntype: keyword\n\n**`client.user.email`** :   User email address.\n\ntype: keyword\n\
    \n**`client.user.full_name`** :   User\u2019s full name, if available.\n\ntype:\
    \ keyword\n\nexample: Albert Einstein\n\n**`client.user.full_name.text`** :  \
    \ type: match_only_text\n\n**`client.user.group.domain`** :   Name of the directory\
    \ the group is a member of. For example, an LDAP or Active Directory domain name.\n\
    \ntype: keyword\n\n**`client.user.group.id`** :   Unique identifier for the group\
    \ on the system/platform.\n\ntype: keyword\n\n**`client.user.group.name`** : \
    \  Name of the group.\n\ntype: keyword\n\n**`client.user.hash`** :   Unique user\
    \ hash to correlate information for a user in anonymized form. Useful if `user.id`\
    \ or `user.name` contain confidential information and cannot be used.\n\ntype:\
    \ keyword\n\n**`client.user.id`** :   Unique identifier of the user.\n\ntype:\
    \ keyword\n\nexample:..."
  metadata:
    docling_label: text
    docling_ref: '#/texts/180'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## client [_client]'
  relationships:
    next: '19'
    parent: '10'
    previous: '17'
- node_id: '19'
  node_depth: 2
  node_type: Node
  content_length: 285
  content: |-
    **`client.user.name`** :   Short name or login of the user.

    type: keyword

    example: a.einstein

    **`client.user.name.text`** :   type: match_only_text

    **`client.user.roles`** :   Array of user roles at the time of the event.

    type: keyword

    example: ["kibana_admin", "reporting_user"]
  metadata:
    docling_label: inline
    docling_ref: '#/groups/50'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## client [_client]'
  relationships:
    parent: '10'
    previous: '18'
- node_id: '20'
  node_depth: 1
  node_type: Node
  content_length: 5499
  content: |-
    ## cloud [_cloud]

    Fields related to the cloud or infrastructure the events are coming from.

    **`cloud.account.id`** :   The cloud account or organization id used to identify different entities in a multi-tenant environment. Examples: AWS account id, Google Cloud ORG Id, or other unique identifier.

    type: keyword

    example: 666777888999

    **`cloud.account.name`** :   The cloud account name or alias used to identify different entities in a multi-tenant environment. Examples: AWS account name, Google Cloud ORG display name.

    type: keyword

    example: elastic-dev

    **`cloud.availability_zone`** :   Availability zone in which this host, resource, or service is located.

    type: keyword

    example: us-east-1c

    **`cloud.instance.id`** :   Instance ID of the host machine.

    type: keyword

    example: i-1234567890abcdef0

    **`cloud.instance.name`** :   Instance name of the host machine.

    type: keyword

    **`cloud.machine.type`** :   Machine type of the host machine.

    type: keyword

    example: t2.medium

    **`clou...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/223'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## cloud [_cloud]'
  relationships:
    children:
    - '21'
    - '22'
    - '23'
    - '24'
    - '25'
    - '26'
    next: '27'
    parent: '2'
    previous: '10'
- node_id: '21'
  node_depth: 2
  node_type: Node
  content_length: 991
  content: |-
    ## cloud [_cloud]

    Fields related to the cloud or infrastructure the events are coming from.

    **`cloud.account.id`** :   The cloud account or organization id used to identify different entities in a multi-tenant environment. Examples: AWS account id, Google Cloud ORG Id, or other unique identifier.

    type: keyword

    example: 666777888999

    **`cloud.account.name`** :   The cloud account name or alias used to identify different entities in a multi-tenant environment. Examples: AWS account name, Google Cloud ORG display name.

    type: keyword

    example: elastic-dev

    **`cloud.availability_zone`** :   Availability zone in which this host, resource, or service is located.

    type: keyword

    example: us-east-1c

    **`cloud.instance.id`** :   Instance ID of the host machine.

    type: keyword

    example: i-1234567890abcdef0

    **`cloud.instance.name`** :   Instance name of the host machine.

    type: keyword

    **`cloud.machine.type`** :   Machine type of the host machine.

    type: keyword

    example: t2.medium
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/223'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## cloud [_cloud]'
  relationships:
    next: '22'
    parent: '20'
- node_id: '22'
  node_depth: 2
  node_type: Node
  content_length: 1072
  content: |-
    **`cloud.origin.account.id`** :   The cloud account or organization id used to identify different entities in a multi-tenant environment. Examples: AWS account id, Google Cloud ORG Id, or other unique identifier.

    type: keyword

    example: 666777888999

    **`cloud.origin.account.name`** :   The cloud account name or alias used to identify different entities in a multi-tenant environment. Examples: AWS account name, Google Cloud ORG display name.

    type: keyword

    example: elastic-dev

    **`cloud.origin.availability_zone`** :   Availability zone in which this host, resource, or service is located.

    type: keyword

    example: us-east-1c

    **`cloud.origin.instance.id`** :   Instance ID of the host machine.

    type: keyword

    example: i-1234567890abcdef0

    **`cloud.origin.instance.name`** :   Instance name of the host machine.

    type: keyword

    **`cloud.origin.machine.type`** :   Machine type of the host machine.

    type: keyword

    example: t2.medium

    **`cloud.origin.project.id`** :   The cloud project identif...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/59'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## cloud [_cloud]'
  relationships:
    next: '23'
    parent: '20'
    previous: '21'
- node_id: '23'
  node_depth: 2
  node_type: Node
  content_length: 1046
  content: |-
    example: my-project

    **`cloud.origin.project.name`** :   The cloud project name. Examples: Google Cloud Project name, Azure Project name.

    type: keyword

    example: my project

    **`cloud.origin.provider`** :   Name of the cloud provider. Example values are aws, azure, gcp, or digitalocean.

    type: keyword

    example: aws

    **`cloud.origin.region`** :   Region in which this host, resource, or service is located.

    type: keyword

    example: us-east-1

    **`cloud.origin.service.name`** :   The cloud service name is intended to distinguish services running on different platforms within a provider, eg AWS EC2 vs Lambda, GCP GCE vs App Engine, Azure VM vs App Server. Examples: app engine, app service, cloud run, fargate, lambda.

    type: keyword

    example: lambda

    **`cloud.project.id`** :   The cloud project identifier. Examples: Google Cloud Project id, Azure Project id.

    type: keyword

    example: my-project

    **`cloud.project.name`** :   The cloud project name. Examples: Google Cloud Project name, Azure Pro...
  metadata:
    docling_label: text
    docling_ref: '#/texts/274'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## cloud [_cloud]'
  relationships:
    next: '24'
    parent: '20'
    previous: '22'
- node_id: '24'
  node_depth: 2
  node_type: Node
  content_length: 1040
  content: |-
    **`cloud.provider`** :   Name of the cloud provider. Example values are aws, azure, gcp, or digitalocean.

    type: keyword

    example: aws

    **`cloud.region`** :   Region in which this host, resource, or service is located.

    type: keyword

    example: us-east-1

    **`cloud.service.name`** :   The cloud service name is intended to distinguish services running on different platforms within a provider, eg AWS EC2 vs Lambda, GCP GCE vs App Engine, Azure VM vs App Server. Examples: app engine, app service, cloud run, fargate, lambda.

    type: keyword

    example: lambda

    **`cloud.target.account.id`** :   The cloud account or organization id used to identify different entities in a multi-tenant environment. Examples: AWS account id, Google Cloud ORG Id, or other unique identifier.

    type: keyword

    example: 666777888999

    **`cloud.target.account.name`** :   The cloud account name or alias used to identify different entities in a multi-tenant environment. Examples: AWS account name, Google Cloud ORG display na...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/72'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## cloud [_cloud]'
  relationships:
    next: '25'
    parent: '20'
    previous: '23'
- node_id: '25'
  node_depth: 2
  node_type: Node
  content_length: 1032
  content: |-
    **`cloud.target.availability_zone`** :   Availability zone in which this host, resource, or service is located.

    type: keyword

    example: us-east-1c

    **`cloud.target.instance.id`** :   Instance ID of the host machine.

    type: keyword

    example: i-1234567890abcdef0

    **`cloud.target.instance.name`** :   Instance name of the host machine.

    type: keyword

    **`cloud.target.machine.type`** :   Machine type of the host machine.

    type: keyword

    example: t2.medium

    **`cloud.target.project.id`** :   The cloud project identifier. Examples: Google Cloud Project id, Azure Project id.

    type: keyword

    example: my-project

    **`cloud.target.project.name`** :   The cloud project name. Examples: Google Cloud Project name, Azure Project name.

    type: keyword

    example: my project

    **`cloud.target.provider`** :   Name of the cloud provider. Example values are aws, azure, gcp, or digitalocean.

    type: keyword

    example: aws

    **`cloud.target.region`** :   Region in which this host, resource, or service is located.

    t...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/77'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## cloud [_cloud]'
  relationships:
    next: '26'
    parent: '20'
    previous: '24'
- node_id: '26'
  node_depth: 2
  node_type: Node
  content_length: 308
  content: |-
    **`cloud.target.service.name`** :   The cloud service name is intended to distinguish services running on different platforms within a provider, eg AWS EC2 vs Lambda, GCP GCE vs App Engine, Azure VM vs App Server. Examples: app engine, app service, cloud run, fargate, lambda.

    type: keyword

    example: lambda
  metadata:
    docling_label: inline
    docling_ref: '#/groups/85'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## cloud [_cloud]'
  relationships:
    parent: '20'
    previous: '25'
- node_id: '27'
  node_depth: 1
  node_type: Node
  content_length: 1950
  content: |-
    ## code_signature [_code_signature]

    These fields contain information about binary code signatures.

    **`code_signature.digest_algorithm`** :   The hashing algorithm used to sign the process. This value can distinguish signatures when a file is signed multiple times by the same signer but with a different digest algorithm.

    type: keyword

    example: sha256

    **`code_signature.exists`** :   Boolean to capture if a signature is present.

    type: boolean

    example: true

    **`code_signature.signing_id`** :   The identifier used to sign the process. This is used to identify the application manufactured by a software vendor. The field is relevant to Apple *OS only.

    type: keyword

    example: com.apple.xpc.proxy

    **`code_signature.status`** :   Additional information about the certificate status. This is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.

    type: keyword

    example: ERROR_UNTRUS...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/354'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## code_signature [_code_signature]'
  relationships:
    children:
    - '28'
    - '29'
    next: '30'
    parent: '2'
    previous: '20'
- node_id: '28'
  node_depth: 2
  node_type: Node
  content_length: 1008
  content: |-
    ## code_signature [_code_signature]

    These fields contain information about binary code signatures.

    **`code_signature.digest_algorithm`** :   The hashing algorithm used to sign the process. This value can distinguish signatures when a file is signed multiple times by the same signer but with a different digest algorithm.

    type: keyword

    example: sha256

    **`code_signature.exists`** :   Boolean to capture if a signature is present.

    type: boolean

    example: true

    **`code_signature.signing_id`** :   The identifier used to sign the process. This is used to identify the application manufactured by a software vendor. The field is relevant to Apple *OS only.

    type: keyword

    example: com.apple.xpc.proxy

    **`code_signature.status`** :   Additional information about the certificate status. This is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.

    type: keyword

    example: ERROR_UNTRUS...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/354'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## code_signature [_code_signature]'
  relationships:
    next: '29'
    parent: '27'
- node_id: '29'
  node_depth: 2
  node_type: Node
  content_length: 940
  content: |-
    **`code_signature.subject_name`** :   Subject name of the code signer

    type: keyword

    example: Microsoft Corporation

    **`code_signature.team_id`** :   The team identifier used to sign the process. This is used to identify the team or vendor of a software product. The field is relevant to Apple *OS only.

    type: keyword

    example: EQHXZ8M8AV

    **`code_signature.timestamp`** :   Date and time when the code signature was generated and signed.

    type: date

    example: 2021-01-01T12:10:30Z

    **`code_signature.trusted`** :   Stores the trust status of the certificate chain. Validating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.

    type: boolean

    example: true

    **`code_signature.valid`** :   Boolean to capture if the digital signature is verified against the binary content. Leave unpopulated if a certificate was unchecked.

    type: boolean

    example: true
  metadata:
    docling_label: inline
    docling_ref: '#/groups/90'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## code_signature [_code_signature]'
  relationships:
    parent: '27'
    previous: '28'
- node_id: '30'
  node_depth: 1
  node_type: Node
  content_length: 1591
  content: |-
    ## container [_container]

    Container fields are used for meta information about the specific container that is the source of information. These fields help correlate data based containers from any runtime.

    **`container.cpu.usage`** :   Percent CPU used which is normalized by the number of CPU cores and it ranges from 0 to 1. Scaling factor: 1000.

    type: scaled_float

    **`container.disk.read.bytes`** :   The total number of bytes (gauge) read successfully (aggregated from all disks) since the last metric collection.

    type: long

    **`container.disk.write.bytes`** :   The total number of bytes (gauge) written successfully (aggregated from all disks) since the last metric collection.

    type: long

    **`container.id`** :   Unique container id.

    type: keyword

    **`container.image.name`** :   Name of the image the container was built on.

    type: keyword

    **`container.image.tag`** :   Container image tags.

    type: keyword

    **`container.labels`** :   Image labels.

    type: object

    **`container.memory.us...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/392'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## container [_container]'
  relationships:
    children:
    - '31'
    - '32'
    next: '33'
    parent: '2'
    previous: '27'
- node_id: '31'
  node_depth: 2
  node_type: Node
  content_length: 976
  content: |-
    ## container [_container]

    Container fields are used for meta information about the specific container that is the source of information. These fields help correlate data based containers from any runtime.

    **`container.cpu.usage`** :   Percent CPU used which is normalized by the number of CPU cores and it ranges from 0 to 1. Scaling factor: 1000.

    type: scaled_float

    **`container.disk.read.bytes`** :   The total number of bytes (gauge) read successfully (aggregated from all disks) since the last metric collection.

    type: long

    **`container.disk.write.bytes`** :   The total number of bytes (gauge) written successfully (aggregated from all disks) since the last metric collection.

    type: long

    **`container.id`** :   Unique container id.

    type: keyword

    **`container.image.name`** :   Name of the image the container was built on.

    type: keyword

    **`container.image.tag`** :   Container image tags.

    type: keyword

    **`container.labels`** :   Image labels.

    type: object
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/392'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## container [_container]'
  relationships:
    next: '32'
    parent: '30'
- node_id: '32'
  node_depth: 2
  node_type: Node
  content_length: 613
  content: |-
    **`container.memory.usage`** :   Memory usage percentage and it ranges from 0 to 1. Scaling factor: 1000.

    type: scaled_float

    **`container.name`** :   Container name.

    type: keyword

    **`container.network.egress.bytes`** :   The number of bytes (gauge) sent out on all network interfaces by the container since the last metric collection.

    type: long

    **`container.network.ingress.bytes`** :   The number of bytes received (gauge) on all network interfaces by the container since the last metric collection.

    type: long

    **`container.runtime`** :   Runtime managing this container.

    type: keyword

    example: docker
  metadata:
    docling_label: inline
    docling_ref: '#/groups/102'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## container [_container]'
  relationships:
    parent: '30'
    previous: '31'
- node_id: '33'
  node_depth: 1
  node_type: Node
  content_length: 2261
  content: |-
    ## data_stream [_data_stream]

    The data_stream fields take part in defining the new data stream naming scheme. In the new data stream naming scheme the value of the data stream fields combine to the name of the actual data stream in the following manner: `{data_stream.type}-{data_stream.dataset}-{data_stream.namespace}` . This means the fields can only contain characters that are valid as part of names of data streams. More details about this can be found in this blog post . An Elasticsearch data stream consists of one or more backing indices, and a data stream name forms part of the backing indices names. Due to this convention, data streams must also follow index naming restrictions. For example, data stream names cannot include `\` , `/` , `*` , `?` , `"` , `<` , `>` , `|` , `` (space character), `,` , or `#` . Please see the Elasticsearch reference for additional restrictions .

    **`data_stream.dataset`** :   The field can contain anything that makes sense to signify the source of t...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/431'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## data_stream [_data_stream]'
  relationships:
    children:
    - '34'
    - '35'
    - '36'
    next: '37'
    parent: '2'
    previous: '30'
- node_id: '34'
  node_depth: 2
  node_type: Node
  content_length: 894
  content: |-
    ## data_stream [_data_stream]

    The data_stream fields take part in defining the new data stream naming scheme. In the new data stream naming scheme the value of the data stream fields combine to the name of the actual data stream in the following manner: `{data_stream.type}-{data_stream.dataset}-{data_stream.namespace}` . This means the fields can only contain characters that are valid as part of names of data streams. More details about this can be found in this blog post . An Elasticsearch data stream consists of one or more backing indices, and a data stream name forms part of the backing indices names. Due to this convention, data streams must also follow index naming restrictions. For example, data stream names cannot include `\` , `/` , `*` , `?` , `"` , `<` , `>` , `|` , `` (space character), `,` , or `#` . Please see the Elasticsearch reference for additional restrictions .
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/431'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## data_stream [_data_stream]'
  relationships:
    next: '35'
    parent: '33'
- node_id: '35'
  node_depth: 2
  node_type: Node
  content_length: 584
  content: |-
    **`data_stream.dataset`** :   The field can contain anything that makes sense to signify the source of the data. Examples include `nginx.access` , `prometheus` , `endpoint` etc. For data streams that otherwise fit, but that do not have dataset set we use the value "generic" for the dataset value. `event.dataset` should have the same value as `data_stream.dataset` . Beyond the Elasticsearch data stream naming criteria noted above, the `dataset` value has additional restrictions: * Must not contain `-` * No longer than 100 characters

    type: constant_keyword

    example: nginx.access
  metadata:
    docling_label: inline
    docling_ref: '#/groups/108'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## data_stream [_data_stream]'
  relationships:
    next: '36'
    parent: '33'
    previous: '34'
- node_id: '36'
  node_depth: 2
  node_type: Node
  content_length: 779
  content: |-
    **`data_stream.namespace`** :   A user defined namespace. Namespaces are useful to allow grouping of data. Many users already organize their indices this way, and the data stream naming scheme now provides this best practice as a default. Many users will populate this field with `default` . If no value is used, it falls back to `default` . Beyond the Elasticsearch index naming criteria noted above, `namespace` value has the additional restrictions: * Must not contain `-` * No longer than 100 characters

    type: constant_keyword

    example: production

    **`data_stream.type`** :   An overarching type for the data stream. Currently allowed values are "logs" and "metrics". We expect to also add "traces" and "synthetics" in the near future.

    type: constant_keyword

    example: logs
  metadata:
    docling_label: inline
    docling_ref: '#/groups/109'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## data_stream [_data_stream]'
  relationships:
    parent: '33'
    previous: '35'
- node_id: '37'
  node_depth: 1
  node_type: Node
  content_length: 7008
  content: |-
    ## destination [_destination_2]

    Destination fields capture details about the receiver of a network exchange/packet. These fields are populated from a network event, packet, or other event containing details of a network transaction. Destination fields are usually populated in conjunction with source fields. The source and destination fields are considered the baseline and should always be filled if an event contains source and destination details from a network transaction. If the event also contains identification of the client and server roles, then the client and server fields should also be populated.

    **`destination.address`** :   Some event destination addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field. Then it should be duplicated to `.ip` or `.domain` , depending on which one it is.

    type: keyword

    **`destination.as.number`** :   Unique number allocated to the auton...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/495'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## destination [_destination_2]'
  relationships:
    children:
    - '38'
    - '39'
    - '40'
    - '41'
    - '42'
    - '43'
    - '44'
    next: '45'
    parent: '2'
    previous: '33'
- node_id: '38'
  node_depth: 2
  node_type: Node
  content_length: 930
  content: |-
    ## destination [_destination_2]

    Destination fields capture details about the receiver of a network exchange/packet. These fields are populated from a network event, packet, or other event containing details of a network transaction. Destination fields are usually populated in conjunction with source fields. The source and destination fields are considered the baseline and should always be filled if an event contains source and destination details from a network transaction. If the event also contains identification of the client and server roles, then the client and server fields should also be populated.

    **`destination.address`** :   Some event destination addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field. Then it should be duplicated to `.ip` or `.domain` , depending on which one it is.

    type: keyword
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/495'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## destination [_destination_2]'
  relationships:
    next: '39'
    parent: '37'
- node_id: '39'
  node_depth: 2
  node_type: Node
  content_length: 1065
  content: "**`destination.as.number`** :   Unique number allocated to the autonomous\
    \ system. The autonomous system number (ASN) uniquely identifies each network\
    \ on the Internet.\n\ntype: long\n\nexample: 15169\n\n**`destination.as.organization.name`**\
    \ :   Organization name.\n\ntype: keyword\n\nexample: Google LLC\n\n**`destination.as.organization.name.text`**\
    \ :   type: match_only_text\n\n**`destination.bytes`** :   Bytes sent from the\
    \ destination to the source.\n\ntype: long\n\nexample: 184\n\nformat: bytes\n\n\
    **`destination.domain`** :   The domain name of the destination system. This value\
    \ may be a host name, a fully qualified domain name, or another host naming format.\
    \ The value may derive from the original event or be added from enrichment.\n\n\
    type: keyword\n\nexample: foo.example.com\n\n**`destination.geo.city_name`** :\
    \   City name.\n\ntype: keyword\n\nexample: Montreal\n\n**`destination.geo.continent_code`**\
    \ :   Two-letter code representing continent\u2019s name.\n\ntype: keyword\n\n\
    example: NA\n\n**`destination.geo.continent_name`** ..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/112'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## destination [_destination_2]'
  relationships:
    next: '40'
    parent: '37'
    previous: '38'
- node_id: '40'
  node_depth: 2
  node_type: Node
  content_length: 1023
  content: |-
    **`destination.geo.country_iso_code`** :   Country ISO code.

    type: keyword

    example: CA

    **`destination.geo.country_name`** :   Country name.

    type: keyword

    example: Canada

    **`destination.geo.location`** :   Longitude and latitude.

    type: geo_point

    example: { "lon": -73.614830, "lat": 45.505918 }

    **`destination.geo.name`** :   User-defined description of a location, at the level of granularity they care about. Could be the name of their data centers, the floor number, if this describes a local physical entity, city names. Not typically used in automated geolocation.

    type: keyword

    example: boston-dc

    **`destination.geo.postal_code`** :   Postal code associated with the location. Values appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.

    type: keyword

    example: 94040

    **`destination.geo.region_iso_code`** :   Region ISO code.

    type: keyword

    example: CA-QC

    **`destination.geo.region_name`** :   Region name.

    type: k...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/120'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## destination [_destination_2]'
  relationships:
    next: '41'
    parent: '37'
    previous: '39'
- node_id: '41'
  node_depth: 2
  node_type: Node
  content_length: 1090
  content: |-
    **`destination.geo.timezone`** :   The time zone of the location, such as IANA time zone name.

    type: keyword

    example: America/Argentina/Buenos_Aires

    **`destination.ip`** :   IP address of the destination (IPv4 or IPv6).

    type: ip

    **`destination.mac`** :   MAC address of the destination. The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.

    type: keyword

    example: 00-00-5E-00-53-23

    **`destination.nat.ip`** :   Translated ip of destination based NAT sessions (e.g. internet to private DMZ) Typically used with load balancers, firewalls, or routers.

    type: ip

    **`destination.nat.port`** :   Port the source session is translated to by NAT Device. Typically used with load balancers, firewalls, or routers.

    type: long

    format: string

    **`destination.packets`** :   Packets sent from the destination to the source....
  metadata:
    docling_label: inline
    docling_ref: '#/groups/127'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## destination [_destination_2]'
  relationships:
    next: '42'
    parent: '37'
    previous: '40'
- node_id: '42'
  node_depth: 2
  node_type: Node
  content_length: 1033
  content: |-
    format: string

    **`destination.registered_domain`** :   The highest registered destination domain, stripped of the subdomain. For example, the registered domain for "foo.example.com" is "example.com". This value can be determined precisely with a list like the public suffix list ( http://publicsuffix.org ). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".

    type: keyword

    example: example.com

    **`destination.subdomain`** :   The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain. For example the subdomain portion of "www.east.mydomain.co.uk" is "east". If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with n...
  metadata:
    docling_label: text
    docling_ref: '#/texts/590'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## destination [_destination_2]'
  relationships:
    next: '43'
    parent: '37'
    previous: '41'
- node_id: '43'
  node_depth: 2
  node_type: Node
  content_length: 1029
  content: "example: east\n\n**`destination.top_level_domain`** :   The effective\
    \ top level domain (eTLD), also known as the domain suffix, is the last part of\
    \ the domain name. For example, the top level domain for example.com is \"com\"\
    . This value can be determined precisely with a list like the public suffix list\
    \ ( http://publicsuffix.org ). Trying to approximate this by simply taking the\
    \ last label will not work well for effective TLDs such as \"co.uk\".\n\ntype:\
    \ keyword\n\nexample: co.uk\n\n**`destination.user.domain`** :   Name of the directory\
    \ the user is a member of. For example, an LDAP or Active Directory domain name.\n\
    \ntype: keyword\n\n**`destination.user.email`** :   User email address.\n\ntype:\
    \ keyword\n\n**`destination.user.full_name`** :   User\u2019s full name, if available.\n\
    \ntype: keyword\n\nexample: Albert Einstein\n\n**`destination.user.full_name.text`**\
    \ :   type: match_only_text\n\n**`destination.user.group.domain`** :   Name of\
    \ the directory the group is a member of. For example, an LDAP or Active Director..."
  metadata:
    docling_label: text
    docling_ref: '#/texts/600'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## destination [_destination_2]'
  relationships:
    next: '44'
    parent: '37'
    previous: '42'
- node_id: '44'
  node_depth: 2
  node_type: Node
  content_length: 826
  content: |-
    **`destination.user.group.id`** :   Unique identifier for the group on the system/platform.

    type: keyword

    **`destination.user.group.name`** :   Name of the group.

    type: keyword

    **`destination.user.hash`** :   Unique user hash to correlate information for a user in anonymized form. Useful if `user.id` or `user.name` contain confidential information and cannot be used.

    type: keyword

    **`destination.user.id`** :   Unique identifier of the user.

    type: keyword

    example: S-1-5-21-202424912787-2692429404-2351956786-1000

    **`destination.user.name`** :   Short name or login of the user.

    type: keyword

    example: a.einstein

    **`destination.user.name.text`** :   type: match_only_text

    **`destination.user.roles`** :   Array of user roles at the time of the event.

    type: keyword

    example: ["kibana_admin", "reporting_user"]
  metadata:
    docling_label: inline
    docling_ref: '#/groups/142'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## destination [_destination_2]'
  relationships:
    parent: '37'
    previous: '43'
- node_id: '45'
  node_depth: 1
  node_type: Node
  content_length: 3983
  content: |-
    ## dll [_dll]

    These fields contain information about code libraries dynamically loaded into processes.

    Many operating systems refer to "shared code libraries" with different names, but this field set refers to all of the following: * Dynamic-link library ( `.dll` ) commonly used on Windows * Shared Object ( `.so` ) commonly used on Unix-like operating systems * Dynamic library ( `.dylib` ) commonly used on macOS

    **`dll.code_signature.digest_algorithm`** :   The hashing algorithm used to sign the process. This value can distinguish signatures when a file is signed multiple times by the same signer but with a different digest algorithm.

    type: keyword

    example: sha256

    **`dll.code_signature.exists`** :   Boolean to capture if a signature is present.

    type: boolean

    example: true

    **`dll.code_signature.signing_id`** :   The identifier used to sign the process. This is used to identify the application manufactured by a software vendor. The field is relevant to Apple *OS only.

    type: key...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/649'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## dll [_dll]'
  relationships:
    children:
    - '46'
    - '47'
    - '48'
    - '49'
    next: '50'
    parent: '2'
    previous: '37'
- node_id: '46'
  node_depth: 2
  node_type: Node
  content_length: 1034
  content: |-
    ## dll [_dll]

    These fields contain information about code libraries dynamically loaded into processes.

    Many operating systems refer to "shared code libraries" with different names, but this field set refers to all of the following: * Dynamic-link library ( `.dll` ) commonly used on Windows * Shared Object ( `.so` ) commonly used on Unix-like operating systems * Dynamic library ( `.dylib` ) commonly used on macOS

    **`dll.code_signature.digest_algorithm`** :   The hashing algorithm used to sign the process. This value can distinguish signatures when a file is signed multiple times by the same signer but with a different digest algorithm.

    type: keyword

    example: sha256

    **`dll.code_signature.exists`** :   Boolean to capture if a signature is present.

    type: boolean

    example: true

    **`dll.code_signature.signing_id`** :   The identifier used to sign the process. This is used to identify the application manufactured by a software vendor. The field is relevant to Apple *OS only.

    type: key...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/649'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## dll [_dll]'
  relationships:
    next: '47'
    parent: '45'
- node_id: '47'
  node_depth: 2
  node_type: Node
  content_length: 1068
  content: |-
    **`dll.code_signature.status`** :   Additional information about the certificate status. This is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.

    type: keyword

    example: ERROR_UNTRUSTED_ROOT

    **`dll.code_signature.subject_name`** :   Subject name of the code signer

    type: keyword

    example: Microsoft Corporation

    **`dll.code_signature.team_id`** :   The team identifier used to sign the process. This is used to identify the team or vendor of a software product. The field is relevant to Apple *OS only.

    type: keyword

    example: EQHXZ8M8AV

    **`dll.code_signature.timestamp`** :   Date and time when the code signature was generated and signed.

    type: date

    example: 2021-01-01T12:10:30Z

    **`dll.code_signature.trusted`** :   Stores the trust status of the certificate chain. Validating the trust of the certificate chain may be complicated, and this field should only be populated by...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/153'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## dll [_dll]'
  relationships:
    next: '48'
    parent: '45'
    previous: '46'
- node_id: '48'
  node_depth: 2
  node_type: Node
  content_length: 1057
  content: |-
    **`dll.code_signature.valid`** :   Boolean to capture if the digital signature is verified against the binary content. Leave unpopulated if a certificate was unchecked.

    type: boolean

    example: true

    **`dll.hash.md5`** :   MD5 hash.

    type: keyword

    **`dll.hash.sha1`** :   SHA1 hash.

    type: keyword

    **`dll.hash.sha256`** :   SHA256 hash.

    type: keyword

    **`dll.hash.sha512`** :   SHA512 hash.

    type: keyword

    **`dll.hash.ssdeep`** :   SSDEEP hash.

    type: keyword

    **`dll.name`** :   Name of the library. This generally maps to the name of the file on disk.

    type: keyword

    example: kernel32.dll

    **`dll.path`** :   Full file path of the library.

    type: keyword

    example: C:\Windows\System32\kernel32.dll

    **`dll.pe.architecture`** :   CPU architecture target for the file.

    type: keyword

    example: x64

    **`dll.pe.company`** :   Internal company name of the file, provided at compile-time.

    type: keyword

    example: Microsoft Corporation

    **`dll.pe.description`** :   Internal description of the file,...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/158'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## dll [_dll]'
  relationships:
    next: '49'
    parent: '45'
    previous: '47'
- node_id: '49'
  node_depth: 2
  node_type: Node
  content_length: 818
  content: "**`dll.pe.file_version`** :   Internal version of the file, provided at\
    \ compile-time.\n\ntype: keyword\n\nexample: 6.3.9600.17415\n\n**`dll.pe.imphash`**\
    \ :   A hash of the imports in a PE file. An imphash\u2009\u2014\u2009or import\
    \ hash\u2009\u2014\u2009can be used to fingerprint binaries even after recompilation\
    \ or other code-level transformations have occurred, which would change more traditional\
    \ hash values. Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html\
    \ .\n\ntype: keyword\n\nexample: 0c6803c4e922103c4dca5963aad36ddf\n\n**`dll.pe.original_file_name`**\
    \ :   Internal name of the file, provided at compile-time.\n\ntype: keyword\n\n\
    example: MSPAINT.EXE\n\n**`dll.pe.product`** :   Internal product name of the\
    \ file, provided at compile-time.\n\ntype: keyword\n\nexample: Microsoft\xAE Windows\xAE\
    \ Operating System"
  metadata:
    docling_label: inline
    docling_ref: '#/groups/169'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## dll [_dll]'
  relationships:
    parent: '45'
    previous: '48'
- node_id: '50'
  node_depth: 1
  node_type: Node
  content_length: 4934
  content: |-
    ## dns [_dns]

    Fields describing DNS queries and answers. DNS events should either represent a single DNS query prior to getting answers ( `dns.type:query` ) or they should represent a full exchange and contain the query details as well as all of the answers that were provided for this query ( `dns.type:answer` ).

    **`dns.answers`** :   An array containing an object for each answer section returned by the server. The main keys that should be present in these objects are defined by ECS. Records that have more information may contain more keys than what ECS defines. Not all DNS data sources give all details about DNS answers. At minimum, answer objects must contain the `data` key. If more information is available, map as much of it to ECS as possible, and add any additional fields to the answer objects as custom fields.

    type: object

    **`dns.answers.class`** :   The class of DNS data contained in this resource record.

    type: keyword

    example: IN

    **`dns.answers.data`** :   The data descr...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/747'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## dns [_dns]'
  relationships:
    children:
    - '51'
    - '52'
    - '53'
    - '54'
    - '55'
    - '56'
    next: '57'
    parent: '2'
    previous: '45'
- node_id: '51'
  node_depth: 2
  node_type: Node
  content_length: 957
  content: |-
    ## dns [_dns]

    Fields describing DNS queries and answers. DNS events should either represent a single DNS query prior to getting answers ( `dns.type:query` ) or they should represent a full exchange and contain the query details as well as all of the answers that were provided for this query ( `dns.type:answer` ).

    **`dns.answers`** :   An array containing an object for each answer section returned by the server. The main keys that should be present in these objects are defined by ECS. Records that have more information may contain more keys than what ECS defines. Not all DNS data sources give all details about DNS answers. At minimum, answer objects must contain the `data` key. If more information is available, map as much of it to ECS as possible, and add any additional fields to the answer objects as custom fields.

    type: object

    **`dns.answers.class`** :   The class of DNS data contained in this resource record.

    type: keyword

    example: IN
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/747'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## dns [_dns]'
  relationships:
    next: '52'
    parent: '50'
- node_id: '52'
  node_depth: 2
  node_type: Node
  content_length: 954
  content: "**`dns.answers.data`** :   The data describing the resource. The meaning\
    \ of this data depends on the type and class of the resource record.\n\ntype:\
    \ keyword\n\nexample: 10.10.10.10\n\n**`dns.answers.name`** :   The domain name\
    \ to which this resource record pertains. If a chain of CNAME is being resolved,\
    \ each answer\u2019s `name` should be the one that corresponds with the answer\u2019\
    s `data` . It should not simply be the original `question.name` repeated.\n\n\
    type: keyword\n\nexample: www.example.com\n\n**`dns.answers.ttl`** :   The time\
    \ interval in seconds that this resource record may be cached before it should\
    \ be discarded. Zero values mean that the data should not be cached.\n\ntype:\
    \ long\n\nexample: 180\n\n**`dns.answers.type`** :   The type of data contained\
    \ in this resource record.\n\ntype: keyword\n\nexample: CNAME\n\n**`dns.header_flags`**\
    \ :   Array of 2 letter DNS header flags. Expected values are: AA, TC, RD, RA,\
    \ AD, CD, DO.\n\ntype: keyword\n\nexample: [\"RD\", \"RA\"]"
  metadata:
    docling_label: inline
    docling_ref: '#/groups/176'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## dns [_dns]'
  relationships:
    next: '53'
    parent: '50'
    previous: '51'
- node_id: '53'
  node_depth: 2
  node_type: Node
  content_length: 842
  content: |-
    **`dns.id`** :   The DNS packet identifier assigned by the program that generated the query. The identifier is copied to the response.

    type: keyword

    example: 62111

    **`dns.op_code`** :   The DNS operation code that specifies the kind of query in the message. This value is set by the originator of a query and copied into the response.

    type: keyword

    example: QUERY

    **`dns.question.class`** :   The class of records being queried.

    type: keyword

    example: IN

    **`dns.question.name`** :   The name being queried. If the name field contains non-printable characters (below 32 or above 126), those characters should be represented as escaped base 10 integers (\DDD). Back slashes and quotes should be escaped. Tabs, carriage returns, and line feeds should be converted to \t, \r, and \n respectively.

    type: keyword

    example: www.example.com
  metadata:
    docling_label: inline
    docling_ref: '#/groups/181'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## dns [_dns]'
  relationships:
    next: '54'
    parent: '50'
    previous: '52'
- node_id: '54'
  node_depth: 2
  node_type: Node
  content_length: 708
  content: |-
    **`dns.question.registered_domain`** :   The highest registered domain, stripped of the subdomain. For example, the registered domain for "foo.example.com" is "example.com". This value can be determined precisely with a list like the public suffix list ( http://publicsuffix.org ). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".

    type: keyword

    example: example.com

    **`dns.question.subdomain`** :   The subdomain is all of the labels under the registered_domain. If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.

    type: keyword

    example: www
  metadata:
    docling_label: inline
    docling_ref: '#/groups/185'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## dns [_dns]'
  relationships:
    next: '55'
    parent: '50'
    previous: '53'
- node_id: '55'
  node_depth: 2
  node_type: Node
  content_length: 1029
  content: |-
    **`dns.question.top_level_domain`** :   The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com". This value can be determined precisely with a list like the public suffix list ( http://publicsuffix.org ). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".

    type: keyword

    example: co.uk

    **`dns.question.type`** :   The type of record being queried.

    type: keyword

    example: AAAA

    **`dns.resolved_ip`** :   Array containing all IPs seen in `answers.data` . The `answers` array can be difficult to use, because of the variety of data formats it can contain. Extracting all IP addresses seen in there to `dns.resolved_ip` makes it possible to index them as IP addresses, and makes them easier to visualize and query for.

    type: ip

    example: ["10.10.10.10", "10.10.10.11"]

    **`dns.response_code`** :   The DNS response code.

    ty...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/187'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## dns [_dns]'
  relationships:
    next: '56'
    parent: '50'
    previous: '54'
- node_id: '56'
  node_depth: 2
  node_type: Node
  content_length: 434
  content: |-
    **`dns.type`** :   The type of DNS event captured, query or answer. If your source of DNS events only gives you DNS queries, you should only create dns events of type `dns.type:query` . If your source of DNS events gives you answers as well, you should create one event per query (optionally as soon as the query is seen). And a second event containing all query details as well as an array of answers.

    type: keyword

    example: answer
  metadata:
    docling_label: inline
    docling_ref: '#/groups/191'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## dns [_dns]'
  relationships:
    parent: '50'
    previous: '55'
- node_id: '57'
  node_depth: 1
  node_type: Node
  content_length: 386
  content: "## ecs [_ecs]\n\nMeta-information specific to ECS.\n\n**`ecs.version`**\
    \ :   ECS version this event conforms to. `ecs.version` is a required field and\
    \ must exist in all events. When querying across multiple indices\u2009\u2014\u2009\
    which may conform to slightly different ECS versions\u2009\u2014\u2009this field\
    \ lets integrations adjust to the schema version of the events.\n\ntype: keyword\n\
    \nexample: 1.0.0\n\nrequired: True"
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/844'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## ecs [_ecs]'
  relationships:
    children:
    - '58'
    next: '59'
    parent: '2'
    previous: '50'
- node_id: '58'
  node_depth: 2
  node_type: Node
  content_length: 386
  content: "## ecs [_ecs]\n\nMeta-information specific to ECS.\n\n**`ecs.version`**\
    \ :   ECS version this event conforms to. `ecs.version` is a required field and\
    \ must exist in all events. When querying across multiple indices\u2009\u2014\u2009\
    which may conform to slightly different ECS versions\u2009\u2014\u2009this field\
    \ lets integrations adjust to the schema version of the events.\n\ntype: keyword\n\
    \nexample: 1.0.0\n\nrequired: True"
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/844'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## ecs [_ecs]'
  relationships:
    parent: '57'
- node_id: '59'
  node_depth: 1
  node_type: Node
  content_length: 2883
  content: "## elf [_elf]\n\nThese fields contain Linux Executable Linkable Format\
    \ (ELF) metadata.\n\n**`elf.architecture`** :   Machine architecture of the ELF\
    \ file.\n\ntype: keyword\n\nexample: x86-64\n\n**`elf.byte_order`** :   Byte sequence\
    \ of ELF file.\n\ntype: keyword\n\nexample: Little Endian\n\n**`elf.cpu_type`**\
    \ :   CPU type of the ELF file.\n\ntype: keyword\n\nexample: Intel\n\n**`elf.creation_date`**\
    \ :   Extracted when possible from the file\u2019s metadata. Indicates when it\
    \ was built or compiled. It can also be faked by malware creators.\n\ntype: date\n\
    \n**`elf.exports`** :   List of exported element names and types.\n\ntype: flattened\n\
    \n**`elf.header.abi_version`** :   Version of the ELF Application Binary Interface\
    \ (ABI).\n\ntype: keyword\n\n**`elf.header.class`** :   Header class of the ELF\
    \ file.\n\ntype: keyword\n\n**`elf.header.data`** :   Data table of the ELF header.\n\
    \ntype: keyword\n\n**`elf.header.entrypoint`** :   Header entrypoint of the ELF\
    \ file.\n\ntype: long\n\nformat: string\n\n**`elf.header.object_version`** : \
    \  \"0x1\" ..."
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/853'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## elf [_elf]'
  relationships:
    children:
    - '60'
    - '61'
    - '62'
    next: '63'
    parent: '2'
    previous: '57'
- node_id: '60'
  node_depth: 2
  node_type: Node
  content_length: 1119
  content: "## elf [_elf]\n\nThese fields contain Linux Executable Linkable Format\
    \ (ELF) metadata.\n\n**`elf.architecture`** :   Machine architecture of the ELF\
    \ file.\n\ntype: keyword\n\nexample: x86-64\n\n**`elf.byte_order`** :   Byte sequence\
    \ of ELF file.\n\ntype: keyword\n\nexample: Little Endian\n\n**`elf.cpu_type`**\
    \ :   CPU type of the ELF file.\n\ntype: keyword\n\nexample: Intel\n\n**`elf.creation_date`**\
    \ :   Extracted when possible from the file\u2019s metadata. Indicates when it\
    \ was built or compiled. It can also be faked by malware creators.\n\ntype: date\n\
    \n**`elf.exports`** :   List of exported element names and types.\n\ntype: flattened\n\
    \n**`elf.header.abi_version`** :   Version of the ELF Application Binary Interface\
    \ (ABI).\n\ntype: keyword\n\n**`elf.header.class`** :   Header class of the ELF\
    \ file.\n\ntype: keyword\n\n**`elf.header.data`** :   Data table of the ELF header.\n\
    \ntype: keyword\n\n**`elf.header.entrypoint`** :   Header entrypoint of the ELF\
    \ file.\n\ntype: long\n\nformat: string\n\n**`elf.header.object_version`** : \
    \  \"0x1\" ..."
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/853'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## elf [_elf]'
  relationships:
    next: '61'
    parent: '59'
- node_id: '61'
  node_depth: 2
  node_type: Node
  content_length: 1114
  content: |-
    type: keyword

    **`elf.header.type`** :   Header type of the ELF file.

    type: keyword

    **`elf.header.version`** :   Version of the ELF header.

    type: keyword

    **`elf.imports`** :   List of imported element names and types.

    type: flattened

    **`elf.sections`** :   An array containing an object for each section of the ELF file. The keys that should be present in these objects are defined by sub-fields underneath `elf.sections.*` .

    type: nested

    **`elf.sections.chi2`** :   Chi-square probability distribution of the section.

    type: long

    format: number

    **`elf.sections.entropy`** :   Shannon entropy calculation from the section.

    type: long

    format: number

    **`elf.sections.flags`** :   ELF Section List flags.

    type: keyword

    **`elf.sections.name`** :   ELF Section List name.

    type: keyword

    **`elf.sections.physical_offset`** :   ELF Section List offset.

    type: keyword

    **`elf.sections.physical_size`** :   ELF Section List physical size.

    type: long

    format: bytes

    **`elf.sections.type`** :...
  metadata:
    docling_label: text
    docling_ref: '#/texts/891'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## elf [_elf]'
  relationships:
    next: '62'
    parent: '59'
    previous: '60'
- node_id: '62'
  node_depth: 2
  node_type: Node
  content_length: 646
  content: |-
    type: long

    format: string

    **`elf.sections.virtual_size`** :   ELF Section List virtual size.

    type: long

    format: string

    **`elf.segments`** :   An array containing an object for each segment of the ELF file. The keys that should be present in these objects are defined by sub-fields underneath `elf.segments.*` .

    type: nested

    **`elf.segments.sections`** :   ELF object segment sections.

    type: keyword

    **`elf.segments.type`** :   ELF object segment type.

    type: keyword

    **`elf.shared_libraries`** :   List of shared libraries used by this ELF object.

    type: keyword

    **`elf.telfhash`** :   telfhash symbol hash for ELF file.

    type: keyword
  metadata:
    docling_label: text
    docling_ref: '#/texts/932'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## elf [_elf]'
  relationships:
    parent: '59'
    previous: '61'
- node_id: '63'
  node_depth: 1
  node_type: Node
  content_length: 666
  content: |-
    ## error [_error]

    These fields can represent errors of any kind. Use them for errors that happen while fetching events or in cases where the event itself contains an error.

    **`error.code`** :   Error code describing the error.

    type: keyword

    **`error.id`** :   Unique identifier for the error.

    type: keyword

    **`error.message`** :   Error message.

    type: match_only_text

    **`error.stack_trace`** :   The stack trace of this error in plain text.

    type: wildcard

    **`error.stack_trace.text`** :   type: match_only_text

    **`error.type`** :   The type of the error, for example the class name of the exception.

    type: keyword

    example: java.lang.NullPointerException
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/955'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## error [_error]'
  relationships:
    children:
    - '64'
    next: '65'
    parent: '2'
    previous: '59'
- node_id: '64'
  node_depth: 2
  node_type: Node
  content_length: 666
  content: |-
    ## error [_error]

    These fields can represent errors of any kind. Use them for errors that happen while fetching events or in cases where the event itself contains an error.

    **`error.code`** :   Error code describing the error.

    type: keyword

    **`error.id`** :   Unique identifier for the error.

    type: keyword

    **`error.message`** :   Error message.

    type: match_only_text

    **`error.stack_trace`** :   The stack trace of this error in plain text.

    type: wildcard

    **`error.stack_trace.text`** :   type: match_only_text

    **`error.type`** :   The type of the error, for example the class name of the exception.

    type: keyword

    example: java.lang.NullPointerException
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/955'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## error [_error]'
  relationships:
    parent: '63'
- node_id: '65'
  node_depth: 1
  node_type: Node
  content_length: 11163
  content: |-
    ## event [_event]

    The event fields are used for context information about the log or metric event itself. A log is defined as an event containing details of something that happened. Log events must include the time at which the thing happened. Examples of log events include a process starting on a host, a network packet being sent from a source to a destination, or a network connection between a client and a server being initiated or closed. A metric is defined as an event containing one or more numerical measurements and the time at which the measurement was taken. Examples of metric events include memory pressure measured on a host and device temperature. See the `event.kind` definition in this section for additional details about metric and state events.

    **`event.action`** :   The action captured by the event. This describes the information in the event. It is more specific than `event.category` . Examples are `group-add` , `process-started` , `file-created` . The value is normall...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/975'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## event [_event]'
  relationships:
    children:
    - '66'
    - '67'
    - '68'
    - '69'
    - '70'
    - '71'
    - '72'
    - '73'
    - '74'
    - '75'
    - '76'
    - '77'
    - '78'
    - '79'
    next: '80'
    parent: '2'
    previous: '63'
- node_id: '66'
  node_depth: 2
  node_type: Node
  content_length: 1029
  content: |-
    ## event [_event]

    The event fields are used for context information about the log or metric event itself. A log is defined as an event containing details of something that happened. Log events must include the time at which the thing happened. Examples of log events include a process starting on a host, a network packet being sent from a source to a destination, or a network connection between a client and a server being initiated or closed. A metric is defined as an event containing one or more numerical measurements and the time at which the measurement was taken. Examples of metric events include memory pressure measured on a host and device temperature. See the `event.kind` definition in this section for additional details about metric and state events.

    **`event.action`** :   The action captured by the event. This describes the information in the event. It is more specific than `event.category` . Examples are `group-add` , `process-started` , `file-created` . The value is normall...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/975'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## event [_event]'
  relationships:
    next: '67'
    parent: '65'
- node_id: '67'
  node_depth: 2
  node_type: Node
  content_length: 44
  content: |-
    type: keyword

    example: user-password-change
  metadata:
    docling_label: text
    docling_ref: '#/texts/989'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## event [_event]'
  relationships:
    next: '68'
    parent: '65'
    previous: '66'
- node_id: '68'
  node_depth: 2
  node_type: Node
  content_length: 1107
  content: "**`event.agent_id_status`** :   Agents are normally responsible for populating\
    \ the `agent.id` field value. If the system receiving events is capable of validating\
    \ the value based on authentication information for the client then this field\
    \ can be used to reflect the outcome of that validation. For example if the agent\u2019\
    s connection is authenticated with mTLS and the client cert contains the ID of\
    \ the agent to which the cert was issued then the `agent.id` value in events can\
    \ be checked against the certificate. If the values match then `event.agent_id_status:\
    \ verified` is added to the event, otherwise one of the other allowed values should\
    \ be used. If no validation is performed then the field should be omitted. The\
    \ allowed values are: `verified` - The `agent.id` field value matches expected\
    \ value obtained from auth metadata. `mismatch` - The `agent.id` field value does\
    \ not match the expected value obtained from auth metadata. `missing` - There\
    \ was no `agent.id` field in the event to valid..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/230'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## event [_event]'
  relationships:
    next: '69'
    parent: '65'
    previous: '67'
- node_id: '69'
  node_depth: 2
  node_type: Node
  content_length: 845
  content: |-
    type: keyword

    example: verified

    **`event.category`** :   This is one of four ECS Categorization Fields, and indicates the second level in the ECS category hierarchy. `event.category` represents the "big buckets" of ECS categories. For example, filtering on `event.category:process` yields all events relating to process activity. This field is closely related to `event.type` , which is used as a subcategory. This field is an array. This will allow proper categorization of some events that fall in multiple categories.

    type: keyword

    example: authentication

    **`event.code`** :   Identification code for this event, if one exists. Some event sources use event codes to identify messages unambiguously, regardless of message language or wording adjustments over time. An example of this is the Windows Event ID.

    type: keyword

    example: 4648
  metadata:
    docling_label: text
    docling_ref: '#/texts/1013'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## event [_event]'
  relationships:
    next: '70'
    parent: '65'
    previous: '68'
- node_id: '70'
  node_depth: 2
  node_type: Node
  content_length: 1034
  content: "**`event.created`** :   event.created contains the date/time when the\
    \ event was first read by an agent, or by your pipeline. This field is distinct\
    \ from @timestamp in that @timestamp typically contain the time extracted from\
    \ the original event. In most situations, these two timestamps will be slightly\
    \ different. The difference can be used to calculate the delay between your source\
    \ generating an event, and the time when your agent first processed it. This can\
    \ be used to monitor your agent\u2019s or pipeline\u2019s ability to keep up with\
    \ your event source. In case the two timestamps are identical, @timestamp should\
    \ be used.\n\ntype: date\n\nexample: 2016-05-23T08:05:34.857Z\n\n**`event.dataset`**\
    \ :   Name of the dataset. If an event source publishes more than one type of\
    \ log or events (e.g. access log, error log), the dataset is used to specify which\
    \ one the event comes from. It\u2019s recommended but not required to start the\
    \ dataset name with the module name, followed by a dot, then the dataset name.\n\
    \ntyp..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/233'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## event [_event]'
  relationships:
    next: '71'
    parent: '65'
    previous: '69'
- node_id: '71'
  node_depth: 2
  node_type: Node
  content_length: 1055
  content: "**`event.duration`** :   Duration of the event in nanoseconds. If event.start\
    \ and event.end are known this value should be the difference between the end\
    \ and start time.\n\ntype: long\n\nformat: duration\n\n**`event.end`** :   event.end\
    \ contains the date when the event ended or when the activity was last observed.\n\
    \ntype: date\n\n**`event.hash`** :   Hash (perhaps logstash fingerprint) of raw\
    \ field to be able to demonstrate log integrity.\n\ntype: keyword\n\nexample:\
    \ 123456789012345678901234567890ABCD\n\n**`event.id`** :   Unique ID to describe\
    \ the event.\n\ntype: keyword\n\nexample: 8a4f500d\n\n**`event.ingested`** : \
    \  Timestamp when an event arrived in the central data store. This is different\
    \ from `@timestamp` , which is when the event originally occurred.  It\u2019s\
    \ also different from `event.created` , which is meant to capture the first time\
    \ an agent saw the event. In normal conditions, assuming no tampering, the timestamps\
    \ should chronologically look like this: `@timestamp` < `event.created` < `event.ing..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/235'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## event [_event]'
  relationships:
    next: '72'
    parent: '65'
    previous: '70'
- node_id: '72'
  node_depth: 2
  node_type: Node
  content_length: 906
  content: |-
    **`event.kind`** :   This is one of four ECS Categorization Fields, and indicates the highest level in the ECS category hierarchy. `event.kind` gives high-level information about what type of information the event contains, without being specific to the contents of the event. For example, values of this field distinguish alert events from metric events. The value of this field can be used to inform how these kinds of events should be handled. They may warrant different retention, different access control, it may also help understand whether the data coming in at a regular interval or not.

    type: keyword

    example: alert

    **`event.module`** :   Name of the module this data is coming from. If your monitoring agent supports the concept of modules or plugins to process events of a given source (e.g. Apache logs), `event.module` should contain the name of this module.

    type: keyword

    example: apache
  metadata:
    docling_label: inline
    docling_ref: '#/groups/240'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## event [_event]'
  relationships:
    next: '73'
    parent: '65'
    previous: '71'
- node_id: '73'
  node_depth: 2
  node_type: Node
  content_length: 475
  content: |-
    **`event.original`** :   Raw text message of entire event. Used to demonstrate log integrity or where the full log message (before splitting it up in multiple parts) may be required, e.g. for reindex. This field is not indexed and doc_values are disabled. It cannot be searched, but it can be retrieved from `_source` . If users wish to override this and index this field, please see `Field data types` in the `Elasticsearch Reference` .

    type: keyword

    Field is not indexed.
  metadata:
    docling_label: inline
    docling_ref: '#/groups/242'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## event [_event]'
  relationships:
    next: '74'
    parent: '65'
    previous: '72'
- node_id: '74'
  node_depth: 2
  node_type: Node
  content_length: 946
  content: |-
    **`event.outcome`** :   This is one of four ECS Categorization Fields, and indicates the lowest level in the ECS category hierarchy. `event.outcome` simply denotes whether the event represents a success or a failure from the perspective of the entity that produced the event. Note that when a single transaction is described in multiple events, each event may populate different values of `event.outcome` , according to their perspective. Also note that in the case of a compound event (a single event that contains multiple logical events), this field should be populated with the value that best captures the overall success or failure from the perspective of the event producer. Further note that not all events will have an associated outcome. For example, this field is generally not populated for metric events, events with `event.type:info` , or any events for which an outcome does not make logical sense.

    type: keyword

    example: success
  metadata:
    docling_label: inline
    docling_ref: '#/groups/243'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## event [_event]'
  relationships:
    next: '75'
    parent: '65'
    previous: '73'
- node_id: '75'
  node_depth: 2
  node_type: Node
  content_length: 825
  content: |-
    **`event.provider`** :   Source of the event. Event transports such as Syslog or the Windows Event Log typically mention the source of an event. It can be the name of the software that generated the event (e.g. Sysmon, httpd), or of a subsystem of the operating system (kernel, Microsoft-Windows-Security-Auditing).

    type: keyword

    example: kernel

    **`event.reason`** :   Reason why this event happened, according to the source. This describes the why of a particular action or outcome captured in the event. Where `event.action` captures the action from the event, `event.reason` describes why that action was taken. For example, a web proxy with an `event.action` which denied the request may also populate `event.reason` with the reason why (e.g. `blocked site` ).

    type: keyword

    example: Terminated an unexpected process
  metadata:
    docling_label: inline
    docling_ref: '#/groups/244'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## event [_event]'
  relationships:
    next: '76'
    parent: '65'
    previous: '74'
- node_id: '76'
  node_depth: 2
  node_type: Node
  content_length: 934
  content: "**`event.reference`** :   Reference URL linking to additional information\
    \ about this event. This URL links to a static definition of this event. Alert\
    \ events, indicated by `event.kind:alert` , are a common use case for this field.\n\
    \ntype: keyword\n\nexample: https://system.example.com/event/#0001234\n\n**`event.risk_score`**\
    \ :   Risk score or priority of the event (e.g. security solutions). Use your\
    \ system\u2019s original value here.\n\ntype: float\n\n**`event.risk_score_norm`**\
    \ :   Normalized risk score or priority of the event, on a scale of 0 to 100.\
    \ This is mainly useful if you use more than one system that assigns risk scores,\
    \ and you want to see a normalized value across all systems.\n\ntype: float\n\n\
    **`event.sequence`** :   Sequence number of the event. The sequence number is\
    \ a value published by some event sources, to make the exact ordering of events\
    \ unambiguous, regardless of the timestamp precision.\n\ntype: long\n\nformat:\
    \ string"
  metadata:
    docling_label: inline
    docling_ref: '#/groups/246'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## event [_event]'
  relationships:
    next: '77'
    parent: '65'
    previous: '75'
- node_id: '77'
  node_depth: 2
  node_type: Node
  content_length: 745
  content: "**`event.severity`** :   The numeric severity of the event according to\
    \ your event source. What the different severity values mean can be different\
    \ between sources and use cases. It\u2019s up to the implementer to make sure\
    \ severities are consistent across events from the same source. The Syslog severity\
    \ belongs in `log.syslog.severity.code` . `event.severity` is meant to represent\
    \ the severity according to the event source (e.g. firewall, IDS). If the event\
    \ source does not publish its own severity, you may optionally copy the `log.syslog.severity.code`\
    \ to `event.severity` .\n\ntype: long\n\nexample: 7\n\nformat: string\n\n**`event.start`**\
    \ :   event.start contains the date when the event started or when the activity\
    \ was first observed.\n\ntype: date"
  metadata:
    docling_label: inline
    docling_ref: '#/groups/251'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## event [_event]'
  relationships:
    next: '78'
    parent: '65'
    previous: '76'
- node_id: '78'
  node_depth: 2
  node_type: Node
  content_length: 796
  content: "**`event.timezone`** :   This field should be populated when the event\u2019\
    s timestamp does not include timezone information already (e.g. default Syslog\
    \ timestamps). It\u2019s optional otherwise. Acceptable timezone formats are:\
    \ a canonical ID (e.g. \"Europe/Amsterdam\"), abbreviated (e.g. \"EST\") or an\
    \ HH:mm differential (e.g. \"-05:00\").\n\ntype: keyword\n\n**`event.type`** :\
    \   This is one of four ECS Categorization Fields, and indicates the third level\
    \ in the ECS category hierarchy. `event.type` represents a categorization \"sub-bucket\"\
    \ that, when used along with the `event.category` field values, enables filtering\
    \ events down to a level appropriate for single visualization. This field is an\
    \ array. This will allow proper categorization of some events that fall in multiple\
    \ event types.\n\ntype: keyword"
  metadata:
    docling_label: inline
    docling_ref: '#/groups/253'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## event [_event]'
  relationships:
    next: '79'
    parent: '65'
    previous: '77'
- node_id: '79'
  node_depth: 2
  node_type: Node
  content_length: 396
  content: |-
    **`event.url`** :   URL linking to an external system to continue investigation of this event. This URL links to another system where in-depth investigation of the specific occurrence of this event can take place. Alert events, indicated by `event.kind:alert` , are a common use case for this field.

    type: keyword

    example: https://mysystem.example.com/alert/5271dedb-f5b0-4218-87f0-4ac4870a38fe
  metadata:
    docling_label: inline
    docling_ref: '#/groups/255'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## event [_event]'
  relationships:
    parent: '65'
    previous: '78'
- node_id: '80'
  node_depth: 1
  node_type: Node
  content_length: 712
  content: |-
    ## faas [_faas]

    The user fields describe information about the function as a service that is relevant to the event.

    **`faas.coldstart`** :   Boolean value indicating a cold start of a function.

    type: boolean

    **`faas.execution`** :   The execution ID of the current function execution.

    type: keyword

    example: af9d5aa4-a685-4c5f-a22b-444f80b3cc28

    **`faas.trigger`** :   Details about the function trigger.

    type: nested

    **`faas.trigger.request_id`** :   The ID of the trigger request , message, event, etc.

    type: keyword

    example: 123456789

    **`faas.trigger.type`** :   The trigger for the function execution. Expected values are: * http * pubsub * datasource * timer * other

    type: keyword

    example: http
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/1166'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## faas [_faas]'
  relationships:
    children:
    - '81'
    next: '82'
    parent: '2'
    previous: '65'
- node_id: '81'
  node_depth: 2
  node_type: Node
  content_length: 712
  content: |-
    ## faas [_faas]

    The user fields describe information about the function as a service that is relevant to the event.

    **`faas.coldstart`** :   Boolean value indicating a cold start of a function.

    type: boolean

    **`faas.execution`** :   The execution ID of the current function execution.

    type: keyword

    example: af9d5aa4-a685-4c5f-a22b-444f80b3cc28

    **`faas.trigger`** :   Details about the function trigger.

    type: nested

    **`faas.trigger.request_id`** :   The ID of the trigger request , message, event, etc.

    type: keyword

    example: 123456789

    **`faas.trigger.type`** :   The trigger for the function execution. Expected values are: * http * pubsub * datasource * timer * other

    type: keyword

    example: http
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/1166'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## faas [_faas]'
  relationships:
    parent: '80'
- node_id: '82'
  node_depth: 1
  node_type: Node
  content_length: 14039
  content: "## file [_file_2]\n\nA file is defined as a set of information that has\
    \ been created on, or has existed on a filesystem. File objects can be associated\
    \ with host events, network events, and/or file events (e.g., those produced by\
    \ File Integrity Monitoring [FIM] products or services). File fields provide details\
    \ about the affected file associated with the event or metric.\n\n**`file.accessed`**\
    \ :   Last time the file was accessed. Note that not all filesystems keep track\
    \ of access time.\n\ntype: date\n\n**`file.attributes`** :   Array of file attributes.\
    \ Attributes names will vary by platform. Here\u2019s a non-exhaustive list of\
    \ values that are expected in this field: archive, compressed, directory, encrypted,\
    \ execute, hidden, read, readonly, system, write.\n\ntype: keyword\n\nexample:\
    \ [\"readonly\", \"system\"]\n\n**`file.code_signature.digest_algorithm`** : \
    \  The hashing algorithm used to sign the process. This value can distinguish\
    \ signatures when a file is signed multiple times by the same signer but wit..."
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/1186'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## file [_file_2]'
  relationships:
    children:
    - '83'
    - '84'
    - '85'
    - '86'
    - '87'
    - '88'
    - '89'
    - '90'
    - '91'
    - '92'
    - '93'
    - '94'
    - '95'
    - '96'
    next: '97'
    parent: '2'
    previous: '80'
- node_id: '83'
  node_depth: 2
  node_type: Node
  content_length: 1046
  content: "## file [_file_2]\n\nA file is defined as a set of information that has\
    \ been created on, or has existed on a filesystem. File objects can be associated\
    \ with host events, network events, and/or file events (e.g., those produced by\
    \ File Integrity Monitoring [FIM] products or services). File fields provide details\
    \ about the affected file associated with the event or metric.\n\n**`file.accessed`**\
    \ :   Last time the file was accessed. Note that not all filesystems keep track\
    \ of access time.\n\ntype: date\n\n**`file.attributes`** :   Array of file attributes.\
    \ Attributes names will vary by platform. Here\u2019s a non-exhaustive list of\
    \ values that are expected in this field: archive, compressed, directory, encrypted,\
    \ execute, hidden, read, readonly, system, write.\n\ntype: keyword\n\nexample:\
    \ [\"readonly\", \"system\"]\n\n**`file.code_signature.digest_algorithm`** : \
    \  The hashing algorithm used to sign the process. This value can distinguish\
    \ signatures when a file is signed multiple times by the same signer but wit..."
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/1186'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## file [_file_2]'
  relationships:
    next: '84'
    parent: '82'
- node_id: '84'
  node_depth: 2
  node_type: Node
  content_length: 1035
  content: |-
    example: sha256

    **`file.code_signature.exists`** :   Boolean to capture if a signature is present.

    type: boolean

    example: true

    **`file.code_signature.signing_id`** :   The identifier used to sign the process. This is used to identify the application manufactured by a software vendor. The field is relevant to Apple *OS only.

    type: keyword

    example: com.apple.xpc.proxy

    **`file.code_signature.status`** :   Additional information about the certificate status. This is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.

    type: keyword

    example: ERROR_UNTRUSTED_ROOT

    **`file.code_signature.subject_name`** :   Subject name of the code signer

    type: keyword

    example: Microsoft Corporation

    **`file.code_signature.team_id`** :   The team identifier used to sign the process. This is used to identify the team or vendor of a software product. The field is relevant to Apple *OS only.
    ...
  metadata:
    docling_label: text
    docling_ref: '#/texts/1198'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## file [_file_2]'
  relationships:
    next: '85'
    parent: '82'
    previous: '83'
- node_id: '85'
  node_depth: 2
  node_type: Node
  content_length: 1059
  content: |-
    **`file.code_signature.timestamp`** :   Date and time when the code signature was generated and signed.

    type: date

    example: 2021-01-01T12:10:30Z

    **`file.code_signature.trusted`** :   Stores the trust status of the certificate chain. Validating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.

    type: boolean

    example: true

    **`file.code_signature.valid`** :   Boolean to capture if the digital signature is verified against the binary content. Leave unpopulated if a certificate was unchecked.

    type: boolean

    example: true

    **`file.created`** :   File creation time. Note that not all filesystems store the creation time.

    type: date

    **`file.ctime`** :   Last time the file attributes or metadata changed. Note that changes to the file content will update `mtime` . This implies `ctime` will be adjusted at the same time, since `mtime` is an attribute of the file.

    type: date

    **`file.device`** :   Device t...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/270'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## file [_file_2]'
  relationships:
    next: '86'
    parent: '82'
    previous: '84'
- node_id: '86'
  node_depth: 2
  node_type: Node
  content_length: 1085
  content: "**`file.directory`** :   Directory where the file is located. It should\
    \ include the drive letter, when appropriate.\n\ntype: keyword\n\nexample: /home/alice\n\
    \n**`file.drive_letter`** :   Drive letter where the file is located. This field\
    \ is only relevant on Windows. The value should be uppercase, and not include\
    \ the colon.\n\ntype: keyword\n\nexample: C\n\n**`file.elf.architecture`** : \
    \  Machine architecture of the ELF file.\n\ntype: keyword\n\nexample: x86-64\n\
    \n**`file.elf.byte_order`** :   Byte sequence of ELF file.\n\ntype: keyword\n\n\
    example: Little Endian\n\n**`file.elf.cpu_type`** :   CPU type of the ELF file.\n\
    \ntype: keyword\n\nexample: Intel\n\n**`file.elf.creation_date`** :   Extracted\
    \ when possible from the file\u2019s metadata. Indicates when it was built or\
    \ compiled. It can also be faked by malware creators.\n\ntype: date\n\n**`file.elf.exports`**\
    \ :   List of exported element names and types.\n\ntype: flattened\n\n**`file.elf.header.abi_version`**\
    \ :   Version of the ELF Application Binary Interface (ABI).\n\ntype: ..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/276'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## file [_file_2]'
  relationships:
    next: '87'
    parent: '82'
    previous: '85'
- node_id: '87'
  node_depth: 2
  node_type: Node
  content_length: 1100
  content: |-
    **`file.elf.header.data`** :   Data table of the ELF header.

    type: keyword

    **`file.elf.header.entrypoint`** :   Header entrypoint of the ELF file.

    type: long

    format: string

    **`file.elf.header.object_version`** :   "0x1" for original ELF files.

    type: keyword

    **`file.elf.header.os_abi`** :   Application Binary Interface (ABI) of the Linux OS.

    type: keyword

    **`file.elf.header.type`** :   Header type of the ELF file.

    type: keyword

    **`file.elf.header.version`** :   Version of the ELF header.

    type: keyword

    **`file.elf.imports`** :   List of imported element names and types.

    type: flattened

    **`file.elf.sections`** :   An array containing an object for each section of the ELF file. The keys that should be present in these objects are defined by sub-fields underneath `elf.sections.*` .

    type: nested

    **`file.elf.sections.chi2`** :   Chi-square probability distribution of the section.

    type: long

    format: number

    **`file.elf.sections.entropy`** :   Shannon entropy calculation from...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/285'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## file [_file_2]'
  relationships:
    next: '88'
    parent: '82'
    previous: '86'
- node_id: '88'
  node_depth: 2
  node_type: Node
  content_length: 1101
  content: |-
    type: keyword

    **`file.elf.sections.name`** :   ELF Section List name.

    type: keyword

    **`file.elf.sections.physical_offset`** :   ELF Section List offset.

    type: keyword

    **`file.elf.sections.physical_size`** :   ELF Section List physical size.

    type: long

    format: bytes

    **`file.elf.sections.type`** :   ELF Section List type.

    type: keyword

    **`file.elf.sections.virtual_address`** :   ELF Section List virtual address.

    type: long

    format: string

    **`file.elf.sections.virtual_size`** :   ELF Section List virtual size.

    type: long

    format: string

    **`file.elf.segments`** :   An array containing an object for each segment of the ELF file. The keys that should be present in these objects are defined by sub-fields underneath `elf.segments.*` .

    type: nested

    **`file.elf.segments.sections`** :   ELF object segment sections.

    type: keyword

    **`file.elf.segments.type`** :   ELF object segment type.

    type: keyword

    **`file.elf.shared_libraries`** :   List of shared libraries used by this ELF ...
  metadata:
    docling_label: text
    docling_ref: '#/texts/1316'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## file [_file_2]'
  relationships:
    next: '89'
    parent: '82'
    previous: '87'
- node_id: '89'
  node_depth: 2
  node_type: Node
  content_length: 1030
  content: |-
    **`file.extension`** :   File extension, excluding the leading dot. Note that when the file name has multiple extensions (example.tar.gz), only the last one should be captured ("gz", not "tar.gz").

    type: keyword

    example: png

    **`file.fork_name`** :   A fork is additional data associated with a filesystem object. On Linux, a resource fork is used to store additional data with a filesystem object. A file always has at least one fork for the data portion, and additional forks may exist. On NTFS, this is analogous to an Alternate Data Stream (ADS), and the default data stream for a file is just called $DATA. Zone.Identifier is commonly used by Windows to track contents downloaded from the Internet. An ADS is typically of the form: `C:\path\to\filename.extension:some_fork_name` , and `some_fork_name` is the value that should populate `fork_name` . `filename.extension` should populate `file.name` , and `extension` should populate `file.extension` . The full path, `file.path` , will include...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/307'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## file [_file_2]'
  relationships:
    next: '90'
    parent: '82'
    previous: '88'
- node_id: '90'
  node_depth: 2
  node_type: Node
  content_length: 1132
  content: |-
    example: Zone.Identifer

    **`file.gid`** :   Primary group ID (GID) of the file.

    type: keyword

    example: 1001

    **`file.group`** :   Primary group name of the file.

    type: keyword

    example: alice

    **`file.hash.md5`** :   MD5 hash.

    type: keyword

    **`file.hash.sha1`** :   SHA1 hash.

    type: keyword

    **`file.hash.sha256`** :   SHA256 hash.

    type: keyword

    **`file.hash.sha512`** :   SHA512 hash.

    type: keyword

    **`file.hash.ssdeep`** :   SSDEEP hash.

    type: keyword

    **`file.inode`** :   Inode representing the file in the filesystem.

    type: keyword

    example: 256383

    **`file.mime_type`** :   MIME type should identify the format of the file or stream of bytes using IANA official types , where possible. When more than one type is applicable, the most specific type should be used.

    type: keyword

    **`file.mode`** :   Mode of the file in octal representation.

    type: keyword

    example: 0640

    **`file.mtime`** :   Last time the file content was modified.

    type: date

    **`file.name`** :   Name of the fi...
  metadata:
    docling_label: text
    docling_ref: '#/texts/1378'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## file [_file_2]'
  relationships:
    next: '91'
    parent: '82'
    previous: '89'
- node_id: '91'
  node_depth: 2
  node_type: Node
  content_length: 733
  content: |-
    type: keyword

    example: alice

    **`file.path`** :   Full path to the file, including the file name. It should include the drive letter, when appropriate.

    type: keyword

    example: /home/alice/example.png

    **`file.path.text`** :   type: match_only_text

    **`file.pe.architecture`** :   CPU architecture target for the file.

    type: keyword

    example: x64

    **`file.pe.company`** :   Internal company name of the file, provided at compile-time.

    type: keyword

    example: Microsoft Corporation

    **`file.pe.description`** :   Internal description of the file, provided at compile-time.

    type: keyword

    example: Paint

    **`file.pe.file_version`** :   Internal version of the file, provided at compile-time.

    type: keyword

    example: 6.3.9600.17415
  metadata:
    docling_label: text
    docling_ref: '#/texts/1424'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## file [_file_2]'
  relationships:
    next: '92'
    parent: '82'
    previous: '90'
- node_id: '92'
  node_depth: 2
  node_type: Node
  content_length: 1015
  content: "**`file.pe.imphash`** :   A hash of the imports in a PE file. An imphash\u2009\
    \u2014\u2009or import hash\u2009\u2014\u2009can be used to fingerprint binaries\
    \ even after recompilation or other code-level transformations have occurred,\
    \ which would change more traditional hash values. Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html\
    \ .\n\ntype: keyword\n\nexample: 0c6803c4e922103c4dca5963aad36ddf\n\n**`file.pe.original_file_name`**\
    \ :   Internal name of the file, provided at compile-time.\n\ntype: keyword\n\n\
    example: MSPAINT.EXE\n\n**`file.pe.product`** :   Internal product name of the\
    \ file, provided at compile-time.\n\ntype: keyword\n\nexample: Microsoft\xAE Windows\xAE\
    \ Operating System\n\n**`file.size`** :   File size in bytes. Only relevant when\
    \ `file.type` is \"file\".\n\ntype: long\n\nexample: 16384\n\n**`file.target_path`**\
    \ :   Target path for symlinks.\n\ntype: keyword\n\n**`file.target_path.text`**\
    \ :   type: match_only_text\n\n**`file.type`** :   File type (file, dir, or symlink).\n\
    \ntype: keyword..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/328'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## file [_file_2]'
  relationships:
    next: '93'
    parent: '82'
    previous: '91'
- node_id: '93'
  node_depth: 2
  node_type: Node
  content_length: 1080
  content: "**`file.uid`** :   The user ID (UID) or security identifier (SID) of the\
    \ file owner.\n\ntype: keyword\n\nexample: 1001\n\n**`file.x509.alternative_names`**\
    \ :   List of subject alternative names (SAN). Name types vary by certificate\
    \ authority and certificate type but commonly contain IP addresses, DNS names\
    \ (and wildcards), and email addresses.\n\ntype: keyword\n\nexample: *.elastic.co\n\
    \n**`file.x509.issuer.common_name`** :   List of common name (CN) of issuing certificate\
    \ authority.\n\ntype: keyword\n\nexample: Example SHA2 High Assurance Server CA\n\
    \n**`file.x509.issuer.country`** :   List of country \xA9 codes\n\ntype: keyword\n\
    \nexample: US\n\n**`file.x509.issuer.distinguished_name`** :   Distinguished name\
    \ (DN) of issuing certificate authority.\n\ntype: keyword\n\nexample: C=US, O=Example\
    \ Inc, OU=www.example.com, CN=Example SHA2 High Assurance Server CA\n\n**`file.x509.issuer.locality`**\
    \ :   List of locality names (L)\n\ntype: keyword\n\nexample: Mountain View\n\n\
    **`file.x509.issuer.organization`** :   List of organiza..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/335'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## file [_file_2]'
  relationships:
    next: '94'
    parent: '82'
    previous: '92'
- node_id: '94'
  node_depth: 2
  node_type: Node
  content_length: 1099
  content: |-
    **`file.x509.issuer.organizational_unit`** :   List of organizational units (OU) of issuing certificate authority.

    type: keyword

    example: www.example.com

    **`file.x509.issuer.state_or_province`** :   List of state or province names (ST, S, or P)

    type: keyword

    example: California

    **`file.x509.not_after`** :   Time at which the certificate is no longer considered valid.

    type: date

    example: 2020-07-16 03:15:39+00:00

    **`file.x509.not_before`** :   Time at which the certificate is first considered valid.

    type: date

    example: 2019-08-16 01:40:25+00:00

    **`file.x509.public_key_algorithm`** :   Algorithm used to generate the public key.

    type: keyword

    example: RSA

    **`file.x509.public_key_curve`** :   The curve used by the elliptic curve public key algorithm. This is algorithm specific.

    type: keyword

    example: nistp521

    **`file.x509.public_key_exponent`** :   Exponent used to derive the public key. This is algorithm specific.

    type: long

    example: 65537

    Field is not indexed.

    **`fi...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/342'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## file [_file_2]'
  relationships:
    next: '95'
    parent: '82'
    previous: '93'
- node_id: '95'
  node_depth: 2
  node_type: Node
  content_length: 1055
  content: "**`file.x509.serial_number`** :   Unique serial number issued by the certificate\
    \ authority. For consistency, if this value is alphanumeric, it should be formatted\
    \ without colons and uppercase characters.\n\ntype: keyword\n\nexample: 55FBB9C7DEBF09809D12CCAA\n\
    \n**`file.x509.signature_algorithm`** :   Identifier for certificate signature\
    \ algorithm. We recommend using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353\
    \ .\n\ntype: keyword\n\nexample: SHA256-RSA\n\n**`file.x509.subject.common_name`**\
    \ :   List of common names (CN) of subject.\n\ntype: keyword\n\nexample: shared.global.example.net\n\
    \n**`file.x509.subject.country`** :   List of country \xA9 code\n\ntype: keyword\n\
    \nexample: US\n\n**`file.x509.subject.distinguished_name`** :   Distinguished\
    \ name (DN) of the certificate subject entity.\n\ntype: keyword\n\nexample: C=US,\
    \ ST=California, L=San Francisco, O=Example, Inc., CN=shared.global.example.net\n\
    \n**`file.x509.subject.locality`** :   List of lo..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/350'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## file [_file_2]'
  relationships:
    next: '96'
    parent: '82'
    previous: '94'
- node_id: '96'
  node_depth: 2
  node_type: Node
  content_length: 443
  content: |-
    **`file.x509.subject.organization`** :   List of organizations (O) of subject.

    type: keyword

    example: Example, Inc.

    **`file.x509.subject.organizational_unit`** :   List of organizational units (OU) of subject.

    type: keyword

    **`file.x509.subject.state_or_province`** :   List of state or province names (ST, S, or P)

    type: keyword

    example: California

    **`file.x509.version_number`** :   Version of x509 format.

    type: keyword

    example: 3
  metadata:
    docling_label: inline
    docling_ref: '#/groups/356'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## file [_file_2]'
  relationships:
    parent: '82'
    previous: '95'
- node_id: '97'
  node_depth: 1
  node_type: Node
  content_length: 1532
  content: "## geo [_geo]\n\nGeo fields can carry data about a specific location related\
    \ to an event. This geolocation information can be derived from techniques such\
    \ as Geo IP, or be user-supplied.\n\n**`geo.city_name`** :   City name.\n\ntype:\
    \ keyword\n\nexample: Montreal\n\n**`geo.continent_code`** :   Two-letter code\
    \ representing continent\u2019s name.\n\ntype: keyword\n\nexample: NA\n\n**`geo.continent_name`**\
    \ :   Name of the continent.\n\ntype: keyword\n\nexample: North America\n\n**`geo.country_iso_code`**\
    \ :   Country ISO code.\n\ntype: keyword\n\nexample: CA\n\n**`geo.country_name`**\
    \ :   Country name.\n\ntype: keyword\n\nexample: Canada\n\n**`geo.location`**\
    \ :   Longitude and latitude.\n\ntype: geo_point\n\nexample: { \"lon\": -73.614830,\
    \ \"lat\": 45.505918 }\n\n**`geo.name`** :   User-defined description of a location,\
    \ at the level of granularity they care about. Could be the name of their data\
    \ centers, the floor number, if this describes a local physical entity, city names.\
    \ Not typically used in automated geolocation.\n\ntype: keyword\n\ne..."
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/1579'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## geo [_geo]'
  relationships:
    children:
    - '98'
    - '99'
    next: '100'
    parent: '2'
    previous: '82'
- node_id: '98'
  node_depth: 2
  node_type: Node
  content_length: 1017
  content: "## geo [_geo]\n\nGeo fields can carry data about a specific location related\
    \ to an event. This geolocation information can be derived from techniques such\
    \ as Geo IP, or be user-supplied.\n\n**`geo.city_name`** :   City name.\n\ntype:\
    \ keyword\n\nexample: Montreal\n\n**`geo.continent_code`** :   Two-letter code\
    \ representing continent\u2019s name.\n\ntype: keyword\n\nexample: NA\n\n**`geo.continent_name`**\
    \ :   Name of the continent.\n\ntype: keyword\n\nexample: North America\n\n**`geo.country_iso_code`**\
    \ :   Country ISO code.\n\ntype: keyword\n\nexample: CA\n\n**`geo.country_name`**\
    \ :   Country name.\n\ntype: keyword\n\nexample: Canada\n\n**`geo.location`**\
    \ :   Longitude and latitude.\n\ntype: geo_point\n\nexample: { \"lon\": -73.614830,\
    \ \"lat\": 45.505918 }\n\n**`geo.name`** :   User-defined description of a location,\
    \ at the level of granularity they care about. Could be the name of their data\
    \ centers, the floor number, if this describes a local physical entity, city names.\
    \ Not typically used in automated geolocation.\n\ntype: keyword\n\ne..."
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/1579'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## geo [_geo]'
  relationships:
    next: '99'
    parent: '97'
- node_id: '99'
  node_depth: 2
  node_type: Node
  content_length: 513
  content: |-
    **`geo.postal_code`** :   Postal code associated with the location. Values appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.

    type: keyword

    example: 94040

    **`geo.region_iso_code`** :   Region ISO code.

    type: keyword

    example: CA-QC

    **`geo.region_name`** :   Region name.

    type: keyword

    example: Quebec

    **`geo.timezone`** :   The time zone of the location, such as IANA time zone name.

    type: keyword

    example: America/Argentina/Buenos_Aires
  metadata:
    docling_label: inline
    docling_ref: '#/groups/367'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## geo [_geo]'
  relationships:
    parent: '97'
    previous: '98'
- node_id: '100'
  node_depth: 1
  node_type: Node
  content_length: 387
  content: |-
    ## group [_group_3]

    The group fields are meant to represent groups that are relevant to the event.

    **`group.domain`** :   Name of the directory the group is a member of. For example, an LDAP or Active Directory domain name.

    type: keyword

    **`group.id`** :   Unique identifier for the group on the system/platform.

    type: keyword

    **`group.name`** :   Name of the group.

    type: keyword
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/1625'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## group [_group_3]'
  relationships:
    children:
    - '101'
    next: '102'
    parent: '2'
    previous: '97'
- node_id: '101'
  node_depth: 2
  node_type: Node
  content_length: 387
  content: |-
    ## group [_group_3]

    The group fields are meant to represent groups that are relevant to the event.

    **`group.domain`** :   Name of the directory the group is a member of. For example, an LDAP or Active Directory domain name.

    type: keyword

    **`group.id`** :   Unique identifier for the group on the system/platform.

    type: keyword

    **`group.name`** :   Name of the group.

    type: keyword
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/1625'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## group [_group_3]'
  relationships:
    parent: '100'
- node_id: '102'
  node_depth: 1
  node_type: Node
  content_length: 770
  content: |-
    ## hash [_hash]

    The hash fields represent different bitwise hash algorithms and their values. Field names for common hashes (e.g. MD5, SHA1) are predefined. Add fields for other hashes by lowercasing the hash algorithm name and using underscore separators as appropriate (snake case, e.g. sha3_512). Note that this fieldset is used for common hashes that may be computed over a range of generic bytes. Entity-specific hashes such as ja3 or imphash are placed in the fieldsets to which they relate (tls and pe, respectively).

    **`hash.md5`** :   MD5 hash.

    type: keyword

    **`hash.sha1`** :   SHA1 hash.

    type: keyword

    **`hash.sha256`** :   SHA256 hash.

    type: keyword

    **`hash.sha512`** :   SHA512 hash.

    type: keyword

    **`hash.ssdeep`** :   SSDEEP hash.

    type: keyword
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/1636'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## hash [_hash]'
  relationships:
    children:
    - '103'
    next: '104'
    parent: '2'
    previous: '100'
- node_id: '103'
  node_depth: 2
  node_type: Node
  content_length: 770
  content: |-
    ## hash [_hash]

    The hash fields represent different bitwise hash algorithms and their values. Field names for common hashes (e.g. MD5, SHA1) are predefined. Add fields for other hashes by lowercasing the hash algorithm name and using underscore separators as appropriate (snake case, e.g. sha3_512). Note that this fieldset is used for common hashes that may be computed over a range of generic bytes. Entity-specific hashes such as ja3 or imphash are placed in the fieldsets to which they relate (tls and pe, respectively).

    **`hash.md5`** :   MD5 hash.

    type: keyword

    **`hash.sha1`** :   SHA1 hash.

    type: keyword

    **`hash.sha256`** :   SHA256 hash.

    type: keyword

    **`hash.sha512`** :   SHA512 hash.

    type: keyword

    **`hash.ssdeep`** :   SSDEEP hash.

    type: keyword
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/1636'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## hash [_hash]'
  relationships:
    parent: '102'
- node_id: '104'
  node_depth: 1
  node_type: Node
  content_length: 5679
  content: |-
    ## host [_host]

    A host is defined as a general computing instance. ECS host.* fields should be populated with details about the host on which the event happened, or from which the measurement was taken. Host types include hardware, virtual machines, Docker containers, and Kubernetes nodes.

    **`host.architecture`** :   Operating system architecture.

    type: keyword

    example: x86_64

    **`host.cpu.usage`** :   Percent CPU used which is normalized by the number of CPU cores and it ranges from 0 to 1. Scaling factor: 1000. For example: For a two core host, this value should be the average of the two cores, between 0 and 1.

    type: scaled_float

    **`host.disk.read.bytes`** :   The total number of bytes (gauge) read successfully (aggregated from all disks) since the last metric collection.

    type: long

    **`host.disk.write.bytes`** :   The total number of bytes (gauge) written successfully (aggregated from all disks) since the last metric collection.

    type: long

    **`host.domain`** :   Name of the ...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/1653'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## host [_host]'
  relationships:
    children:
    - '105'
    - '106'
    - '107'
    - '108'
    - '109'
    - '110'
    next: '111'
    parent: '2'
    previous: '102'
- node_id: '105'
  node_depth: 2
  node_type: Node
  content_length: 964
  content: |-
    ## host [_host]

    A host is defined as a general computing instance. ECS host.* fields should be populated with details about the host on which the event happened, or from which the measurement was taken. Host types include hardware, virtual machines, Docker containers, and Kubernetes nodes.

    **`host.architecture`** :   Operating system architecture.

    type: keyword

    example: x86_64

    **`host.cpu.usage`** :   Percent CPU used which is normalized by the number of CPU cores and it ranges from 0 to 1. Scaling factor: 1000. For example: For a two core host, this value should be the average of the two cores, between 0 and 1.

    type: scaled_float

    **`host.disk.read.bytes`** :   The total number of bytes (gauge) read successfully (aggregated from all disks) since the last metric collection.

    type: long

    **`host.disk.write.bytes`** :   The total number of bytes (gauge) written successfully (aggregated from all disks) since the last metric collection.

    type: long
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/1653'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## host [_host]'
  relationships:
    next: '106'
    parent: '104'
- node_id: '106'
  node_depth: 2
  node_type: Node
  content_length: 1098
  content: "**`host.domain`** :   Name of the domain of which the host is a member.\
    \ For example, on Windows this could be the host\u2019s Active Directory domain\
    \ or NetBIOS domain name. For Linux this could be the domain of the host\u2019\
    s LDAP provider.\n\ntype: keyword\n\nexample: CONTOSO\n\n**`host.geo.city_name`**\
    \ :   City name.\n\ntype: keyword\n\nexample: Montreal\n\n**`host.geo.continent_code`**\
    \ :   Two-letter code representing continent\u2019s name.\n\ntype: keyword\n\n\
    example: NA\n\n**`host.geo.continent_name`** :   Name of the continent.\n\ntype:\
    \ keyword\n\nexample: North America\n\n**`host.geo.country_iso_code`** :   Country\
    \ ISO code.\n\ntype: keyword\n\nexample: CA\n\n**`host.geo.country_name`** : \
    \  Country name.\n\ntype: keyword\n\nexample: Canada\n\n**`host.geo.location`**\
    \ :   Longitude and latitude.\n\ntype: geo_point\n\nexample: { \"lon\": -73.614830,\
    \ \"lat\": 45.505918 }\n\n**`host.geo.name`** :   User-defined description of\
    \ a location, at the level of granularity they care about. Could be the name of\
    \ their data centers, the floor number, i..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/383'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## host [_host]'
  relationships:
    next: '107'
    parent: '104'
    previous: '105'
- node_id: '107'
  node_depth: 2
  node_type: Node
  content_length: 936
  content: |-
    type: keyword

    example: boston-dc

    **`host.geo.postal_code`** :   Postal code associated with the location. Values appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.

    type: keyword

    example: 94040

    **`host.geo.region_iso_code`** :   Region ISO code.

    type: keyword

    example: CA-QC

    **`host.geo.region_name`** :   Region name.

    type: keyword

    example: Quebec

    **`host.geo.timezone`** :   The time zone of the location, such as IANA time zone name.

    type: keyword

    example: America/Argentina/Buenos_Aires

    **`host.hostname`** :   Hostname of the host. It normally contains what the `hostname` command returns on the host machine.

    type: keyword

    **`host.id`** :   Unique host id. As hostname is not always unique, use values that are meaningful in your environment. Example: The current usage of `beat.name` .

    type: keyword

    **`host.ip`** :   Host ip addresses.

    type: ip
  metadata:
    docling_label: text
    docling_ref: '#/texts/1698'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## host [_host]'
  relationships:
    next: '108'
    parent: '104'
    previous: '106'
- node_id: '108'
  node_depth: 2
  node_type: Node
  content_length: 1033
  content: |-
    **`host.mac`** :   Host MAC addresses. The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.

    type: keyword

    example: ["00-00-5E-00-53-23", "00-00-5E-00-53-24"]

    **`host.name`** :   Name of the host. It can contain what `hostname` returns on Unix systems, the fully qualified domain name, or a name specified by the user. The sender decides which value to use.

    type: keyword

    **`host.network.egress.bytes`** :   The number of bytes (gauge) sent out on all network interfaces by the host since the last metric collection.

    type: long

    **`host.network.egress.packets`** :   The number of packets (gauge) sent out on all network interfaces by the host since the last metric collection.

    type: long

    **`host.network.ingress.bytes`** :   The number of bytes received (gauge) on all network interfaces by the host since the la...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/398'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## host [_host]'
  relationships:
    next: '109'
    parent: '104'
    previous: '107'
- node_id: '109'
  node_depth: 2
  node_type: Node
  content_length: 835
  content: |-
    **`host.network.ingress.packets`** :   The number of packets (gauge) received on all network interfaces by the host since the last metric collection.

    type: long

    **`host.os.family`** :   OS family (such as redhat, debian, freebsd, windows).

    type: keyword

    example: debian

    **`host.os.full`** :   Operating system name, including the version or code name.

    type: keyword

    example: Mac OS Mojave

    **`host.os.full.text`** :   type: match_only_text

    **`host.os.kernel`** :   Operating system kernel version as a raw string.

    type: keyword

    example: 4.4.0-112-generic

    **`host.os.name`** :   Operating system name, without the version.

    type: keyword

    example: Mac OS X

    **`host.os.name.text`** :   type: match_only_text

    **`host.os.platform`** :   Operating system platform (such centos, ubuntu, windows).

    type: keyword

    example: darwin
  metadata:
    docling_label: inline
    docling_ref: '#/groups/403'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## host [_host]'
  relationships:
    next: '110'
    parent: '104'
    previous: '108'
- node_id: '110'
  node_depth: 2
  node_type: Node
  content_length: 803
  content: "**`host.os.type`** :   Use the `os.type` field to categorize the operating\
    \ system into one of the broad commercial families. One of these following values\
    \ should be used (lowercase): linux, macos, unix, windows. If the OS you\u2019\
    re dealing with is not in the list, the field should not be populated. Please\
    \ let us know by opening an issue with ECS, to propose its addition.\n\ntype:\
    \ keyword\n\nexample: macos\n\n**`host.os.version`** :   Operating system version\
    \ as a raw string.\n\ntype: keyword\n\nexample: 10.14.1\n\n**`host.type`** : \
    \  Type of host. For Cloud providers this can be the machine type like `t2.medium`\
    \ . If vm, this could be the container, for example, or other information meaningful\
    \ in your environment.\n\ntype: keyword\n\n**`host.uptime`** :   Seconds the host\
    \ has been up.\n\ntype: long\n\nexample: 1325"
  metadata:
    docling_label: inline
    docling_ref: '#/groups/411'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## host [_host]'
  relationships:
    parent: '104'
    previous: '109'
- node_id: '111'
  node_depth: 1
  node_type: Node
  content_length: 2441
  content: |-
    ## http [_http]

    Fields related to HTTP activity. Use the `url` field set to store the url of the request.

    **`http.request.body.bytes`** :   Size in bytes of the request body.

    type: long

    example: 887

    format: bytes

    **`http.request.body.content`** :   The full HTTP request body.

    type: wildcard

    example: Hello world

    **`http.request.body.content.text`** :   type: match_only_text

    **`http.request.bytes`** :   Total size in bytes of the request (body and headers).

    type: long

    example: 1437

    format: bytes

    **`http.request.id`** :   A unique identifier for each HTTP request to correlate logs between clients and servers in transactions. The id may be contained in a non-standard HTTP header, such as `X-Request-ID` or `X-Correlation-ID` .

    type: keyword

    example: 123e4567-e89b-12d3-a456-426614174000

    **`http.request.method`** :   HTTP request method. The value should retain its casing from the original event. For example, `GET` , `get` , and `GeT` are all considered valid values for this ...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/1793'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## http [_http]'
  relationships:
    children:
    - '112'
    - '113'
    - '114'
    next: '115'
    parent: '2'
    previous: '104'
- node_id: '112'
  node_depth: 2
  node_type: Node
  content_length: 1036
  content: |-
    ## http [_http]

    Fields related to HTTP activity. Use the `url` field set to store the url of the request.

    **`http.request.body.bytes`** :   Size in bytes of the request body.

    type: long

    example: 887

    format: bytes

    **`http.request.body.content`** :   The full HTTP request body.

    type: wildcard

    example: Hello world

    **`http.request.body.content.text`** :   type: match_only_text

    **`http.request.bytes`** :   Total size in bytes of the request (body and headers).

    type: long

    example: 1437

    format: bytes

    **`http.request.id`** :   A unique identifier for each HTTP request to correlate logs between clients and servers in transactions. The id may be contained in a non-standard HTTP header, such as `X-Request-ID` or `X-Correlation-ID` .

    type: keyword

    example: 123e4567-e89b-12d3-a456-426614174000

    **`http.request.method`** :   HTTP request method. The value should retain its casing from the original event. For example, `GET` , `get` , and `GeT` are all considered valid values for this ...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/1793'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## http [_http]'
  relationships:
    next: '113'
    parent: '111'
- node_id: '113'
  node_depth: 2
  node_type: Node
  content_length: 881
  content: "**`http.request.mime_type`** :   Mime type of the body of the request.\
    \ This value must only be populated based on the content of the request body,\
    \ not on the `Content-Type` header. Comparing the mime type of a request with\
    \ the request\u2019s Content-Type header can be helpful in detecting threats or\
    \ misconfigured clients.\n\ntype: keyword\n\nexample: image/gif\n\n**`http.request.referrer`**\
    \ :   Referrer for this HTTP request.\n\ntype: keyword\n\nexample: https://blog.example.com/\n\
    \n**`http.response.body.bytes`** :   Size in bytes of the response body.\n\ntype:\
    \ long\n\nexample: 887\n\nformat: bytes\n\n**`http.response.body.content`** :\
    \   The full HTTP response body.\n\ntype: wildcard\n\nexample: Hello world\n\n\
    **`http.response.body.content.text`** :   type: match_only_text\n\n**`http.response.bytes`**\
    \ :   Total size in bytes of the response (body and headers).\n\ntype: long\n\n\
    example: 1437\n\nformat: bytes"
  metadata:
    docling_label: inline
    docling_ref: '#/groups/422'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## http [_http]'
  relationships:
    next: '114'
    parent: '111'
    previous: '112'
- node_id: '114'
  node_depth: 2
  node_type: Node
  content_length: 520
  content: "**`http.response.mime_type`** :   Mime type of the body of the response.\
    \ This value must only be populated based on the content of the response body,\
    \ not on the `Content-Type` header. Comparing the mime type of a response with\
    \ the response\u2019s Content-Type header can be helpful in detecting misconfigured\
    \ servers.\n\ntype: keyword\n\nexample: image/gif\n\n**`http.response.status_code`**\
    \ :   HTTP response status code.\n\ntype: long\n\nexample: 404\n\nformat: string\n\
    \n**`http.version`** :   HTTP version.\n\ntype: keyword\n\nexample: 1.1"
  metadata:
    docling_label: inline
    docling_ref: '#/groups/429'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## http [_http]'
  relationships:
    parent: '111'
    previous: '113'
- node_id: '115'
  node_depth: 1
  node_type: Node
  content_length: 803
  content: |-
    ## interface [_interface]

    The interface fields are used to record ingress and egress interface information when reported by an observer (e.g. firewall, router, load balancer) in the context of the observer handling a network connection.  In the case of a single observer interface (e.g. network sensor on a span port) only the observer.ingress information should be populated.

    **`interface.alias`** :   Interface alias as reported by the system, typically used in firewall implementations for e.g. inside, outside, or dmz logical interface naming.

    type: keyword

    example: outside

    **`interface.id`** :   Interface ID as reported by an observer (typically SNMP interface ID).

    type: keyword

    example: 10

    **`interface.name`** :   Interface name as reported by the system.

    type: keyword

    example: eth0
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/1873'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## interface [_interface]'
  relationships:
    children:
    - '116'
    next: '117'
    parent: '2'
    previous: '111'
- node_id: '116'
  node_depth: 2
  node_type: Node
  content_length: 803
  content: |-
    ## interface [_interface]

    The interface fields are used to record ingress and egress interface information when reported by an observer (e.g. firewall, router, load balancer) in the context of the observer handling a network connection.  In the case of a single observer interface (e.g. network sensor on a span port) only the observer.ingress information should be populated.

    **`interface.alias`** :   Interface alias as reported by the system, typically used in firewall implementations for e.g. inside, outside, or dmz logical interface naming.

    type: keyword

    example: outside

    **`interface.id`** :   Interface ID as reported by an observer (typically SNMP interface ID).

    type: keyword

    example: 10

    **`interface.name`** :   Interface name as reported by the system.

    type: keyword

    example: eth0
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/1873'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## interface [_interface]'
  relationships:
    parent: '115'
- node_id: '117'
  node_depth: 1
  node_type: Node
  content_length: 3382
  content: "## log [_log]\n\nDetails about the event\u2019s logging mechanism or logging\
    \ transport. The log.* fields are typically populated with details about the logging\
    \ mechanism used to create and/or transport the event. For example, syslog details\
    \ belong under `log.syslog.*` . The details specific to your event source are\
    \ typically not logged under `log.*` , but rather in `event.*` or in other ECS\
    \ fields.\n\n**`log.file.path`** :   Full path to the log file this event came\
    \ from, including the file name. It should include the drive letter, when appropriate.\
    \ If the event wasn\u2019t read from a log file, do not populate this field.\n\
    \ntype: keyword\n\nexample: /var/log/fun-times.log\n\n**`log.level`** :   Original\
    \ log level of the log event. If the source of the event provides a log level\
    \ or textual severity, this is the one that goes in `log.level` . If your source\
    \ doesn\u2019t specify one, you may put your event transport\u2019s severity here\
    \ (e.g. Syslog severity). Some examples are `warn` , `err` , `i` , `informational`..."
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/1887'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## log [_log]'
  relationships:
    children:
    - '118'
    - '119'
    - '120'
    - '121'
    next: '122'
    parent: '2'
    previous: '115'
- node_id: '118'
  node_depth: 2
  node_type: Node
  content_length: 1033
  content: "## log [_log]\n\nDetails about the event\u2019s logging mechanism or logging\
    \ transport. The log.* fields are typically populated with details about the logging\
    \ mechanism used to create and/or transport the event. For example, syslog details\
    \ belong under `log.syslog.*` . The details specific to your event source are\
    \ typically not logged under `log.*` , but rather in `event.*` or in other ECS\
    \ fields.\n\n**`log.file.path`** :   Full path to the log file this event came\
    \ from, including the file name. It should include the drive letter, when appropriate.\
    \ If the event wasn\u2019t read from a log file, do not populate this field.\n\
    \ntype: keyword\n\nexample: /var/log/fun-times.log\n\n**`log.level`** :   Original\
    \ log level of the log event. If the source of the event provides a log level\
    \ or textual severity, this is the one that goes in `log.level` . If your source\
    \ doesn\u2019t specify one, you may put your event transport\u2019s severity here\
    \ (e.g. Syslog severity). Some examples are `warn` , `err` , `i` , `informational`..."
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/1887'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## log [_log]'
  relationships:
    next: '119'
    parent: '117'
- node_id: '119'
  node_depth: 2
  node_type: Node
  content_length: 909
  content: |-
    **`log.logger`** :   The name of the logger inside an application. This is usually the name of the class which initialized the logger, or can be a custom name.

    type: keyword

    example: org.elasticsearch.bootstrap.Bootstrap

    **`log.origin.file.line`** :   The line number of the file containing the source code which originated the log event.

    type: long

    example: 42

    **`log.origin.file.name`** :   The name of the file containing the source code which originated the log event. Note that this field is not meant to capture the log file. The correct field to capture the log file is `log.file.path` .

    type: keyword

    example: Bootstrap.java

    **`log.origin.function`** :   The name of the function or method which originated the log event.

    type: keyword

    example: init

    **`log.syslog`** :   The Syslog metadata of the event, if the event was transmitted via Syslog. Please see RFCs 5424 or 3164.

    type: object
  metadata:
    docling_label: inline
    docling_ref: '#/groups/438'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## log [_log]'
  relationships:
    next: '120'
    parent: '117'
    previous: '118'
- node_id: '120'
  node_depth: 2
  node_type: Node
  content_length: 1035
  content: "**`log.syslog.facility.code`** :   The Syslog numeric facility of the\
    \ log event, if available. According to RFCs 5424 and 3164, this value should\
    \ be an integer between 0 and 23.\n\ntype: long\n\nexample: 23\n\nformat: string\n\
    \n**`log.syslog.facility.name`** :   The Syslog text-based facility of the log\
    \ event, if available.\n\ntype: keyword\n\nexample: local7\n\n**`log.syslog.priority`**\
    \ :   Syslog numeric priority of the event, if available. According to RFCs 5424\
    \ and 3164, the priority is 8 * facility + severity. This number is therefore\
    \ expected to contain a value between 0 and 191.\n\ntype: long\n\nexample: 135\n\
    \nformat: string\n\n**`log.syslog.severity.code`** :   The Syslog numeric severity\
    \ of the log event, if available. If the event source publishing via Syslog provides\
    \ a different numeric severity value (e.g. firewall, IDS), your source\u2019s\
    \ numeric severity should go to `event.severity` . If the event source does not\
    \ specify a distinct severity, you can optionally copy the Syslog severity to\
    \ `event...."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/443'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## log [_log]'
  relationships:
    next: '121'
    parent: '117'
    previous: '119'
- node_id: '121'
  node_depth: 2
  node_type: Node
  content_length: 399
  content: "**`log.syslog.severity.name`** :   The Syslog numeric severity of the\
    \ log event, if available. If the event source publishing via Syslog provides\
    \ a different severity value (e.g. firewall, IDS), your source\u2019s text severity\
    \ should go to `log.level` . If the event source does not specify a distinct severity,\
    \ you can optionally copy the Syslog severity to `log.level` .\n\ntype: keyword\n\
    \nexample: Error"
  metadata:
    docling_label: inline
    docling_ref: '#/groups/447'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## log [_log]'
  relationships:
    parent: '117'
    previous: '120'
- node_id: '122'
  node_depth: 1
  node_type: Node
  content_length: 4189
  content: "## network [_network]\n\nThe network is defined as the communication path\
    \ over which a host or network event happens. The network.* fields should be populated\
    \ with details about the network activity associated with an event.\n\n**`network.application`**\
    \ :   When a specific application or service is identified from network connection\
    \ details (source/dest IPs, ports, certificates, or wire format), this field captures\
    \ the application\u2019s or service\u2019s name. For example, the original event\
    \ identifies the network connection being from a specific web service in a `https`\
    \ network connection, like `facebook` or `twitter` . The field value must be normalized\
    \ to lowercase for querying.\n\ntype: keyword\n\nexample: aim\n\n**`network.bytes`**\
    \ :   Total bytes transferred in both directions. If `source.bytes` and `destination.bytes`\
    \ are known, `network.bytes` is their sum.\n\ntype: long\n\nexample: 368\n\nformat:\
    \ bytes\n\n**`network.community_id`** :   A hash of source and destination IPs\
    \ and ports, as well as the proto..."
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/1964'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## network [_network]'
  relationships:
    children:
    - '123'
    - '124'
    - '125'
    - '126'
    - '127'
    next: '128'
    parent: '2'
    previous: '117'
- node_id: '123'
  node_depth: 2
  node_type: Node
  content_length: 899
  content: "## network [_network]\n\nThe network is defined as the communication path\
    \ over which a host or network event happens. The network.* fields should be populated\
    \ with details about the network activity associated with an event.\n\n**`network.application`**\
    \ :   When a specific application or service is identified from network connection\
    \ details (source/dest IPs, ports, certificates, or wire format), this field captures\
    \ the application\u2019s or service\u2019s name. For example, the original event\
    \ identifies the network connection being from a specific web service in a `https`\
    \ network connection, like `facebook` or `twitter` . The field value must be normalized\
    \ to lowercase for querying.\n\ntype: keyword\n\nexample: aim\n\n**`network.bytes`**\
    \ :   Total bytes transferred in both directions. If `source.bytes` and `destination.bytes`\
    \ are known, `network.bytes` is their sum.\n\ntype: long\n\nexample: 368\n\nformat:\
    \ bytes"
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/1964'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## network [_network]'
  relationships:
    next: '124'
    parent: '122'
- node_id: '124'
  node_depth: 2
  node_type: Node
  content_length: 242
  content: '**`network.community_id`** :   A hash of source and destination IPs and
    ports, as well as the protocol used in a communication. This is a tool-agnostic
    standard to identify flows. Learn more at https://github.com/corelight/community-id-spec
    .'
  metadata:
    docling_label: inline
    docling_ref: '#/groups/450'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## network [_network]'
  relationships:
    next: '125'
    parent: '122'
    previous: '123'
- node_id: '125'
  node_depth: 2
  node_type: Node
  content_length: 1039
  content: "type: keyword\n\nexample: 1:hO+sN4H+MG5MY/8hIrXPqc4ZQz0=\n\n**`network.direction`**\
    \ :   Direction of the network traffic. Recommended values are: * ingress * egress\
    \ * inbound * outbound * internal * external * unknown\n\nWhen mapping events\
    \ from a host-based monitoring context, populate this field from the host\u2019\
    s point of view, using the values \"ingress\" or \"egress\". When mapping events\
    \ from a network or perimeter-based monitoring context, populate this field from\
    \ the point of view of the network perimeter, using the values \"inbound\", \"\
    outbound\", \"internal\" or \"external\". Note that \"internal\" is not crossing\
    \ perimeter boundaries, and is meant to describe communication between two hosts\
    \ within the perimeter. Note also that \"external\" is meant to describe traffic\
    \ between two hosts that are external to the perimeter. This could for example\
    \ be useful for ISPs or VPN service providers.\n\ntype: keyword\n\nexample: inbound\n\
    \n**`network.forwarded_ip`** :   Host IP address when the source IP address is\
    \ t..."
  metadata:
    docling_label: text
    docling_ref: '#/texts/1991'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## network [_network]'
  relationships:
    next: '126'
    parent: '122'
    previous: '124'
- node_id: '126'
  node_depth: 2
  node_type: Node
  content_length: 961
  content: |-
    **`network.iana_number`** :   IANA Protocol Number ( https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml ). Standardized list of protocols. This aligns well with NetFlow and sFlow related logs which use the IANA Protocol Number.

    type: keyword

    example: 6

    **`network.inner`** :   Network.inner fields are added in addition to network.vlan fields to describe the innermost VLAN when q-in-q VLAN tagging is present. Allowed fields include vlan.id and vlan.name. Inner vlan fields are typically used when sending traffic with multiple 802.1q encapsulations to a network sensor (e.g. Zeek, Wireshark.)

    type: object

    **`network.inner.vlan.id`** :   VLAN ID as reported by the observer.

    type: keyword

    example: 10

    **`network.inner.vlan.name`** :   Optional VLAN name as reported by the observer.

    type: keyword

    example: outside

    **`network.name`** :   Name given by operators to sections of their network.

    type: keyword

    example: Guest Wifi
  metadata:
    docling_label: inline
    docling_ref: '#/groups/453'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## network [_network]'
  relationships:
    next: '127'
    parent: '122'
    previous: '125'
- node_id: '127'
  node_depth: 2
  node_type: Node
  content_length: 1040
  content: |-
    **`network.packets`** :   Total packets transferred in both directions. If `source.packets` and `destination.packets` are known, `network.packets` is their sum.

    type: long

    example: 24

    **`network.protocol`** :   In the OSI Model this would be the Application Layer protocol. For example, `http` , `dns` , or `ssh` . The field value must be normalized to lowercase for querying.

    type: keyword

    example: http

    **`network.transport`** :   Same as network.iana_number, but instead using the Keyword name of the transport layer (udp, tcp, ipv6-icmp, etc.) The field value must be normalized to lowercase for querying.

    type: keyword

    example: tcp

    **`network.type`** :   In the OSI Model this would be the Network Layer. ipv4, ipv6, ipsec, pim, etc The field value must be normalized to lowercase for querying.

    type: keyword

    example: ipv4

    **`network.vlan.id`** :   VLAN ID as reported by the observer.

    type: keyword

    example: 10

    **`network.vlan.name`** :   Optional VLAN name as reported by the ob...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/458'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## network [_network]'
  relationships:
    parent: '122'
    previous: '126'
- node_id: '128'
  node_depth: 1
  node_type: Node
  content_length: 7234
  content: |-
    ## observer [_observer]

    An observer is defined as a special network, security, or application device used to detect, observe, or create network, security, or application-related events and metrics. This could be a custom hardware appliance or a server that has been configured to run special network, security, or application software. Examples include firewalls, web proxies, intrusion detection/prevention systems, network monitoring sensors, web application firewalls, data loss prevention systems, and APM servers. The observer.* fields shall be populated with details of the system, if any, that detects, observes and/or creates a network, security, or application event or metric. Message queues and ETL components used in processing events or metrics are not considered observers in ECS.

    **`observer.egress`** :   Observer.egress holds information like interface number and name, vlan, and zone information to classify egress traffic.  Single armed monitoring such as a network sensor on a s...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/2059'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## observer [_observer]'
  relationships:
    children:
    - '129'
    - '130'
    - '131'
    - '132'
    - '133'
    - '134'
    - '135'
    - '136'
    next: '137'
    parent: '2'
    previous: '122'
- node_id: '129'
  node_depth: 2
  node_type: Node
  content_length: 795
  content: |-
    ## observer [_observer]

    An observer is defined as a special network, security, or application device used to detect, observe, or create network, security, or application-related events and metrics. This could be a custom hardware appliance or a server that has been configured to run special network, security, or application software. Examples include firewalls, web proxies, intrusion detection/prevention systems, network monitoring sensors, web application firewalls, data loss prevention systems, and APM servers. The observer.* fields shall be populated with details of the system, if any, that detects, observes and/or creates a network, security, or application event or metric. Message queues and ETL components used in processing events or metrics are not considered observers in ECS.
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/2059'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## observer [_observer]'
  relationships:
    next: '130'
    parent: '128'
- node_id: '130'
  node_depth: 2
  node_type: Node
  content_length: 973
  content: |-
    **`observer.egress`** :   Observer.egress holds information like interface number and name, vlan, and zone information to classify egress traffic.  Single armed monitoring such as a network sensor on a span port should only use observer.ingress to categorize traffic.

    type: object

    **`observer.egress.interface.alias`** :   Interface alias as reported by the system, typically used in firewall implementations for e.g. inside, outside, or dmz logical interface naming.

    type: keyword

    example: outside

    **`observer.egress.interface.id`** :   Interface ID as reported by an observer (typically SNMP interface ID).

    type: keyword

    example: 10

    **`observer.egress.interface.name`** :   Interface name as reported by the system.

    type: keyword

    example: eth0

    **`observer.egress.vlan.id`** :   VLAN ID as reported by the observer.

    type: keyword

    example: 10

    **`observer.egress.vlan.name`** :   Optional VLAN name as reported by the observer.

    type: keyword

    example: outside
  metadata:
    docling_label: inline
    docling_ref: '#/groups/464'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## observer [_observer]'
  relationships:
    next: '131'
    parent: '128'
    previous: '129'
- node_id: '131'
  node_depth: 2
  node_type: Node
  content_length: 1093
  content: "**`observer.egress.zone`** :   Network zone of outbound traffic as reported\
    \ by the observer to categorize the destination area of egress traffic, e.g. Internal,\
    \ External, DMZ, HR, Legal, etc.\n\ntype: keyword\n\nexample: Public_Internet\n\
    \n**`observer.geo.city_name`** :   City name.\n\ntype: keyword\n\nexample: Montreal\n\
    \n**`observer.geo.continent_code`** :   Two-letter code representing continent\u2019\
    s name.\n\ntype: keyword\n\nexample: NA\n\n**`observer.geo.continent_name`** :\
    \   Name of the continent.\n\ntype: keyword\n\nexample: North America\n\n**`observer.geo.country_iso_code`**\
    \ :   Country ISO code.\n\ntype: keyword\n\nexample: CA\n\n**`observer.geo.country_name`**\
    \ :   Country name.\n\ntype: keyword\n\nexample: Canada\n\n**`observer.geo.location`**\
    \ :   Longitude and latitude.\n\ntype: geo_point\n\nexample: { \"lon\": -73.614830,\
    \ \"lat\": 45.505918 }\n\n**`observer.geo.name`** :   User-defined description\
    \ of a location, at the level of granularity they care about. Could be the name\
    \ of their data centers, the floor number, if thi..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/470'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## observer [_observer]'
  relationships:
    next: '132'
    parent: '128'
    previous: '130'
- node_id: '132'
  node_depth: 2
  node_type: Node
  content_length: 940
  content: |-
    type: keyword

    example: boston-dc

    **`observer.geo.postal_code`** :   Postal code associated with the location. Values appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.

    type: keyword

    example: 94040

    **`observer.geo.region_iso_code`** :   Region ISO code.

    type: keyword

    example: CA-QC

    **`observer.geo.region_name`** :   Region name.

    type: keyword

    example: Quebec

    **`observer.geo.timezone`** :   The time zone of the location, such as IANA time zone name.

    type: keyword

    example: America/Argentina/Buenos_Aires

    **`observer.hostname`** :   Hostname of the observer.

    type: keyword

    **`observer.ingress`** :   Observer.ingress holds information like interface number and name, vlan, and zone information to classify ingress traffic.  Single armed monitoring such as a network sensor on a span port should only use observer.ingress to categorize traffic.

    type: object
  metadata:
    docling_label: text
    docling_ref: '#/texts/2114'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## observer [_observer]'
  relationships:
    next: '133'
    parent: '128'
    previous: '131'
- node_id: '133'
  node_depth: 2
  node_type: Node
  content_length: 977
  content: |-
    **`observer.ingress.interface.alias`** :   Interface alias as reported by the system, typically used in firewall implementations for e.g. inside, outside, or dmz logical interface naming.

    type: keyword

    example: outside

    **`observer.ingress.interface.id`** :   Interface ID as reported by an observer (typically SNMP interface ID).

    type: keyword

    example: 10

    **`observer.ingress.interface.name`** :   Interface name as reported by the system.

    type: keyword

    example: eth0

    **`observer.ingress.vlan.id`** :   VLAN ID as reported by the observer.

    type: keyword

    example: 10

    **`observer.ingress.vlan.name`** :   Optional VLAN name as reported by the observer.

    type: keyword

    example: outside

    **`observer.ingress.zone`** :   Network zone of incoming traffic as reported by the observer to categorize the source area of ingress traffic. e.g. internal, External, DMZ, HR, Legal, etc.

    type: keyword

    example: DMZ

    **`observer.ip`** :   IP addresses of the observer.

    type: ip
  metadata:
    docling_label: inline
    docling_ref: '#/groups/484'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## observer [_observer]'
  relationships:
    next: '134'
    parent: '128'
    previous: '132'
- node_id: '134'
  node_depth: 2
  node_type: Node
  content_length: 1070
  content: |-
    **`observer.mac`** :   MAC addresses of the observer. The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.

    type: keyword

    example: ["00-00-5E-00-53-23", "00-00-5E-00-53-24"]

    **`observer.name`** :   Custom name of the observer. This is a name that can be given to an observer. This can be helpful for example if multiple firewalls of the same model are used in an organization. If no custom name is needed, the field can be left empty.

    type: keyword

    example: 1_proxySG

    **`observer.os.family`** :   OS family (such as redhat, debian, freebsd, windows).

    type: keyword

    example: debian

    **`observer.os.full`** :   Operating system name, including the version or code name.

    type: keyword

    example: Mac OS Mojave

    **`observer.os.full.text`** :   type: match_only_text

    **`observer.os.kernel`** :   Operating system kern...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/491'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## observer [_observer]'
  relationships:
    next: '135'
    parent: '128'
    previous: '133'
- node_id: '135'
  node_depth: 2
  node_type: Node
  content_length: 959
  content: "**`observer.os.name`** :   Operating system name, without the version.\n\
    \ntype: keyword\n\nexample: Mac OS X\n\n**`observer.os.name.text`** :   type:\
    \ match_only_text\n\n**`observer.os.platform`** :   Operating system platform\
    \ (such centos, ubuntu, windows).\n\ntype: keyword\n\nexample: darwin\n\n**`observer.os.type`**\
    \ :   Use the `os.type` field to categorize the operating system into one of the\
    \ broad commercial families. One of these following values should be used (lowercase):\
    \ linux, macos, unix, windows. If the OS you\u2019re dealing with is not in the\
    \ list, the field should not be populated. Please let us know by opening an issue\
    \ with ECS, to propose its addition.\n\ntype: keyword\n\nexample: macos\n\n**`observer.os.version`**\
    \ :   Operating system version as a raw string.\n\ntype: keyword\n\nexample: 10.14.1\n\
    \n**`observer.product`** :   The product name of the observer.\n\ntype: keyword\n\
    \nexample: s200\n\n**`observer.serial_number`** :   Observer serial number.\n\n\
    type: keyword"
  metadata:
    docling_label: inline
    docling_ref: '#/groups/497'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## observer [_observer]'
  relationships:
    next: '136'
    parent: '128'
    previous: '134'
- node_id: '136'
  node_depth: 2
  node_type: Node
  content_length: 413
  content: |-
    **`observer.type`** :   The type of the observer the data is coming from. There is no predefined list of observer types. Some examples are `forwarder` , `firewall` , `ids` , `ips` , `proxy` , `poller` , `sensor` , `APM server` .

    type: keyword

    example: firewall

    **`observer.vendor`** :   Vendor name of the observer.

    type: keyword

    example: Symantec

    **`observer.version`** :   Observer version.

    type: keyword
  metadata:
    docling_label: inline
    docling_ref: '#/groups/504'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## observer [_observer]'
  relationships:
    parent: '128'
    previous: '135'
- node_id: '137'
  node_depth: 1
  node_type: Node
  content_length: 1102
  content: |-
    ## orchestrator [_orchestrator]

    Fields that describe the resources which container orchestrators manage or act upon.

    **`orchestrator.api_version`** :   API version being used to carry out the action

    type: keyword

    example: v1beta1

    **`orchestrator.cluster.name`** :   Name of the cluster.

    type: keyword

    **`orchestrator.cluster.url`** :   URL of the API used to manage the cluster.

    type: keyword

    **`orchestrator.cluster.version`** :   The version of the cluster.

    type: keyword

    **`orchestrator.namespace`** :   Namespace in which the action is taking place.

    type: keyword

    example: kube-system

    **`orchestrator.organization`** :   Organization affected by the event (for multi-tenant orchestrator setups).

    type: keyword

    example: elastic

    **`orchestrator.resource.name`** :   Name of the resource being acted upon.

    type: keyword

    example: test-pod-cdcws

    **`orchestrator.resource.type`** :   Type of resource being acted upon.

    type: keyword

    example: service

    **`orchestrator.type`** :   O...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/2241'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## orchestrator [_orchestrator]'
  relationships:
    children:
    - '138'
    next: '139'
    parent: '2'
    previous: '128'
- node_id: '138'
  node_depth: 2
  node_type: Node
  content_length: 1102
  content: |-
    ## orchestrator [_orchestrator]

    Fields that describe the resources which container orchestrators manage or act upon.

    **`orchestrator.api_version`** :   API version being used to carry out the action

    type: keyword

    example: v1beta1

    **`orchestrator.cluster.name`** :   Name of the cluster.

    type: keyword

    **`orchestrator.cluster.url`** :   URL of the API used to manage the cluster.

    type: keyword

    **`orchestrator.cluster.version`** :   The version of the cluster.

    type: keyword

    **`orchestrator.namespace`** :   Namespace in which the action is taking place.

    type: keyword

    example: kube-system

    **`orchestrator.organization`** :   Organization affected by the event (for multi-tenant orchestrator setups).

    type: keyword

    example: elastic

    **`orchestrator.resource.name`** :   Name of the resource being acted upon.

    type: keyword

    example: test-pod-cdcws

    **`orchestrator.resource.type`** :   Type of resource being acted upon.

    type: keyword

    example: service

    **`orchestrator.type`** :   O...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/2241'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## orchestrator [_orchestrator]'
  relationships:
    parent: '137'
- node_id: '139'
  node_depth: 1
  node_type: Node
  content_length: 441
  content: |-
    ## organization [_organization]

    The organization fields enrich data with information about the company or entity the data is associated with. These fields help you arrange or filter data stored in an index by one or multiple organizations.

    **`organization.id`** :   Unique identifier for the organization.

    type: keyword

    **`organization.name`** :   Organization name.

    type: keyword

    **`organization.name.text`** :   type: match_only_text
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/2276'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## organization [_organization]'
  relationships:
    children:
    - '140'
    next: '141'
    parent: '2'
    previous: '137'
- node_id: '140'
  node_depth: 2
  node_type: Node
  content_length: 441
  content: |-
    ## organization [_organization]

    The organization fields enrich data with information about the company or entity the data is associated with. These fields help you arrange or filter data stored in an index by one or multiple organizations.

    **`organization.id`** :   Unique identifier for the organization.

    type: keyword

    **`organization.name`** :   Organization name.

    type: keyword

    **`organization.name.text`** :   type: match_only_text
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/2276'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## organization [_organization]'
  relationships:
    parent: '139'
- node_id: '141'
  node_depth: 1
  node_type: Node
  content_length: 1208
  content: "## os [_os]\n\nThe OS fields contain information about the operating system.\n\
    \n**`os.family`** :   OS family (such as redhat, debian, freebsd, windows).\n\n\
    type: keyword\n\nexample: debian\n\n**`os.full`** :   Operating system name, including\
    \ the version or code name.\n\ntype: keyword\n\nexample: Mac OS Mojave\n\n**`os.full.text`**\
    \ :   type: match_only_text\n\n**`os.kernel`** :   Operating system kernel version\
    \ as a raw string.\n\ntype: keyword\n\nexample: 4.4.0-112-generic\n\n**`os.name`**\
    \ :   Operating system name, without the version.\n\ntype: keyword\n\nexample:\
    \ Mac OS X\n\n**`os.name.text`** :   type: match_only_text\n\n**`os.platform`**\
    \ :   Operating system platform (such centos, ubuntu, windows).\n\ntype: keyword\n\
    \nexample: darwin\n\n**`os.type`** :   Use the `os.type` field to categorize the\
    \ operating system into one of the broad commercial families. One of these following\
    \ values should be used (lowercase): linux, macos, unix, windows. If the OS you\u2019\
    re dealing with is not in the list, the field should not be popu..."
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/2286'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## os [_os]'
  relationships:
    children:
    - '142'
    - '143'
    next: '144'
    parent: '2'
    previous: '139'
- node_id: '142'
  node_depth: 2
  node_type: Node
  content_length: 1080
  content: "## os [_os]\n\nThe OS fields contain information about the operating system.\n\
    \n**`os.family`** :   OS family (such as redhat, debian, freebsd, windows).\n\n\
    type: keyword\n\nexample: debian\n\n**`os.full`** :   Operating system name, including\
    \ the version or code name.\n\ntype: keyword\n\nexample: Mac OS Mojave\n\n**`os.full.text`**\
    \ :   type: match_only_text\n\n**`os.kernel`** :   Operating system kernel version\
    \ as a raw string.\n\ntype: keyword\n\nexample: 4.4.0-112-generic\n\n**`os.name`**\
    \ :   Operating system name, without the version.\n\ntype: keyword\n\nexample:\
    \ Mac OS X\n\n**`os.name.text`** :   type: match_only_text\n\n**`os.platform`**\
    \ :   Operating system platform (such centos, ubuntu, windows).\n\ntype: keyword\n\
    \nexample: darwin\n\n**`os.type`** :   Use the `os.type` field to categorize the\
    \ operating system into one of the broad commercial families. One of these following\
    \ values should be used (lowercase): linux, macos, unix, windows. If the OS you\u2019\
    re dealing with is not in the list, the field should not be popu..."
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/2286'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## os [_os]'
  relationships:
    next: '143'
    parent: '141'
- node_id: '143'
  node_depth: 2
  node_type: Node
  content_length: 126
  content: |-
    type: keyword

    example: macos

    **`os.version`** :   Operating system version as a raw string.

    type: keyword

    example: 10.14.1
  metadata:
    docling_label: text
    docling_ref: '#/texts/2316'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## os [_os]'
  relationships:
    parent: '141'
    previous: '142'
- node_id: '144'
  node_depth: 1
  node_type: Node
  content_length: 1985
  content: |-
    ## package [_package]

    These fields contain information about an installed software package. It contains general information about a package, such as name, version or size. It also contains installation details, such as time or location.

    **`package.architecture`** :   Package architecture.

    type: keyword

    example: x86_64

    **`package.build_version`** :   Additional information about the build version of the installed package. For example use the commit SHA of a non-released package.

    type: keyword

    example: 36f4f7e89dd61b0988b12ee000b98966867710cd

    **`package.checksum`** :   Checksum of the installed package for verification.

    type: keyword

    example: 68b329da9893e34099c7d8ad5cb9c940

    **`package.description`** :   Description of the package.

    type: keyword

    example: Open source programming language to build simple/reliable/efficient software.

    **`package.install_scope`** :   Indicating how the package was installed, e.g. user-local, global.

    type: keyword

    example: global

    **`package.in...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/2322'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## package [_package]'
  relationships:
    children:
    - '145'
    - '146'
    next: '147'
    parent: '2'
    previous: '141'
- node_id: '145'
  node_depth: 2
  node_type: Node
  content_length: 1059
  content: |-
    ## package [_package]

    These fields contain information about an installed software package. It contains general information about a package, such as name, version or size. It also contains installation details, such as time or location.

    **`package.architecture`** :   Package architecture.

    type: keyword

    example: x86_64

    **`package.build_version`** :   Additional information about the build version of the installed package. For example use the commit SHA of a non-released package.

    type: keyword

    example: 36f4f7e89dd61b0988b12ee000b98966867710cd

    **`package.checksum`** :   Checksum of the installed package for verification.

    type: keyword

    example: 68b329da9893e34099c7d8ad5cb9c940

    **`package.description`** :   Description of the package.

    type: keyword

    example: Open source programming language to build simple/reliable/efficient software.

    **`package.install_scope`** :   Indicating how the package was installed, e.g. user-local, global.

    type: keyword

    example: global

    **`package.in...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/2322'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## package [_package]'
  relationships:
    next: '146'
    parent: '144'
- node_id: '146'
  node_depth: 2
  node_type: Node
  content_length: 924
  content: |-
    **`package.license`** :   License under which the package was released. Use a short name, e.g. the license identifier from SPDX License List where possible ( https://spdx.org/licenses/ ).

    type: keyword

    example: Apache License 2.0

    **`package.name`** :   Package name

    type: keyword

    example: go

    **`package.path`** :   Path where the package is installed.

    type: keyword

    example: /usr/local/Cellar/go/1.12.9/

    **`package.reference`** :   Home page or reference URL of the software in this package, if available.

    type: keyword

    example: https://golang.org

    **`package.size`** :   Package size in bytes.

    type: long

    example: 62231

    format: string

    **`package.type`** :   Type of package. This should contain the package file type, rather than the package manager name. Examples: rpm, dpkg, brew, npm, gem, nupkg, jar.

    type: keyword

    example: rpm

    **`package.version`** :   Package version

    type: keyword

    example: 1.12.9
  metadata:
    docling_label: inline
    docling_ref: '#/groups/534'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## package [_package]'
  relationships:
    parent: '144'
    previous: '145'
- node_id: '147'
  node_depth: 1
  node_type: Node
  content_length: 1221
  content: "## pe [_pe]\n\nThese fields contain Windows Portable Executable (PE) metadata.\n\
    \n**`pe.architecture`** :   CPU architecture target for the file.\n\ntype: keyword\n\
    \nexample: x64\n\n**`pe.company`** :   Internal company name of the file, provided\
    \ at compile-time.\n\ntype: keyword\n\nexample: Microsoft Corporation\n\n**`pe.description`**\
    \ :   Internal description of the file, provided at compile-time.\n\ntype: keyword\n\
    \nexample: Paint\n\n**`pe.file_version`** :   Internal version of the file, provided\
    \ at compile-time.\n\ntype: keyword\n\nexample: 6.3.9600.17415\n\n**`pe.imphash`**\
    \ :   A hash of the imports in a PE file. An imphash\u2009\u2014\u2009or import\
    \ hash\u2009\u2014\u2009can be used to fingerprint binaries even after recompilation\
    \ or other code-level transformations have occurred, which would change more traditional\
    \ hash values. Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html\
    \ .\n\ntype: keyword\n\nexample: 0c6803c4e922103c4dca5963aad36ddf\n\n**`pe.original_file_name`**\
    \ :   Internal name..."
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/2379'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## pe [_pe]'
  relationships:
    children:
    - '148'
    - '149'
    next: '150'
    parent: '2'
    previous: '144'
- node_id: '148'
  node_depth: 2
  node_type: Node
  content_length: 1076
  content: "## pe [_pe]\n\nThese fields contain Windows Portable Executable (PE) metadata.\n\
    \n**`pe.architecture`** :   CPU architecture target for the file.\n\ntype: keyword\n\
    \nexample: x64\n\n**`pe.company`** :   Internal company name of the file, provided\
    \ at compile-time.\n\ntype: keyword\n\nexample: Microsoft Corporation\n\n**`pe.description`**\
    \ :   Internal description of the file, provided at compile-time.\n\ntype: keyword\n\
    \nexample: Paint\n\n**`pe.file_version`** :   Internal version of the file, provided\
    \ at compile-time.\n\ntype: keyword\n\nexample: 6.3.9600.17415\n\n**`pe.imphash`**\
    \ :   A hash of the imports in a PE file. An imphash\u2009\u2014\u2009or import\
    \ hash\u2009\u2014\u2009can be used to fingerprint binaries even after recompilation\
    \ or other code-level transformations have occurred, which would change more traditional\
    \ hash values. Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html\
    \ .\n\ntype: keyword\n\nexample: 0c6803c4e922103c4dca5963aad36ddf\n\n**`pe.original_file_name`**\
    \ :   Internal name..."
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/2379'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## pe [_pe]'
  relationships:
    next: '149'
    parent: '147'
- node_id: '149'
  node_depth: 2
  node_type: Node
  content_length: 143
  content: "**`pe.product`** :   Internal product name of the file, provided at compile-time.\n\
    \ntype: keyword\n\nexample: Microsoft\xAE Windows\xAE Operating System"
  metadata:
    docling_label: inline
    docling_ref: '#/groups/548'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## pe [_pe]'
  relationships:
    parent: '147'
    previous: '148'
- node_id: '150'
  node_depth: 1
  node_type: Node
  content_length: 19483
  content: |-
    ## process [_process_2]

    These fields contain information about a process. These fields can help you correlate metrics information with a process id/name from a log message.  The `process.pid` often stays in the metric itself and is copied to the global field for correlation.

    **`process.args`** :   Array of process arguments, starting with the absolute path to the executable. May be filtered to protect sensitive information.

    type: keyword

    example: ["/usr/bin/ssh", "-l", "user", "10.0.0.16"]

    **`process.args_count`** :   Length of the process.args array. This field can be useful for querying or performing bucket analysis on how many arguments were provided to start a process. More arguments may be an indication of suspicious activity.

    type: long

    example: 4

    **`process.code_signature.digest_algorithm`** :   The hashing algorithm used to sign the process. This value can distinguish signatures when a file is signed multiple times by the same signer but with a different digest algorith...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/2411'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## process [_process_2]'
  relationships:
    children:
    - '151'
    - '152'
    - '153'
    - '154'
    - '155'
    - '156'
    - '157'
    - '158'
    - '159'
    - '160'
    - '161'
    - '162'
    - '163'
    - '164'
    - '165'
    - '166'
    - '167'
    - '168'
    - '169'
    next: '170'
    parent: '2'
    previous: '147'
- node_id: '151'
  node_depth: 2
  node_type: Node
  content_length: 1034
  content: |-
    ## process [_process_2]

    These fields contain information about a process. These fields can help you correlate metrics information with a process id/name from a log message.  The `process.pid` often stays in the metric itself and is copied to the global field for correlation.

    **`process.args`** :   Array of process arguments, starting with the absolute path to the executable. May be filtered to protect sensitive information.

    type: keyword

    example: ["/usr/bin/ssh", "-l", "user", "10.0.0.16"]

    **`process.args_count`** :   Length of the process.args array. This field can be useful for querying or performing bucket analysis on how many arguments were provided to start a process. More arguments may be an indication of suspicious activity.

    type: long

    example: 4

    **`process.code_signature.digest_algorithm`** :   The hashing algorithm used to sign the process. This value can distinguish signatures when a file is signed multiple times by the same signer but with a different digest algorith...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/2411'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## process [_process_2]'
  relationships:
    next: '152'
    parent: '150'
- node_id: '152'
  node_depth: 2
  node_type: Node
  content_length: 1033
  content: |-
    **`process.code_signature.exists`** :   Boolean to capture if a signature is present.

    type: boolean

    example: true

    **`process.code_signature.signing_id`** :   The identifier used to sign the process. This is used to identify the application manufactured by a software vendor. The field is relevant to Apple *OS only.

    type: keyword

    example: com.apple.xpc.proxy

    **`process.code_signature.status`** :   Additional information about the certificate status. This is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.

    type: keyword

    example: ERROR_UNTRUSTED_ROOT

    **`process.code_signature.subject_name`** :   Subject name of the code signer

    type: keyword

    example: Microsoft Corporation

    **`process.code_signature.team_id`** :   The team identifier used to sign the process. This is used to identify the team or vendor of a software product. The field is relevant to Apple *OS only.

    t...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/553'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## process [_process_2]'
  relationships:
    next: '153'
    parent: '150'
    previous: '151'
- node_id: '153'
  node_depth: 2
  node_type: Node
  content_length: 1051
  content: |-
    **`process.code_signature.timestamp`** :   Date and time when the code signature was generated and signed.

    type: date

    example: 2021-01-01T12:10:30Z

    **`process.code_signature.trusted`** :   Stores the trust status of the certificate chain. Validating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.

    type: boolean

    example: true

    **`process.code_signature.valid`** :   Boolean to capture if the digital signature is verified against the binary content. Leave unpopulated if a certificate was unchecked.

    type: boolean

    example: true

    **`process.command_line`** :   Full command line that started the process, including the absolute path to the executable, and all arguments. Some arguments may be filtered to protect sensitive information.

    type: wildcard

    example: /usr/bin/ssh -l user 10.0.0.16

    **`process.command_line.text`** :   type: match_only_text

    **`process.elf.architecture`** :   Machine architectu...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/558'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## process [_process_2]'
  relationships:
    next: '154'
    parent: '150'
    previous: '152'
- node_id: '154'
  node_depth: 2
  node_type: Node
  content_length: 1109
  content: "**`process.elf.byte_order`** :   Byte sequence of ELF file.\n\ntype: keyword\n\
    \nexample: Little Endian\n\n**`process.elf.cpu_type`** :   CPU type of the ELF\
    \ file.\n\ntype: keyword\n\nexample: Intel\n\n**`process.elf.creation_date`**\
    \ :   Extracted when possible from the file\u2019s metadata. Indicates when it\
    \ was built or compiled. It can also be faked by malware creators.\n\ntype: date\n\
    \n**`process.elf.exports`** :   List of exported element names and types.\n\n\
    type: flattened\n\n**`process.elf.header.abi_version`** :   Version of the ELF\
    \ Application Binary Interface (ABI).\n\ntype: keyword\n\n**`process.elf.header.class`**\
    \ :   Header class of the ELF file.\n\ntype: keyword\n\n**`process.elf.header.data`**\
    \ :   Data table of the ELF header.\n\ntype: keyword\n\n**`process.elf.header.entrypoint`**\
    \ :   Header entrypoint of the ELF file.\n\ntype: long\n\nformat: string\n\n**`process.elf.header.object_version`**\
    \ :   \"0x1\" for original ELF files.\n\ntype: keyword\n\n**`process.elf.header.os_abi`**\
    \ :   Application Binary Interface (ABI) o..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/564'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## process [_process_2]'
  relationships:
    next: '155'
    parent: '150'
    previous: '153'
- node_id: '155'
  node_depth: 2
  node_type: Node
  content_length: 1034
  content: |-
    **`process.elf.header.version`** :   Version of the ELF header.

    type: keyword

    **`process.elf.imports`** :   List of imported element names and types.

    type: flattened

    **`process.elf.sections`** :   An array containing an object for each section of the ELF file. The keys that should be present in these objects are defined by sub-fields underneath `elf.sections.*` .

    type: nested

    **`process.elf.sections.chi2`** :   Chi-square probability distribution of the section.

    type: long

    format: number

    **`process.elf.sections.entropy`** :   Shannon entropy calculation from the section.

    type: long

    format: number

    **`process.elf.sections.flags`** :   ELF Section List flags.

    type: keyword

    **`process.elf.sections.name`** :   ELF Section List name.

    type: keyword

    **`process.elf.sections.physical_offset`** :   ELF Section List offset.

    type: keyword

    **`process.elf.sections.physical_size`** :   ELF Section List physical size.

    type: long

    format: bytes

    **`process.elf.sections.type`** :   ELF...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/575'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## process [_process_2]'
  relationships:
    next: '156'
    parent: '150'
    previous: '154'
- node_id: '156'
  node_depth: 2
  node_type: Node
  content_length: 874
  content: |-
    **`process.elf.sections.virtual_address`** :   ELF Section List virtual address.

    type: long

    format: string

    **`process.elf.sections.virtual_size`** :   ELF Section List virtual size.

    type: long

    format: string

    **`process.elf.segments`** :   An array containing an object for each segment of the ELF file. The keys that should be present in these objects are defined by sub-fields underneath `elf.segments.*` .

    type: nested

    **`process.elf.segments.sections`** :   ELF object segment sections.

    type: keyword

    **`process.elf.segments.type`** :   ELF object segment type.

    type: keyword

    **`process.elf.shared_libraries`** :   List of shared libraries used by this ELF object.

    type: keyword

    **`process.elf.telfhash`** :   telfhash symbol hash for ELF file.

    type: keyword

    **`process.end`** :   The time the process ended.

    type: date

    example: 2016-05-23T08:05:34.853Z
  metadata:
    docling_label: inline
    docling_ref: '#/groups/585'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## process [_process_2]'
  relationships:
    next: '157'
    parent: '150'
    previous: '155'
- node_id: '157'
  node_depth: 2
  node_type: Node
  content_length: 1077
  content: |-
    **`process.entity_id`** :   Unique identifier for the process. The implementation of this is specified by the data source, but some examples of what could be used here are a process-generated UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying components of a process. Constructing a globally unique identifier is a common practice to mitigate PID reuse as well as to identify a specific process over time, across multiple monitored hosts.

    type: keyword

    example: c2c455d9f99375d

    **`process.executable`** :   Absolute path to the process executable.

    type: keyword

    example: /usr/bin/ssh

    **`process.executable.text`** :   type: match_only_text

    **`process.exit_code`** :   The exit code of the process, if this is a termination event. The field should be absent if there is no exit code for the event (e.g. process start).

    type: long

    example: 137

    **`process.hash.md5`** :   MD5 hash.

    type: keyword

    **`process.hash.sha1`** :   SHA1 hash.

    type: keyword

    **`process.hash.sha256`*...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/593'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## process [_process_2]'
  relationships:
    next: '158'
    parent: '150'
    previous: '156'
- node_id: '158'
  node_depth: 2
  node_type: Node
  content_length: 1011
  content: |-
    type: keyword

    **`process.hash.ssdeep`** :   SSDEEP hash.

    type: keyword

    **`process.name`** :   Process name. Sometimes called program name or similar.

    type: keyword

    example: ssh

    **`process.name.text`** :   type: match_only_text

    **`process.parent.args`** :   Array of process arguments, starting with the absolute path to the executable. May be filtered to protect sensitive information.

    type: keyword

    example: ["/usr/bin/ssh", "-l", "user", "10.0.0.16"]

    **`process.parent.args_count`** :   Length of the process.args array. This field can be useful for querying or performing bucket analysis on how many arguments were provided to start a process. More arguments may be an indication of suspicious activity.

    type: long

    example: 4

    **`process.parent.code_signature.digest_algorithm`** :   The hashing algorithm used to sign the process. This value can distinguish signatures when a file is signed multiple times by the same signer but with a different digest algorithm.

    type: keyword

    exam...
  metadata:
    docling_label: text
    docling_ref: '#/texts/2594'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## process [_process_2]'
  relationships:
    next: '159'
    parent: '150'
    previous: '157'
- node_id: '159'
  node_depth: 2
  node_type: Node
  content_length: 1068
  content: |-
    **`process.parent.code_signature.exists`** :   Boolean to capture if a signature is present.

    type: boolean

    example: true

    **`process.parent.code_signature.signing_id`** :   The identifier used to sign the process. This is used to identify the application manufactured by a software vendor. The field is relevant to Apple *OS only.

    type: keyword

    example: com.apple.xpc.proxy

    **`process.parent.code_signature.status`** :   Additional information about the certificate status. This is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.

    type: keyword

    example: ERROR_UNTRUSTED_ROOT

    **`process.parent.code_signature.subject_name`** :   Subject name of the code signer

    type: keyword

    example: Microsoft Corporation

    **`process.parent.code_signature.team_id`** :   The team identifier used to sign the process. This is used to identify the team or vendor of a software product. The fiel...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/607'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## process [_process_2]'
  relationships:
    next: '160'
    parent: '150'
    previous: '158'
- node_id: '160'
  node_depth: 2
  node_type: Node
  content_length: 1061
  content: |-
    **`process.parent.code_signature.timestamp`** :   Date and time when the code signature was generated and signed.

    type: date

    example: 2021-01-01T12:10:30Z

    **`process.parent.code_signature.trusted`** :   Stores the trust status of the certificate chain. Validating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.

    type: boolean

    example: true

    **`process.parent.code_signature.valid`** :   Boolean to capture if the digital signature is verified against the binary content. Leave unpopulated if a certificate was unchecked.

    type: boolean

    example: true

    **`process.parent.command_line`** :   Full command line that started the process, including the absolute path to the executable, and all arguments. Some arguments may be filtered to protect sensitive information.

    type: wildcard

    example: /usr/bin/ssh -l user 10.0.0.16

    **`process.parent.command_line.text`** :   type: match_only_text

    **`process.parent....
  metadata:
    docling_label: inline
    docling_ref: '#/groups/612'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## process [_process_2]'
  relationships:
    next: '161'
    parent: '150'
    previous: '159'
- node_id: '161'
  node_depth: 2
  node_type: Node
  content_length: 1021
  content: "type: keyword\n\nexample: x86-64\n\n**`process.parent.elf.byte_order`**\
    \ :   Byte sequence of ELF file.\n\ntype: keyword\n\nexample: Little Endian\n\n\
    **`process.parent.elf.cpu_type`** :   CPU type of the ELF file.\n\ntype: keyword\n\
    \nexample: Intel\n\n**`process.parent.elf.creation_date`** :   Extracted when\
    \ possible from the file\u2019s metadata. Indicates when it was built or compiled.\
    \ It can also be faked by malware creators.\n\ntype: date\n\n**`process.parent.elf.exports`**\
    \ :   List of exported element names and types.\n\ntype: flattened\n\n**`process.parent.elf.header.abi_version`**\
    \ :   Version of the ELF Application Binary Interface (ABI).\n\ntype: keyword\n\
    \n**`process.parent.elf.header.class`** :   Header class of the ELF file.\n\n\
    type: keyword\n\n**`process.parent.elf.header.data`** :   Data table of the ELF\
    \ header.\n\ntype: keyword\n\n**`process.parent.elf.header.entrypoint`** :   Header\
    \ entrypoint of the ELF file.\n\ntype: long\n\nformat: string\n\n**`process.parent.elf.header.object_version`**\
    \ :   \"0x1\" for original ELF ..."
  metadata:
    docling_label: text
    docling_ref: '#/texts/2656'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## process [_process_2]'
  relationships:
    next: '162'
    parent: '150'
    previous: '160'
- node_id: '162'
  node_depth: 2
  node_type: Node
  content_length: 1092
  content: |-
    **`process.parent.elf.header.os_abi`** :   Application Binary Interface (ABI) of the Linux OS.

    type: keyword

    **`process.parent.elf.header.type`** :   Header type of the ELF file.

    type: keyword

    **`process.parent.elf.header.version`** :   Version of the ELF header.

    type: keyword

    **`process.parent.elf.imports`** :   List of imported element names and types.

    type: flattened

    **`process.parent.elf.sections`** :   An array containing an object for each section of the ELF file. The keys that should be present in these objects are defined by sub-fields underneath `elf.sections.*` .

    type: nested

    **`process.parent.elf.sections.chi2`** :   Chi-square probability distribution of the section.

    type: long

    format: number

    **`process.parent.elf.sections.entropy`** :   Shannon entropy calculation from the section.

    type: long

    format: number

    **`process.parent.elf.sections.flags`** :   ELF Section List flags.

    type: keyword

    **`process.parent.elf.sections.name`** :   ELF Section List name.

    t...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/627'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## process [_process_2]'
  relationships:
    next: '163'
    parent: '150'
    previous: '161'
- node_id: '163'
  node_depth: 2
  node_type: Node
  content_length: 1104
  content: |-
    type: keyword

    **`process.parent.elf.sections.physical_size`** :   ELF Section List physical size.

    type: long

    format: bytes

    **`process.parent.elf.sections.type`** :   ELF Section List type.

    type: keyword

    **`process.parent.elf.sections.virtual_address`** :   ELF Section List virtual address.

    type: long

    format: string

    **`process.parent.elf.sections.virtual_size`** :   ELF Section List virtual size.

    type: long

    format: string

    **`process.parent.elf.segments`** :   An array containing an object for each segment of the ELF file. The keys that should be present in these objects are defined by sub-fields underneath `elf.segments.*` .

    type: nested

    **`process.parent.elf.segments.sections`** :   ELF object segment sections.

    type: keyword

    **`process.parent.elf.segments.type`** :   ELF object segment type.

    type: keyword

    **`process.parent.elf.shared_libraries`** :   List of shared libraries used by this ELF object.

    type: keyword

    **`process.parent.elf.telfhash`** :   telfhash symbol...
  metadata:
    docling_label: text
    docling_ref: '#/texts/2721'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## process [_process_2]'
  relationships:
    next: '164'
    parent: '150'
    previous: '162'
- node_id: '164'
  node_depth: 2
  node_type: Node
  content_length: 1051
  content: |-
    example: 2016-05-23T08:05:34.853Z

    **`process.parent.entity_id`** :   Unique identifier for the process. The implementation of this is specified by the data source, but some examples of what could be used here are a process-generated UUID, Sysmon Process GUIDs, or a hash of some uniquely identifying components of a process. Constructing a globally unique identifier is a common practice to mitigate PID reuse as well as to identify a specific process over time, across multiple monitored hosts.

    type: keyword

    example: c2c455d9f99375d

    **`process.parent.executable`** :   Absolute path to the process executable.

    type: keyword

    example: /usr/bin/ssh

    **`process.parent.executable.text`** :   type: match_only_text

    **`process.parent.exit_code`** :   The exit code of the process, if this is a termination event. The field should be absent if there is no exit code for the event (e.g. process start).

    type: long

    example: 137

    **`process.parent.hash.md5`** :   MD5 hash.

    type: keyword

    **`proces...
  metadata:
    docling_label: text
    docling_ref: '#/texts/2757'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## process [_process_2]'
  relationships:
    next: '165'
    parent: '150'
    previous: '163'
- node_id: '165'
  node_depth: 2
  node_type: Node
  content_length: 894
  content: |-
    **`process.parent.hash.sha256`** :   SHA256 hash.

    type: keyword

    **`process.parent.hash.sha512`** :   SHA512 hash.

    type: keyword

    **`process.parent.hash.ssdeep`** :   SSDEEP hash.

    type: keyword

    **`process.parent.name`** :   Process name. Sometimes called program name or similar.

    type: keyword

    example: ssh

    **`process.parent.name.text`** :   type: match_only_text

    **`process.parent.pe.architecture`** :   CPU architecture target for the file.

    type: keyword

    example: x64

    **`process.parent.pe.company`** :   Internal company name of the file, provided at compile-time.

    type: keyword

    example: Microsoft Corporation

    **`process.parent.pe.description`** :   Internal description of the file, provided at compile-time.

    type: keyword

    example: Paint

    **`process.parent.pe.file_version`** :   Internal version of the file, provided at compile-time.

    type: keyword

    example: 6.3.9600.17415
  metadata:
    docling_label: inline
    docling_ref: '#/groups/653'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## process [_process_2]'
  relationships:
    next: '166'
    parent: '150'
    previous: '164'
- node_id: '166'
  node_depth: 2
  node_type: Node
  content_length: 1085
  content: "**`process.parent.pe.imphash`** :   A hash of the imports in a PE file.\
    \ An imphash\u2009\u2014\u2009or import hash\u2009\u2014\u2009can be used to fingerprint\
    \ binaries even after recompilation or other code-level transformations have occurred,\
    \ which would change more traditional hash values. Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html\
    \ .\n\ntype: keyword\n\nexample: 0c6803c4e922103c4dca5963aad36ddf\n\n**`process.parent.pe.original_file_name`**\
    \ :   Internal name of the file, provided at compile-time.\n\ntype: keyword\n\n\
    example: MSPAINT.EXE\n\n**`process.parent.pe.product`** :   Internal product name\
    \ of the file, provided at compile-time.\n\ntype: keyword\n\nexample: Microsoft\xAE\
    \ Windows\xAE Operating System\n\n**`process.parent.pgid`** :   Identifier of\
    \ the group of processes the process belongs to.\n\ntype: long\n\nformat: string\n\
    \n**`process.parent.pid`** :   Process id.\n\ntype: long\n\nexample: 4242\n\n\
    format: string\n\n**`process.parent.start`** :   The time the process started.\n\
    \ntype: d..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/662'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## process [_process_2]'
  relationships:
    next: '167'
    parent: '150'
    previous: '165'
- node_id: '167'
  node_depth: 2
  node_type: Node
  content_length: 1044
  content: |-
    type: long

    example: 4242

    format: string

    **`process.parent.thread.name`** :   Thread name.

    type: keyword

    example: thread-0

    **`process.parent.title`** :   Process title. The proctitle, some times the same as process name. Can also be different: for example a browser setting its title to the web page currently opened.

    type: keyword

    **`process.parent.title.text`** :   type: match_only_text

    **`process.parent.uptime`** :   Seconds the process has been up.

    type: long

    example: 1325

    **`process.parent.working_directory`** :   The working directory of the process.

    type: keyword

    example: /home/alice

    **`process.parent.working_directory.text`** :   type: match_only_text

    **`process.pe.architecture`** :   CPU architecture target for the file.

    type: keyword

    example: x64

    **`process.pe.company`** :   Internal company name of the file, provided at compile-time.

    type: keyword

    example: Microsoft Corporation

    **`process.pe.description`** :   Internal description of the file, provided at ...
  metadata:
    docling_label: text
    docling_ref: '#/texts/2838'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## process [_process_2]'
  relationships:
    next: '168'
    parent: '150'
    previous: '166'
- node_id: '168'
  node_depth: 2
  node_type: Node
  content_length: 1092
  content: "**`process.pe.file_version`** :   Internal version of the file, provided\
    \ at compile-time.\n\ntype: keyword\n\nexample: 6.3.9600.17415\n\n**`process.pe.imphash`**\
    \ :   A hash of the imports in a PE file. An imphash\u2009\u2014\u2009or import\
    \ hash\u2009\u2014\u2009can be used to fingerprint binaries even after recompilation\
    \ or other code-level transformations have occurred, which would change more traditional\
    \ hash values. Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html\
    \ .\n\ntype: keyword\n\nexample: 0c6803c4e922103c4dca5963aad36ddf\n\n**`process.pe.original_file_name`**\
    \ :   Internal name of the file, provided at compile-time.\n\ntype: keyword\n\n\
    example: MSPAINT.EXE\n\n**`process.pe.product`** :   Internal product name of\
    \ the file, provided at compile-time.\n\ntype: keyword\n\nexample: Microsoft\xAE\
    \ Windows\xAE Operating System\n\n**`process.pgid`** :   Identifier of the group\
    \ of processes the process belongs to.\n\ntype: long\n\nformat: string\n\n**`process.pid`**\
    \ :   Process id.\n\ntype: long\n\nexam..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/678'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## process [_process_2]'
  relationships:
    next: '169'
    parent: '150'
    previous: '167'
- node_id: '169'
  node_depth: 2
  node_type: Node
  content_length: 712
  content: |-
    example: 2016-05-23T08:05:34.853Z

    **`process.thread.id`** :   Thread ID.

    type: long

    example: 4242

    format: string

    **`process.thread.name`** :   Thread name.

    type: keyword

    example: thread-0

    **`process.title`** :   Process title. The proctitle, some times the same as process name. Can also be different: for example a browser setting its title to the web page currently opened.

    type: keyword

    **`process.title.text`** :   type: match_only_text

    **`process.uptime`** :   Seconds the process has been up.

    type: long

    example: 1325

    **`process.working_directory`** :   The working directory of the process.

    type: keyword

    example: /home/alice

    **`process.working_directory.text`** :   type: match_only_text
  metadata:
    docling_label: text
    docling_ref: '#/texts/2902'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## process [_process_2]'
  relationships:
    parent: '150'
    previous: '168'
- node_id: '170'
  node_depth: 1
  node_type: Node
  content_length: 1558
  content: |-
    ## registry [_registry]

    Fields related to Windows Registry operations.

    **`registry.data.bytes`** :   Original bytes written with base64 encoding. For Windows registry operations, such as SetValueEx and RegQueryValueEx, this corresponds to the data pointed by `lp_data` . This is optional but provides better recoverability and should be populated for REG_BINARY encoded values.

    type: keyword

    example: ZQBuAC0AVQBTAAAAZQBuAAAAAAA=

    **`registry.data.strings`** :   Content when writing string types. Populated as an array when writing string data to the registry. For single string registry types (REG_SZ, REG_EXPAND_SZ), this should be an array with one string. For sequences of string with REG_MULTI_SZ, this array will be variable length. For numeric data, such as REG_DWORD and REG_QWORD, this should be populated with the decimal representation (e.g `"1"` ).

    type: wildcard

    example: ["C:\rta\red_ttp\bin\myapp.exe"]

    **`registry.data.type`** :   Standard registry type for encoding contents
    ...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/2927'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## registry [_registry]'
  relationships:
    children:
    - '171'
    - '172'
    next: '173'
    parent: '2'
    previous: '150'
- node_id: '171'
  node_depth: 2
  node_type: Node
  content_length: 1031
  content: |-
    ## registry [_registry]

    Fields related to Windows Registry operations.

    **`registry.data.bytes`** :   Original bytes written with base64 encoding. For Windows registry operations, such as SetValueEx and RegQueryValueEx, this corresponds to the data pointed by `lp_data` . This is optional but provides better recoverability and should be populated for REG_BINARY encoded values.

    type: keyword

    example: ZQBuAC0AVQBTAAAAZQBuAAAAAAA=

    **`registry.data.strings`** :   Content when writing string types. Populated as an array when writing string data to the registry. For single string registry types (REG_SZ, REG_EXPAND_SZ), this should be an array with one string. For sequences of string with REG_MULTI_SZ, this array will be variable length. For numeric data, such as REG_DWORD and REG_QWORD, this should be populated with the decimal representation (e.g `"1"` ).

    type: wildcard

    example: ["C:\rta\red_ttp\bin\myapp.exe"]

    **`registry.data.type`** :   Standard registry type for encoding contents
    ...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/2927'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## registry [_registry]'
  relationships:
    next: '172'
    parent: '170'
- node_id: '172'
  node_depth: 2
  node_type: Node
  content_length: 525
  content: |-
    **`registry.hive`** :   Abbreviated name for the hive.

    type: keyword

    example: HKLM

    **`registry.key`** :   Hive-relative path of keys.

    type: keyword

    example: SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\winword.exe

    **`registry.path`** :   Full path, including hive, key and value

    type: keyword

    example: HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\winword.exe\Debugger

    **`registry.value`** :   Name of the value written.

    type: keyword

    example: Debugger
  metadata:
    docling_label: inline
    docling_ref: '#/groups/695'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## registry [_registry]'
  relationships:
    parent: '170'
    previous: '171'
- node_id: '173'
  node_depth: 1
  node_type: Node
  content_length: 1158
  content: "## related [_related]\n\nThis field set is meant to facilitate pivoting\
    \ around a piece of data. Some pieces of information can be seen in many places\
    \ in an ECS event. To facilitate searching for them, store an array of all seen\
    \ values to their corresponding field in `related.` . A concrete example is IP\
    \ addresses, which can be under host, observer, source, destination, client, server,\
    \ and network.forwarded_ip. If you append all IPs to `related.ip` , you can then\
    \ search for a given IP trivially, no matter where it appeared, by querying `related.ip:192.0.2.15`\
    \ .\n\n**`related.hash`** :   All the hashes seen on your event. Populating this\
    \ field, then using it to search for hashes can help in situations where you\u2019\
    re unsure what the hash algorithm is (and therefore which key name to search).\n\
    \ntype: keyword\n\n**`related.hosts`** :   All hostnames or other host identifiers\
    \ seen on your event. Example identifiers include FQDNs, domain names, workstation\
    \ names, or aliases.\n\ntype: keyword\n\n**`related..."
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/2961'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## related [_related]'
  relationships:
    children:
    - '174'
    - '175'
    next: '176'
    parent: '2'
    previous: '170'
- node_id: '174'
  node_depth: 2
  node_type: Node
  content_length: 1045
  content: "## related [_related]\n\nThis field set is meant to facilitate pivoting\
    \ around a piece of data. Some pieces of information can be seen in many places\
    \ in an ECS event. To facilitate searching for them, store an array of all seen\
    \ values to their corresponding field in `related.` . A concrete example is IP\
    \ addresses, which can be under host, observer, source, destination, client, server,\
    \ and network.forwarded_ip. If you append all IPs to `related.ip` , you can then\
    \ search for a given IP trivially, no matter where it appeared, by querying `related.ip:192.0.2.15`\
    \ .\n\n**`related.hash`** :   All the hashes seen on your event. Populating this\
    \ field, then using it to search for hashes can help in situations where you\u2019\
    re unsure what the hash algorithm is (and therefore which key name to search).\n\
    \ntype: keyword\n\n**`related.hosts`** :   All hostnames or other host identifiers\
    \ seen on your event. Example identifiers include FQDNs, domain names, workstation\
    \ names, or aliases.\n\ntype: keyword\n\n**`related..."
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/2961'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## related [_related]'
  relationships:
    next: '175'
    parent: '173'
- node_id: '175'
  node_depth: 2
  node_type: Node
  content_length: 111
  content: |-
    type: ip

    **`related.user`** :   All the user names or other user identifiers seen on the event.

    type: keyword
  metadata:
    docling_label: text
    docling_ref: '#/texts/2977'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## related [_related]'
  relationships:
    parent: '173'
    previous: '174'
- node_id: '176'
  node_depth: 1
  node_type: Node
  content_length: 2170
  content: |-
    ## rule [_rule]

    Rule fields are used to capture the specifics of any observer or agent rules that generate alerts or other notable events. Examples of data sources that would populate the rule fields include: network admission control platforms, network or host IDS/IPS, network firewalls, web application firewalls, url filters, endpoint detection and response (EDR) systems, etc.

    **`rule.author`** :   Name, organization, or pseudonym of the author or authors who created the rule used to generate this event.

    type: keyword

    example: ["Star-Lord"]

    **`rule.category`** :   A categorization value keyword used by the entity using the rule for detection of this event.

    type: keyword

    example: Attempted Information Leak

    **`rule.description`** :   The description of the rule generating the event.

    type: keyword

    example: Block requests to public DNS over HTTPS / TLS protocols

    **`rule.id`** :   A rule ID that is unique within the scope of an agent, observer, or other entity using the rule fo...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/2981'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## rule [_rule]'
  relationships:
    children:
    - '177'
    - '178'
    - '179'
    next: '180'
    parent: '2'
    previous: '173'
- node_id: '177'
  node_depth: 2
  node_type: Node
  content_length: 1055
  content: |-
    ## rule [_rule]

    Rule fields are used to capture the specifics of any observer or agent rules that generate alerts or other notable events. Examples of data sources that would populate the rule fields include: network admission control platforms, network or host IDS/IPS, network firewalls, web application firewalls, url filters, endpoint detection and response (EDR) systems, etc.

    **`rule.author`** :   Name, organization, or pseudonym of the author or authors who created the rule used to generate this event.

    type: keyword

    example: ["Star-Lord"]

    **`rule.category`** :   A categorization value keyword used by the entity using the rule for detection of this event.

    type: keyword

    example: Attempted Information Leak

    **`rule.description`** :   The description of the rule generating the event.

    type: keyword

    example: Block requests to public DNS over HTTPS / TLS protocols

    **`rule.id`** :   A rule ID that is unique within the scope of an agent, observer, or other entity using the rule fo...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/2981'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## rule [_rule]'
  relationships:
    next: '178'
    parent: '176'
- node_id: '178'
  node_depth: 2
  node_type: Node
  content_length: 1084
  content: "**`rule.license`** :   Name of the license under which the rule used to\
    \ generate this event is made available.\n\ntype: keyword\n\nexample: Apache 2.0\n\
    \n**`rule.name`** :   The name of the rule or signature generating the event.\n\
    \ntype: keyword\n\nexample: BLOCK_DNS_over_TLS\n\n**`rule.reference`** :   Reference\
    \ URL to additional information about the rule used to generate this event. The\
    \ URL can point to the vendor\u2019s documentation about the rule. If that\u2019\
    s not available, it can also be a link to a more general page describing this\
    \ type of alert.\n\ntype: keyword\n\nexample: https://en.wikipedia.org/wiki/DNS_over_TLS\n\
    \n**`rule.ruleset`** :   Name of the ruleset, policy, group, or parent category\
    \ in which the rule used to generate this event is a member.\n\ntype: keyword\n\
    \nexample: Standard_Protocol_Filters\n\n**`rule.uuid`** :   A rule ID that is\
    \ unique within the scope of a set or group of agents, observers, or other entities\
    \ using the rule for detection of this event.\n\ntype: keyword\n\nexample: 1100110011..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/708'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## rule [_rule]'
  relationships:
    next: '179'
    parent: '176'
    previous: '177'
- node_id: '179'
  node_depth: 2
  node_type: Node
  content_length: 27
  content: |-
    type: keyword

    example: 1.1
  metadata:
    docling_label: text
    docling_ref: '#/texts/3022'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## rule [_rule]'
  relationships:
    parent: '176'
    previous: '178'
- node_id: '180'
  node_depth: 1
  node_type: Node
  content_length: 7101
  content: |-
    ## server [_server]

    A Server is defined as the responder in a network connection for events regarding sessions, connections, or bidirectional flow records. For TCP events, the server is the receiver of the initial SYN packet(s) of the TCP connection. For other protocols, the server is generally the responder in the network transaction. Some systems actually use the term "responder" to refer the server in TCP connections. The server fields describe details about the system acting as the server in the network event. Server fields are usually populated in conjunction with client fields. Server fields are generally not populated for packet-level events. Client / server representations can add semantic context to an exchange, which is helpful to visualize the data in certain situations. If your context falls in that category, you should still ensure that source and destination are filled appropriately.

    **`server.address`** :   Some event server addresses are defined ambiguously. The event...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/3024'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## server [_server]'
  relationships:
    children:
    - '181'
    - '182'
    - '183'
    - '184'
    - '185'
    - '186'
    - '187'
    - '188'
    - '189'
    next: '190'
    parent: '2'
    previous: '176'
- node_id: '181'
  node_depth: 2
  node_type: Node
  content_length: 19
  content: '## server [_server]'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/3024'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## server [_server]'
  relationships:
    next: '182'
    parent: '180'
- node_id: '182'
  node_depth: 2
  node_type: Node
  content_length: 890
  content: A Server is defined as the responder in a network connection for events
    regarding sessions, connections, or bidirectional flow records. For TCP events,
    the server is the receiver of the initial SYN packet(s) of the TCP connection.
    For other protocols, the server is generally the responder in the network transaction.
    Some systems actually use the term "responder" to refer the server in TCP connections.
    The server fields describe details about the system acting as the server in the
    network event. Server fields are usually populated in conjunction with client
    fields. Server fields are generally not populated for packet-level events. Client
    / server representations can add semantic context to an exchange, which is helpful
    to visualize the data in certain situations. If your context falls in that category,
    you should still ensure that source and destination are filled appropriately.
  metadata:
    docling_label: text
    docling_ref: '#/texts/3025'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## server [_server]'
  relationships:
    next: '183'
    parent: '180'
    previous: '181'
- node_id: '183'
  node_depth: 2
  node_type: Node
  content_length: 1034
  content: |-
    **`server.address`** :   Some event server addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field. Then it should be duplicated to `.ip` or `.domain` , depending on which one it is.

    type: keyword

    **`server.as.number`** :   Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.

    type: long

    example: 15169

    **`server.as.organization.name`** :   Organization name.

    type: keyword

    example: Google LLC

    **`server.as.organization.name.text`** :   type: match_only_text

    **`server.bytes`** :   Bytes sent from the server to the client.

    type: long

    example: 184

    format: bytes

    **`server.domain`** :   The domain name of the server system. This value may be a host name, a fully qualified domain name, or another host naming format. The value may derive from the original event or be added from enrichment.

    type:...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/715'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## server [_server]'
  relationships:
    next: '184'
    parent: '180'
    previous: '182'
- node_id: '184'
  node_depth: 2
  node_type: Node
  content_length: 1111
  content: "**`server.geo.city_name`** :   City name.\n\ntype: keyword\n\nexample:\
    \ Montreal\n\n**`server.geo.continent_code`** :   Two-letter code representing\
    \ continent\u2019s name.\n\ntype: keyword\n\nexample: NA\n\n**`server.geo.continent_name`**\
    \ :   Name of the continent.\n\ntype: keyword\n\nexample: North America\n\n**`server.geo.country_iso_code`**\
    \ :   Country ISO code.\n\ntype: keyword\n\nexample: CA\n\n**`server.geo.country_name`**\
    \ :   Country name.\n\ntype: keyword\n\nexample: Canada\n\n**`server.geo.location`**\
    \ :   Longitude and latitude.\n\ntype: geo_point\n\nexample: { \"lon\": -73.614830,\
    \ \"lat\": 45.505918 }\n\n**`server.geo.name`** :   User-defined description of\
    \ a location, at the level of granularity they care about. Could be the name of\
    \ their data centers, the floor number, if this describes a local physical entity,\
    \ city names. Not typically used in automated geolocation.\n\ntype: keyword\n\n\
    example: boston-dc\n\n**`server.geo.postal_code`** :   Postal code associated\
    \ with the location. Values appropriate for this field may also ..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/721'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## server [_server]'
  relationships:
    next: '185'
    parent: '180'
    previous: '183'
- node_id: '185'
  node_depth: 2
  node_type: Node
  content_length: 1075
  content: |-
    **`server.geo.region_iso_code`** :   Region ISO code.

    type: keyword

    example: CA-QC

    **`server.geo.region_name`** :   Region name.

    type: keyword

    example: Quebec

    **`server.geo.timezone`** :   The time zone of the location, such as IANA time zone name.

    type: keyword

    example: America/Argentina/Buenos_Aires

    **`server.ip`** :   IP address of the server (IPv4 or IPv6).

    type: ip

    **`server.mac`** :   MAC address of the server. The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.

    type: keyword

    example: 00-00-5E-00-53-23

    **`server.nat.ip`** :   Translated ip of destination based NAT sessions (e.g. internet to private DMZ) Typically used with load balancers, firewalls, or routers.

    type: ip

    **`server.nat.port`** :   Translated port of destination based NAT sessions (e.g. internet to private DMZ) Typically u...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/729'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## server [_server]'
  relationships:
    next: '186'
    parent: '180'
    previous: '184'
- node_id: '186'
  node_depth: 2
  node_type: Node
  content_length: 594
  content: |-
    **`server.packets`** :   Packets sent from the server to the client.

    type: long

    example: 12

    **`server.port`** :   Port of the server.

    type: long

    format: string

    **`server.registered_domain`** :   The highest registered server domain, stripped of the subdomain. For example, the registered domain for "foo.example.com" is "example.com". This value can be determined precisely with a list like the public suffix list ( http://publicsuffix.org ). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".

    type: keyword

    example: example.com
  metadata:
    docling_label: inline
    docling_ref: '#/groups/736'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## server [_server]'
  relationships:
    next: '187'
    parent: '180'
    previous: '185'
- node_id: '187'
  node_depth: 2
  node_type: Node
  content_length: 1028
  content: |-
    **`server.subdomain`** :   The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain. For example the subdomain portion of "www.east.mydomain.co.uk" is "east". If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.

    type: keyword

    example: east

    **`server.top_level_domain`** :   The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com". This value can be determined precisely with a list like the public suffix list ( http://publicsuffix.org ). Trying to approximate this by simply taking the last label will not work well for effective TLDs suc...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/739'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## server [_server]'
  relationships:
    next: '188'
    parent: '180'
    previous: '186'
- node_id: '188'
  node_depth: 2
  node_type: Node
  content_length: 1049
  content: "example: co.uk\n\n**`server.user.domain`** :   Name of the directory the\
    \ user is a member of. For example, an LDAP or Active Directory domain name.\n\
    \ntype: keyword\n\n**`server.user.email`** :   User email address.\n\ntype: keyword\n\
    \n**`server.user.full_name`** :   User\u2019s full name, if available.\n\ntype:\
    \ keyword\n\nexample: Albert Einstein\n\n**`server.user.full_name.text`** :  \
    \ type: match_only_text\n\n**`server.user.group.domain`** :   Name of the directory\
    \ the group is a member of. For example, an LDAP or Active Directory domain name.\n\
    \ntype: keyword\n\n**`server.user.group.id`** :   Unique identifier for the group\
    \ on the system/platform.\n\ntype: keyword\n\n**`server.user.group.name`** : \
    \  Name of the group.\n\ntype: keyword\n\n**`server.user.hash`** :   Unique user\
    \ hash to correlate information for a user in anonymized form. Useful if `user.id`\
    \ or `user.name` contain confidential information and cannot be used.\n\ntype:\
    \ keyword\n\n**`server.user.id`** :   Unique identifier of the user.\n\ntype:\
    \ keyword\n\nexample:..."
  metadata:
    docling_label: text
    docling_ref: '#/texts/3135'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## server [_server]'
  relationships:
    next: '189'
    parent: '180'
    previous: '187'
- node_id: '189'
  node_depth: 2
  node_type: Node
  content_length: 285
  content: |-
    **`server.user.name`** :   Short name or login of the user.

    type: keyword

    example: a.einstein

    **`server.user.name.text`** :   type: match_only_text

    **`server.user.roles`** :   Array of user roles at the time of the event.

    type: keyword

    example: ["kibana_admin", "reporting_user"]
  metadata:
    docling_label: inline
    docling_ref: '#/groups/750'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## server [_server]'
  relationships:
    parent: '180'
    previous: '188'
- node_id: '190'
  node_depth: 1
  node_type: Node
  content_length: 9426
  content: |-
    ## service [_service]

    The service fields describe the service for or from which the data was collected. These fields help you find and correlate logs for a specific service and version.

    **`service.address`** :   Address where data about this service was collected from. This should be a URI, network address (ipv4:port or [ipv6]:port) or a resource path (sockets).

    type: keyword

    example: 172.26.0.2:5432

    **`service.environment`** :   Identifies the environment where the service is running. If the same service runs in different environments (production, staging, QA, development, etc.), the environment can identify other instances of the same service. Can also group services and applications from the same environment.

    type: keyword

    example: production

    **`service.ephemeral_id`** :   Ephemeral identifier of this service (if one exists). This id normally changes across restarts, but `service.id` does not.

    type: keyword

    example: 8a4f500f

    **`service.id`** :   Unique identifier of the r...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/3178'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## service [_service]'
  relationships:
    children:
    - '191'
    - '192'
    - '193'
    - '194'
    - '195'
    - '196'
    - '197'
    - '198'
    - '199'
    - '200'
    - '201'
    next: '202'
    parent: '2'
    previous: '180'
- node_id: '191'
  node_depth: 2
  node_type: Node
  content_length: 951
  content: |-
    ## service [_service]

    The service fields describe the service for or from which the data was collected. These fields help you find and correlate logs for a specific service and version.

    **`service.address`** :   Address where data about this service was collected from. This should be a URI, network address (ipv4:port or [ipv6]:port) or a resource path (sockets).

    type: keyword

    example: 172.26.0.2:5432

    **`service.environment`** :   Identifies the environment where the service is running. If the same service runs in different environments (production, staging, QA, development, etc.), the environment can identify other instances of the same service. Can also group services and applications from the same environment.

    type: keyword

    example: production

    **`service.ephemeral_id`** :   Ephemeral identifier of this service (if one exists). This id normally changes across restarts, but `service.id` does not.

    type: keyword

    example: 8a4f500f
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/3178'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## service [_service]'
  relationships:
    next: '192'
    parent: '190'
- node_id: '192'
  node_depth: 2
  node_type: Node
  content_length: 1001
  content: |-
    **`service.id`** :   Unique identifier of the running service. If the service is comprised of many nodes, the `service.id` should be the same for all nodes. This id should uniquely identify the service. This makes it possible to correlate logs and metrics for one specific service, no matter which particular node emitted the event. Note that if you need to see the events from one specific host of the service, you should filter on that `host.name` or `host.id` instead.

    type: keyword

    example: d37e5ebfe0ae6c4972dbe9f0174a1637bb8247f6

    **`service.name`** :   Name of the service data is collected from. The name of the service is normally user given. This allows for distributed services that run on multiple hosts to correlate the related instances based on the name. In the case of Elasticsearch the `service.name` could contain the cluster name. For Beats the `service.name` is by default a copy of the `service.type` field if no name is specified.

    type: keyword

    example: elasticsearch-metric...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/756'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## service [_service]'
  relationships:
    next: '193'
    parent: '190'
    previous: '191'
- node_id: '193'
  node_depth: 2
  node_type: Node
  content_length: 941
  content: "**`service.node.name`** :   Name of a service node. This allows for two\
    \ nodes of the same service running on the same host to be differentiated. Therefore,\
    \ `service.node.name` should typically be unique across nodes of a given service.\
    \ In the case of Elasticsearch, the `service.node.name` could contain the unique\
    \ node name within the Elasticsearch cluster. In cases where the service doesn\u2019\
    t have the concept of a node name, the host name or container name can be used\
    \ to distinguish running instances that make up this service. If those do not\
    \ provide uniqueness (e.g. multiple instances of the service running on the same\
    \ host) - the node name can be manually set.\n\ntype: keyword\n\nexample: instance-0000000016\n\
    \n**`service.origin.address`** :   Address where data about this service was collected\
    \ from. This should be a URI, network address (ipv4:port or [ipv6]:port) or a\
    \ resource path (sockets).\n\ntype: keyword\n\nexample: 172.26.0.2:5432"
  metadata:
    docling_label: inline
    docling_ref: '#/groups/758'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## service [_service]'
  relationships:
    next: '194'
    parent: '190'
    previous: '192'
- node_id: '194'
  node_depth: 2
  node_type: Node
  content_length: 1036
  content: |-
    **`service.origin.environment`** :   Identifies the environment where the service is running. If the same service runs in different environments (production, staging, QA, development, etc.), the environment can identify other instances of the same service. Can also group services and applications from the same environment.

    type: keyword

    example: production

    **`service.origin.ephemeral_id`** :   Ephemeral identifier of this service (if one exists). This id normally changes across restarts, but `service.id` does not.

    type: keyword

    example: 8a4f500f

    **`service.origin.id`** :   Unique identifier of the running service. If the service is comprised of many nodes, the `service.id` should be the same for all nodes. This id should uniquely identify the service. This makes it possible to correlate logs and metrics for one specific service, no matter which particular node emitted the event. Note that if you need to see the events from one specific host of the service, you should filter on th...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/760'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## service [_service]'
  relationships:
    next: '195'
    parent: '190'
    previous: '193'
- node_id: '195'
  node_depth: 2
  node_type: Node
  content_length: 535
  content: |-
    type: keyword

    example: d37e5ebfe0ae6c4972dbe9f0174a1637bb8247f6

    **`service.origin.name`** :   Name of the service data is collected from. The name of the service is normally user given. This allows for distributed services that run on multiple hosts to correlate the related instances based on the name. In the case of Elasticsearch the `service.name` could contain the cluster name. For Beats the `service.name` is by default a copy of the `service.type` field if no name is specified.

    type: keyword

    example: elasticsearch-metrics
  metadata:
    docling_label: text
    docling_ref: '#/texts/3244'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## service [_service]'
  relationships:
    next: '196'
    parent: '190'
    previous: '194'
- node_id: '196'
  node_depth: 2
  node_type: Node
  content_length: 797
  content: "**`service.origin.node.name`** :   Name of a service node. This allows\
    \ for two nodes of the same service running on the same host to be differentiated.\
    \ Therefore, `service.node.name` should typically be unique across nodes of a\
    \ given service. In the case of Elasticsearch, the `service.node.name` could contain\
    \ the unique node name within the Elasticsearch cluster. In cases where the service\
    \ doesn\u2019t have the concept of a node name, the host name or container name\
    \ can be used to distinguish running instances that make up this service. If those\
    \ do not provide uniqueness (e.g. multiple instances of the service running on\
    \ the same host) - the node name can be manually set.\n\ntype: keyword\n\nexample:\
    \ instance-0000000016\n\n**`service.origin.state`** :   Current state of the service.\n\
    \ntype: keyword"
  metadata:
    docling_label: inline
    docling_ref: '#/groups/764'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## service [_service]'
  relationships:
    next: '197'
    parent: '190'
    previous: '195'
- node_id: '197'
  node_depth: 2
  node_type: Node
  content_length: 795
  content: |-
    **`service.origin.type`** :   The type of the service data is collected from. The type can be used to group and correlate logs and metrics from one service type. Example: If logs or metrics are collected from Elasticsearch, `service.type` would be `elasticsearch` .

    type: keyword

    example: elasticsearch

    **`service.origin.version`** :   Version of the service the data was collected from. This allows to look at a data set only for a specific version of a service.

    type: keyword

    example: 3.2.4

    **`service.state`** :   Current state of the service.

    type: keyword

    **`service.target.address`** :   Address where data about this service was collected from. This should be a URI, network address (ipv4:port or [ipv6]:port) or a resource path (sockets).

    type: keyword

    example: 172.26.0.2:5432
  metadata:
    docling_label: inline
    docling_ref: '#/groups/766'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## service [_service]'
  relationships:
    next: '198'
    parent: '190'
    previous: '196'
- node_id: '198'
  node_depth: 2
  node_type: Node
  content_length: 1036
  content: |-
    **`service.target.environment`** :   Identifies the environment where the service is running. If the same service runs in different environments (production, staging, QA, development, etc.), the environment can identify other instances of the same service. Can also group services and applications from the same environment.

    type: keyword

    example: production

    **`service.target.ephemeral_id`** :   Ephemeral identifier of this service (if one exists). This id normally changes across restarts, but `service.id` does not.

    type: keyword

    example: 8a4f500f

    **`service.target.id`** :   Unique identifier of the running service. If the service is comprised of many nodes, the `service.id` should be the same for all nodes. This id should uniquely identify the service. This makes it possible to correlate logs and metrics for one specific service, no matter which particular node emitted the event. Note that if you need to see the events from one specific host of the service, you should filter on th...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/770'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## service [_service]'
  relationships:
    next: '199'
    parent: '190'
    previous: '197'
- node_id: '199'
  node_depth: 2
  node_type: Node
  content_length: 535
  content: |-
    type: keyword

    example: d37e5ebfe0ae6c4972dbe9f0174a1637bb8247f6

    **`service.target.name`** :   Name of the service data is collected from. The name of the service is normally user given. This allows for distributed services that run on multiple hosts to correlate the related instances based on the name. In the case of Elasticsearch the `service.name` could contain the cluster name. For Beats the `service.name` is by default a copy of the `service.type` field if no name is specified.

    type: keyword

    example: elasticsearch-metrics
  metadata:
    docling_label: text
    docling_ref: '#/texts/3304'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## service [_service]'
  relationships:
    next: '200'
    parent: '190'
    previous: '198'
- node_id: '200'
  node_depth: 2
  node_type: Node
  content_length: 797
  content: "**`service.target.node.name`** :   Name of a service node. This allows\
    \ for two nodes of the same service running on the same host to be differentiated.\
    \ Therefore, `service.node.name` should typically be unique across nodes of a\
    \ given service. In the case of Elasticsearch, the `service.node.name` could contain\
    \ the unique node name within the Elasticsearch cluster. In cases where the service\
    \ doesn\u2019t have the concept of a node name, the host name or container name\
    \ can be used to distinguish running instances that make up this service. If those\
    \ do not provide uniqueness (e.g. multiple instances of the service running on\
    \ the same host) - the node name can be manually set.\n\ntype: keyword\n\nexample:\
    \ instance-0000000016\n\n**`service.target.state`** :   Current state of the service.\n\
    \ntype: keyword"
  metadata:
    docling_label: inline
    docling_ref: '#/groups/774'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## service [_service]'
  relationships:
    next: '201'
    parent: '190'
    previous: '199'
- node_id: '201'
  node_depth: 2
  node_type: Node
  content_length: 982
  content: |-
    **`service.target.type`** :   The type of the service data is collected from. The type can be used to group and correlate logs and metrics from one service type. Example: If logs or metrics are collected from Elasticsearch, `service.type` would be `elasticsearch` .

    type: keyword

    example: elasticsearch

    **`service.target.version`** :   Version of the service the data was collected from. This allows to look at a data set only for a specific version of a service.

    type: keyword

    example: 3.2.4

    **`service.type`** :   The type of the service data is collected from. The type can be used to group and correlate logs and metrics from one service type. Example: If logs or metrics are collected from Elasticsearch, `service.type` would be `elasticsearch` .

    type: keyword

    example: elasticsearch

    **`service.version`** :   Version of the service the data was collected from. This allows to look at a data set only for a specific version of a service.

    type: keyword

    example: 3.2.4
  metadata:
    docling_label: inline
    docling_ref: '#/groups/776'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## service [_service]'
  relationships:
    parent: '190'
    previous: '200'
- node_id: '202'
  node_depth: 1
  node_type: Node
  content_length: 6808
  content: |-
    ## source [_source_2]

    Source fields capture details about the sender of a network exchange/packet. These fields are populated from a network event, packet, or other event containing details of a network transaction. Source fields are usually populated in conjunction with destination fields. The source and destination fields are considered the baseline and should always be filled if an event contains source and destination details from a network transaction. If the event also contains identification of the client and server roles, then the client and server fields should also be populated.

    **`source.address`** :   Some event source addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field. Then it should be duplicated to `.ip` or `.domain` , depending on which one it is.

    type: keyword

    **`source.as.number`** :   Unique number allocated to the autonomous system. The autonomous sys...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/3351'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## source [_source_2]'
  relationships:
    children:
    - '203'
    - '204'
    - '205'
    - '206'
    - '207'
    - '208'
    - '209'
    next: '210'
    parent: '2'
    previous: '190'
- node_id: '203'
  node_depth: 2
  node_type: Node
  content_length: 903
  content: |-
    ## source [_source_2]

    Source fields capture details about the sender of a network exchange/packet. These fields are populated from a network event, packet, or other event containing details of a network transaction. Source fields are usually populated in conjunction with destination fields. The source and destination fields are considered the baseline and should always be filled if an event contains source and destination details from a network transaction. If the event also contains identification of the client and server roles, then the client and server fields should also be populated.

    **`source.address`** :   Some event source addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field. Then it should be duplicated to `.ip` or `.domain` , depending on which one it is.

    type: keyword
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/3351'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## source [_source_2]'
  relationships:
    next: '204'
    parent: '202'
- node_id: '204'
  node_depth: 2
  node_type: Node
  content_length: 1105
  content: "**`source.as.number`** :   Unique number allocated to the autonomous system.\
    \ The autonomous system number (ASN) uniquely identifies each network on the Internet.\n\
    \ntype: long\n\nexample: 15169\n\n**`source.as.organization.name`** :   Organization\
    \ name.\n\ntype: keyword\n\nexample: Google LLC\n\n**`source.as.organization.name.text`**\
    \ :   type: match_only_text\n\n**`source.bytes`** :   Bytes sent from the source\
    \ to the destination.\n\ntype: long\n\nexample: 184\n\nformat: bytes\n\n**`source.domain`**\
    \ :   The domain name of the source system. This value may be a host name, a fully\
    \ qualified domain name, or another host naming format. The value may derive from\
    \ the original event or be added from enrichment.\n\ntype: keyword\n\nexample:\
    \ foo.example.com\n\n**`source.geo.city_name`** :   City name.\n\ntype: keyword\n\
    \nexample: Montreal\n\n**`source.geo.continent_code`** :   Two-letter code representing\
    \ continent\u2019s name.\n\ntype: keyword\n\nexample: NA\n\n**`source.geo.continent_name`**\
    \ :   Name of the continent.\n\ntype: keyword\n\nex..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/781'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## source [_source_2]'
  relationships:
    next: '205'
    parent: '202'
    previous: '203'
- node_id: '205'
  node_depth: 2
  node_type: Node
  content_length: 1050
  content: |-
    **`source.geo.country_name`** :   Country name.

    type: keyword

    example: Canada

    **`source.geo.location`** :   Longitude and latitude.

    type: geo_point

    example: { "lon": -73.614830, "lat": 45.505918 }

    **`source.geo.name`** :   User-defined description of a location, at the level of granularity they care about. Could be the name of their data centers, the floor number, if this describes a local physical entity, city names. Not typically used in automated geolocation.

    type: keyword

    example: boston-dc

    **`source.geo.postal_code`** :   Postal code associated with the location. Values appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.

    type: keyword

    example: 94040

    **`source.geo.region_iso_code`** :   Region ISO code.

    type: keyword

    example: CA-QC

    **`source.geo.region_name`** :   Region name.

    type: keyword

    example: Quebec

    **`source.geo.timezone`** :   The time zone of the location, such as IANA time zone name.

    type...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/790'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## source [_source_2]'
  relationships:
    next: '206'
    parent: '202'
    previous: '204'
- node_id: '206'
  node_depth: 2
  node_type: Node
  content_length: 946
  content: |-
    **`source.ip`** :   IP address of the source (IPv4 or IPv6).

    type: ip

    **`source.mac`** :   MAC address of the source. The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.

    type: keyword

    example: 00-00-5E-00-53-23

    **`source.nat.ip`** :   Translated ip of source based NAT sessions (e.g. internal client to internet) Typically connections traversing load balancers, firewalls, or routers.

    type: ip

    **`source.nat.port`** :   Translated port of source based NAT sessions. (e.g. internal client to internet) Typically used with load balancers, firewalls, or routers.

    type: long

    format: string

    **`source.packets`** :   Packets sent from the source to the destination.

    type: long

    example: 12

    **`source.port`** :   Port of the source.

    type: long

    format: string
  metadata:
    docling_label: inline
    docling_ref: '#/groups/797'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## source [_source_2]'
  relationships:
    next: '207'
    parent: '202'
    previous: '205'
- node_id: '207'
  node_depth: 2
  node_type: Node
  content_length: 1017
  content: |-
    **`source.registered_domain`** :   The highest registered source domain, stripped of the subdomain. For example, the registered domain for "foo.example.com" is "example.com". This value can be determined precisely with a list like the public suffix list ( http://publicsuffix.org ). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".

    type: keyword

    example: example.com

    **`source.subdomain`** :   The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain. For example the subdomain portion of "www.east.mydomain.co.uk" is "east". If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.

    type: keywo...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/803'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## source [_source_2]'
  relationships:
    next: '208'
    parent: '202'
    previous: '206'
- node_id: '208'
  node_depth: 2
  node_type: Node
  content_length: 984
  content: "**`source.top_level_domain`** :   The effective top level domain (eTLD),\
    \ also known as the domain suffix, is the last part of the domain name. For example,\
    \ the top level domain for example.com is \"com\". This value can be determined\
    \ precisely with a list like the public suffix list ( http://publicsuffix.org\
    \ ). Trying to approximate this by simply taking the last label will not work\
    \ well for effective TLDs such as \"co.uk\".\n\ntype: keyword\n\nexample: co.uk\n\
    \n**`source.user.domain`** :   Name of the directory the user is a member of.\
    \ For example, an LDAP or Active Directory domain name.\n\ntype: keyword\n\n**`source.user.email`**\
    \ :   User email address.\n\ntype: keyword\n\n**`source.user.full_name`** :  \
    \ User\u2019s full name, if available.\n\ntype: keyword\n\nexample: Albert Einstein\n\
    \n**`source.user.full_name.text`** :   type: match_only_text\n\n**`source.user.group.domain`**\
    \ :   Name of the directory the group is a member of. For example, an LDAP or\
    \ Active Directory domain name.\n\ntype: keyword"
  metadata:
    docling_label: inline
    docling_ref: '#/groups/805'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## source [_source_2]'
  relationships:
    next: '209'
    parent: '202'
    previous: '207'
- node_id: '209'
  node_depth: 2
  node_type: Node
  content_length: 791
  content: |-
    **`source.user.group.id`** :   Unique identifier for the group on the system/platform.

    type: keyword

    **`source.user.group.name`** :   Name of the group.

    type: keyword

    **`source.user.hash`** :   Unique user hash to correlate information for a user in anonymized form. Useful if `user.id` or `user.name` contain confidential information and cannot be used.

    type: keyword

    **`source.user.id`** :   Unique identifier of the user.

    type: keyword

    example: S-1-5-21-202424912787-2692429404-2351956786-1000

    **`source.user.name`** :   Short name or login of the user.

    type: keyword

    example: a.einstein

    **`source.user.name.text`** :   type: match_only_text

    **`source.user.roles`** :   Array of user roles at the time of the event.

    type: keyword

    example: ["kibana_admin", "reporting_user"]
  metadata:
    docling_label: inline
    docling_ref: '#/groups/811'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## source [_source_2]'
  relationships:
    parent: '202'
    previous: '208'
- node_id: '210'
  node_depth: 1
  node_type: Node
  content_length: 68088
  content: "## threat [_threat]\n\nFields to classify events and alerts according\
    \ to a threat taxonomy such as the MITRE ATT&CK\xAE framework. These fields are\
    \ for users to classify alerts from all of their sources (e.g. IDS, NGFW, etc.)\
    \ within a common taxonomy. The threat.tactic.* fields are meant to capture the\
    \ high level category of the threat (e.g. \"impact\"). The threat.technique.*\
    \ fields are meant to capture which kind of approach is used by this detected\
    \ threat, to accomplish the goal (e.g. \"endpoint denial of service\").\n\n**`threat.enrichments`**\
    \ :   A list of associated indicators objects enriching the event, and the context\
    \ of that association/enrichment.\n\ntype: nested\n\n**`threat.enrichments.indicator`**\
    \ :   Object containing associated indicators enriching the event.\n\ntype: object\n\
    \n**`threat.enrichments.indicator.as.number`** :   Unique number allocated to\
    \ the autonomous system. The autonomous system number (ASN) uniquely identifies\
    \ each network on the Internet.\n\ntype: long\n\nexample: 15169\n\n*..."
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/3505'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    children:
    - '211'
    - '212'
    - '213'
    - '214'
    - '215'
    - '216'
    - '217'
    - '218'
    - '219'
    - '220'
    - '221'
    - '222'
    - '223'
    - '224'
    - '225'
    - '226'
    - '227'
    - '228'
    - '229'
    - '230'
    - '231'
    - '232'
    - '233'
    - '234'
    - '235'
    - '236'
    - '237'
    - '238'
    - '239'
    - '240'
    - '241'
    - '242'
    - '243'
    - '244'
    - '245'
    - '246'
    - '247'
    - '248'
    - '249'
    - '250'
    - '251'
    - '252'
    - '253'
    - '254'
    - '255'
    - '256'
    - '257'
    - '258'
    - '259'
    - '260'
    - '261'
    - '262'
    - '263'
    - '264'
    - '265'
    - '266'
    - '267'
    - '268'
    - '269'
    - '270'
    - '271'
    - '272'
    - '273'
    - '274'
    - '275'
    - '276'
    - '277'
    - '278'
    - '279'
    - '280'
    - '281'
    next: '282'
    parent: '2'
    previous: '202'
- node_id: '211'
  node_depth: 2
  node_type: Node
  content_length: 997
  content: "## threat [_threat]\n\nFields to classify events and alerts according\
    \ to a threat taxonomy such as the MITRE ATT&CK\xAE framework. These fields are\
    \ for users to classify alerts from all of their sources (e.g. IDS, NGFW, etc.)\
    \ within a common taxonomy. The threat.tactic.* fields are meant to capture the\
    \ high level category of the threat (e.g. \"impact\"). The threat.technique.*\
    \ fields are meant to capture which kind of approach is used by this detected\
    \ threat, to accomplish the goal (e.g. \"endpoint denial of service\").\n\n**`threat.enrichments`**\
    \ :   A list of associated indicators objects enriching the event, and the context\
    \ of that association/enrichment.\n\ntype: nested\n\n**`threat.enrichments.indicator`**\
    \ :   Object containing associated indicators enriching the event.\n\ntype: object\n\
    \n**`threat.enrichments.indicator.as.number`** :   Unique number allocated to\
    \ the autonomous system. The autonomous system number (ASN) uniquely identifies\
    \ each network on the Internet.\n\ntype: long\n\nexample: 15169"
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/3505'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '212'
    parent: '210'
- node_id: '212'
  node_depth: 2
  node_type: Node
  content_length: 1065
  content: "**`threat.enrichments.indicator.as.organization.name`** :   Organization\
    \ name.\n\ntype: keyword\n\nexample: Google LLC\n\n**`threat.enrichments.indicator.as.organization.name.text`**\
    \ :   type: match_only_text\n\n**`threat.enrichments.indicator.confidence`** :\
    \   Identifies\_the\_vendor-neutral confidence\_rating\_using\_the None/Low/Medium/High\_\
    scale defined in Appendix A of the STIX 2.1 framework. Vendor-specific confidence\
    \ scales may be added as custom fields. Expected values are: * Not Specified *\
    \ None * Low * Medium * High\n\ntype: keyword\n\nexample: Medium\n\n**`threat.enrichments.indicator.description`**\
    \ :   Describes the type of action conducted by the threat.\n\ntype: keyword\n\
    \nexample: IP x.x.x.x was observed delivering the Angler EK.\n\n**`threat.enrichments.indicator.email.address`**\
    \ :   Identifies a threat indicator as an email address (irrespective of direction).\n\
    \ntype: keyword\n\nexample: `phish@example.com`\n\n**`threat.enrichments.indicator.file.accessed`**\
    \ :   Last time the file was accessed. Not..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/821'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '213'
    parent: '210'
    previous: '211'
- node_id: '213'
  node_depth: 2
  node_type: Node
  content_length: 1038
  content: "**`threat.enrichments.indicator.file.attributes`** :   Array of file attributes.\
    \ Attributes names will vary by platform. Here\u2019s a non-exhaustive list of\
    \ values that are expected in this field: archive, compressed, directory, encrypted,\
    \ execute, hidden, read, readonly, system, write.\n\ntype: keyword\n\nexample:\
    \ [\"readonly\", \"system\"]\n\n**`threat.enrichments.indicator.file.code_signature.digest_algorithm`**\
    \ :   The hashing algorithm used to sign the process. This value can distinguish\
    \ signatures when a file is signed multiple times by the same signer but with\
    \ a different digest algorithm.\n\ntype: keyword\n\nexample: sha256\n\n**`threat.enrichments.indicator.file.code_signature.exists`**\
    \ :   Boolean to capture if a signature is present.\n\ntype: boolean\n\nexample:\
    \ true\n\n**`threat.enrichments.indicator.file.code_signature.signing_id`** :\
    \   The identifier used to sign the process. This is used to identify the application\
    \ manufactured by a software vendor. The field is relevant to Apple *OS only.\n\
    \ntype:..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/828'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '214'
    parent: '210'
    previous: '212'
- node_id: '214'
  node_depth: 2
  node_type: Node
  content_length: 923
  content: |-
    **`threat.enrichments.indicator.file.code_signature.status`** :   Additional information about the certificate status. This is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.

    type: keyword

    example: ERROR_UNTRUSTED_ROOT

    **`threat.enrichments.indicator.file.code_signature.subject_name`** :   Subject name of the code signer

    type: keyword

    example: Microsoft Corporation

    **`threat.enrichments.indicator.file.code_signature.team_id`** :   The team identifier used to sign the process. This is used to identify the team or vendor of a software product. The field is relevant to Apple *OS only.

    type: keyword

    example: EQHXZ8M8AV

    **`threat.enrichments.indicator.file.code_signature.timestamp`** :   Date and time when the code signature was generated and signed.

    type: date

    example: 2021-01-01T12:10:30Z
  metadata:
    docling_label: inline
    docling_ref: '#/groups/832'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '215'
    parent: '210'
    previous: '213'
- node_id: '215'
  node_depth: 2
  node_type: Node
  content_length: 1056
  content: |-
    **`threat.enrichments.indicator.file.code_signature.trusted`** :   Stores the trust status of the certificate chain. Validating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.

    type: boolean

    example: true

    **`threat.enrichments.indicator.file.code_signature.valid`** :   Boolean to capture if the digital signature is verified against the binary content. Leave unpopulated if a certificate was unchecked.

    type: boolean

    example: true

    **`threat.enrichments.indicator.file.created`** :   File creation time. Note that not all filesystems store the creation time.

    type: date

    **`threat.enrichments.indicator.file.ctime`** :   Last time the file attributes or metadata changed. Note that changes to the file content will update `mtime` . This implies `ctime` will be adjusted at the same time, since `mtime` is an attribute of the file.

    type: date

    **`threat.enrichments.indicator.file.device`** :   Device that...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/836'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '216'
    parent: '210'
    previous: '214'
- node_id: '216'
  node_depth: 2
  node_type: Node
  content_length: 1084
  content: "**`threat.enrichments.indicator.file.directory`** :   Directory where\
    \ the file is located. It should include the drive letter, when appropriate.\n\
    \ntype: keyword\n\nexample: /home/alice\n\n**`threat.enrichments.indicator.file.drive_letter`**\
    \ :   Drive letter where the file is located. This field is only relevant on Windows.\
    \ The value should be uppercase, and not include the colon.\n\ntype: keyword\n\
    \nexample: C\n\n**`threat.enrichments.indicator.file.elf.architecture`** :   Machine\
    \ architecture of the ELF file.\n\ntype: keyword\n\nexample: x86-64\n\n**`threat.enrichments.indicator.file.elf.byte_order`**\
    \ :   Byte sequence of ELF file.\n\ntype: keyword\n\nexample: Little Endian\n\n\
    **`threat.enrichments.indicator.file.elf.cpu_type`** :   CPU type of the ELF file.\n\
    \ntype: keyword\n\nexample: Intel\n\n**`threat.enrichments.indicator.file.elf.creation_date`**\
    \ :   Extracted when possible from the file\u2019s metadata. Indicates when it\
    \ was built or compiled. It can also be faked by malware creators.\n\ntype: date\n\
    \n**`threat.enr..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/841'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '217'
    parent: '210'
    previous: '215'
- node_id: '217'
  node_depth: 2
  node_type: Node
  content_length: 1069
  content: |-
    type: flattened

    **`threat.enrichments.indicator.file.elf.header.abi_version`** :   Version of the ELF Application Binary Interface (ABI).

    type: keyword

    **`threat.enrichments.indicator.file.elf.header.class`** :   Header class of the ELF file.

    type: keyword

    **`threat.enrichments.indicator.file.elf.header.data`** :   Data table of the ELF header.

    type: keyword

    **`threat.enrichments.indicator.file.elf.header.entrypoint`** :   Header entrypoint of the ELF file.

    type: long

    format: string

    **`threat.enrichments.indicator.file.elf.header.object_version`** :   "0x1" for original ELF files.

    type: keyword

    **`threat.enrichments.indicator.file.elf.header.os_abi`** :   Application Binary Interface (ABI) of the Linux OS.

    type: keyword

    **`threat.enrichments.indicator.file.elf.header.type`** :   Header type of the ELF file.

    type: keyword

    **`threat.enrichments.indicator.file.elf.header.version`** :   Version of the ELF header.

    type: keyword

    **`threat.enrichments.indicator.file.elf.impo...
  metadata:
    docling_label: text
    docling_ref: '#/texts/3620'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '218'
    parent: '210'
    previous: '216'
- node_id: '218'
  node_depth: 2
  node_type: Node
  content_length: 1072
  content: |-
    **`threat.enrichments.indicator.file.elf.sections`** :   An array containing an object for each section of the ELF file. The keys that should be present in these objects are defined by sub-fields underneath `elf.sections.*` .

    type: nested

    **`threat.enrichments.indicator.file.elf.sections.chi2`** :   Chi-square probability distribution of the section.

    type: long

    format: number

    **`threat.enrichments.indicator.file.elf.sections.entropy`** :   Shannon entropy calculation from the section.

    type: long

    format: number

    **`threat.enrichments.indicator.file.elf.sections.flags`** :   ELF Section List flags.

    type: keyword

    **`threat.enrichments.indicator.file.elf.sections.name`** :   ELF Section List name.

    type: keyword

    **`threat.enrichments.indicator.file.elf.sections.physical_offset`** :   ELF Section List offset.

    type: keyword

    **`threat.enrichments.indicator.file.elf.sections.physical_size`** :   ELF Section List physical size.

    type: long

    format: bytes

    **`threat.enrichments.indic...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/857'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '219'
    parent: '210'
    previous: '217'
- node_id: '219'
  node_depth: 2
  node_type: Node
  content_length: 958
  content: |-
    **`threat.enrichments.indicator.file.elf.sections.virtual_address`** :   ELF Section List virtual address.

    type: long

    format: string

    **`threat.enrichments.indicator.file.elf.sections.virtual_size`** :   ELF Section List virtual size.

    type: long

    format: string

    **`threat.enrichments.indicator.file.elf.segments`** :   An array containing an object for each segment of the ELF file. The keys that should be present in these objects are defined by sub-fields underneath `elf.segments.*` .

    type: nested

    **`threat.enrichments.indicator.file.elf.segments.sections`** :   ELF object segment sections.

    type: keyword

    **`threat.enrichments.indicator.file.elf.segments.type`** :   ELF object segment type.

    type: keyword

    **`threat.enrichments.indicator.file.elf.shared_libraries`** :   List of shared libraries used by this ELF object.

    type: keyword

    **`threat.enrichments.indicator.file.elf.telfhash`** :   telfhash symbol hash for ELF file.

    type: keyword
  metadata:
    docling_label: inline
    docling_ref: '#/groups/865'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '220'
    parent: '210'
    previous: '218'
- node_id: '220'
  node_depth: 2
  node_type: Node
  content_length: 255
  content: |-
    **`threat.enrichments.indicator.file.extension`** :   File extension, excluding the leading dot. Note that when the file name has multiple extensions (example.tar.gz), only the last one should be captured ("gz", not "tar.gz").

    type: keyword

    example: png
  metadata:
    docling_label: inline
    docling_ref: '#/groups/872'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '221'
    parent: '210'
    previous: '219'
- node_id: '221'
  node_depth: 2
  node_type: Node
  content_length: 971
  content: |-
    **`threat.enrichments.indicator.file.fork_name`** :   A fork is additional data associated with a filesystem object. On Linux, a resource fork is used to store additional data with a filesystem object. A file always has at least one fork for the data portion, and additional forks may exist. On NTFS, this is analogous to an Alternate Data Stream (ADS), and the default data stream for a file is just called $DATA. Zone.Identifier is commonly used by Windows to track contents downloaded from the Internet. An ADS is typically of the form: `C:\path\to\filename.extension:some_fork_name` , and `some_fork_name` is the value that should populate `fork_name` . `filename.extension` should populate `file.name` , and `extension` should populate `file.extension` . The full path, `file.path` , will include the fork name.

    type: keyword

    example: Zone.Identifer

    **`threat.enrichments.indicator.file.gid`** :   Primary group ID (GID) of the file.

    type: keyword

    example: 1001
  metadata:
    docling_label: inline
    docling_ref: '#/groups/873'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '222'
    parent: '210'
    previous: '220'
- node_id: '222'
  node_depth: 2
  node_type: Node
  content_length: 1039
  content: |-
    **`threat.enrichments.indicator.file.group`** :   Primary group name of the file.

    type: keyword

    example: alice

    **`threat.enrichments.indicator.file.hash.md5`** :   MD5 hash.

    type: keyword

    **`threat.enrichments.indicator.file.hash.sha1`** :   SHA1 hash.

    type: keyword

    **`threat.enrichments.indicator.file.hash.sha256`** :   SHA256 hash.

    type: keyword

    **`threat.enrichments.indicator.file.hash.sha512`** :   SHA512 hash.

    type: keyword

    **`threat.enrichments.indicator.file.hash.ssdeep`** :   SSDEEP hash.

    type: keyword

    **`threat.enrichments.indicator.file.inode`** :   Inode representing the file in the filesystem.

    type: keyword

    example: 256383

    **`threat.enrichments.indicator.file.mime_type`** :   MIME type should identify the format of the file or stream of bytes using IANA official types , where possible. When more than one type is applicable, the most specific type should be used.

    type: keyword

    **`threat.enrichments.indicator.file.mode`** :   Mode of the file in octal repres...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/875'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '223'
    parent: '210'
    previous: '221'
- node_id: '223'
  node_depth: 2
  node_type: Node
  content_length: 1080
  content: "**`threat.enrichments.indicator.file.mtime`** :   Last time the file content\
    \ was modified.\n\ntype: date\n\n**`threat.enrichments.indicator.file.name`**\
    \ :   Name of the file including the extension, without the directory.\n\ntype:\
    \ keyword\n\nexample: example.png\n\n**`threat.enrichments.indicator.file.owner`**\
    \ :   File owner\u2019s username.\n\ntype: keyword\n\nexample: alice\n\n**`threat.enrichments.indicator.file.path`**\
    \ :   Full path to the file, including the file name. It should include the drive\
    \ letter, when appropriate.\n\ntype: keyword\n\nexample: /home/alice/example.png\n\
    \n**`threat.enrichments.indicator.file.path.text`** :   type: match_only_text\n\
    \n**`threat.enrichments.indicator.file.pe.architecture`** :   CPU architecture\
    \ target for the file.\n\ntype: keyword\n\nexample: x64\n\n**`threat.enrichments.indicator.file.pe.company`**\
    \ :   Internal company name of the file, provided at compile-time.\n\ntype: keyword\n\
    \nexample: Microsoft Corporation\n\n**`threat.enrichments.indicator.file.pe.description`**\
    \ :   Internal d..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/884'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '224'
    parent: '210'
    previous: '222'
- node_id: '224'
  node_depth: 2
  node_type: Node
  content_length: 1078
  content: "**`threat.enrichments.indicator.file.pe.file_version`** :   Internal version\
    \ of the file, provided at compile-time.\n\ntype: keyword\n\nexample: 6.3.9600.17415\n\
    \n**`threat.enrichments.indicator.file.pe.imphash`** :   A hash of the imports\
    \ in a PE file. An imphash\u2009\u2014\u2009or import hash\u2009\u2014\u2009can\
    \ be used to fingerprint binaries even after recompilation or other code-level\
    \ transformations have occurred, which would change more traditional hash values.\
    \ Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html\
    \ .\n\ntype: keyword\n\nexample: 0c6803c4e922103c4dca5963aad36ddf\n\n**`threat.enrichments.indicator.file.pe.original_file_name`**\
    \ :   Internal name of the file, provided at compile-time.\n\ntype: keyword\n\n\
    example: MSPAINT.EXE\n\n**`threat.enrichments.indicator.file.pe.product`** : \
    \  Internal product name of the file, provided at compile-time.\n\ntype: keyword\n\
    \nexample: Microsoft\xAE Windows\xAE Operating System\n\n**`threat.enrichments.indicator.file.size`**\
    \ :   File size i..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/892'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '225'
    parent: '210'
    previous: '223'
- node_id: '225'
  node_depth: 2
  node_type: Node
  content_length: 1040
  content: |-
    **`threat.enrichments.indicator.file.target_path`** :   Target path for symlinks.

    type: keyword

    **`threat.enrichments.indicator.file.target_path.text`** :   type: match_only_text

    **`threat.enrichments.indicator.file.type`** :   File type (file, dir, or symlink).

    type: keyword

    example: file

    **`threat.enrichments.indicator.file.uid`** :   The user ID (UID) or security identifier (SID) of the file owner.

    type: keyword

    example: 1001

    **`threat.enrichments.indicator.file.x509.alternative_names`** :   List of subject alternative names (SAN). Name types vary by certificate authority and certificate type but commonly contain IP addresses, DNS names (and wildcards), and email addresses.

    type: keyword

    example: *.elastic.co

    **`threat.enrichments.indicator.file.x509.issuer.common_name`** :   List of common name (CN) of issuing certificate authority.

    type: keyword

    example: Example SHA2 High Assurance Server CA

    **`threat.enrichments.indicator.file.x509.issuer.country`** :   List of cou...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/897'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '226'
    parent: '210'
    previous: '224'
- node_id: '226'
  node_depth: 2
  node_type: Node
  content_length: 1050
  content: |-
    **`threat.enrichments.indicator.file.x509.issuer.distinguished_name`** :   Distinguished name (DN) of issuing certificate authority.

    type: keyword

    example: C=US, O=Example Inc, OU=www.example.com, CN=Example SHA2 High Assurance Server CA

    **`threat.enrichments.indicator.file.x509.issuer.locality`** :   List of locality names (L)

    type: keyword

    example: Mountain View

    **`threat.enrichments.indicator.file.x509.issuer.organization`** :   List of organizations (O) of issuing certificate authority.

    type: keyword

    example: Example Inc

    **`threat.enrichments.indicator.file.x509.issuer.organizational_unit`** :   List of organizational units (OU) of issuing certificate authority.

    type: keyword

    example: www.example.com

    **`threat.enrichments.indicator.file.x509.issuer.state_or_province`** :   List of state or province names (ST, S, or P)

    type: keyword

    example: California

    **`threat.enrichments.indicator.file.x509.not_after`** :   Time at which the certificate is no longer considered vali...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/904'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '227'
    parent: '210'
    previous: '225'
- node_id: '227'
  node_depth: 2
  node_type: Node
  content_length: 1068
  content: |-
    **`threat.enrichments.indicator.file.x509.not_before`** :   Time at which the certificate is first considered valid.

    type: date

    example: 2019-08-16 01:40:25+00:00

    **`threat.enrichments.indicator.file.x509.public_key_algorithm`** :   Algorithm used to generate the public key.

    type: keyword

    example: RSA

    **`threat.enrichments.indicator.file.x509.public_key_curve`** :   The curve used by the elliptic curve public key algorithm. This is algorithm specific.

    type: keyword

    example: nistp521

    **`threat.enrichments.indicator.file.x509.public_key_exponent`** :   Exponent used to derive the public key. This is algorithm specific.

    type: long

    example: 65537

    Field is not indexed.

    **`threat.enrichments.indicator.file.x509.public_key_size`** :   The size of the public key space in bits.

    type: long

    example: 2048

    **`threat.enrichments.indicator.file.x509.serial_number`** :   Unique serial number issued by the certificate authority. For consistency, if this value is alphanumeric, it should ...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/910'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '228'
    parent: '210'
    previous: '226'
- node_id: '228'
  node_depth: 2
  node_type: Node
  content_length: 980
  content: "example: 55FBB9C7DEBF09809D12CCAA\n\n**`threat.enrichments.indicator.file.x509.signature_algorithm`**\
    \ :   Identifier for certificate signature algorithm. We recommend using names\
    \ found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353\
    \ .\n\ntype: keyword\n\nexample: SHA256-RSA\n\n**`threat.enrichments.indicator.file.x509.subject.common_name`**\
    \ :   List of common names (CN) of subject.\n\ntype: keyword\n\nexample: shared.global.example.net\n\
    \n**`threat.enrichments.indicator.file.x509.subject.country`** :   List of country\
    \ \xA9 code\n\ntype: keyword\n\nexample: US\n\n**`threat.enrichments.indicator.file.x509.subject.distinguished_name`**\
    \ :   Distinguished name (DN) of the certificate subject entity.\n\ntype: keyword\n\
    \nexample: C=US, ST=California, L=San Francisco, O=Example, Inc., CN=shared.global.example.net\n\
    \n**`threat.enrichments.indicator.file.x509.subject.locality`** :   List of locality\
    \ names (L)\n\ntype: keyword\n\nexample: San Francisco"
  metadata:
    docling_label: text
    docling_ref: '#/texts/3889'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '229'
    parent: '210'
    previous: '227'
- node_id: '229'
  node_depth: 2
  node_type: Node
  content_length: 1094
  content: "**`threat.enrichments.indicator.file.x509.subject.organization`** :  \
    \ List of organizations (O) of subject.\n\ntype: keyword\n\nexample: Example,\
    \ Inc.\n\n**`threat.enrichments.indicator.file.x509.subject.organizational_unit`**\
    \ :   List of organizational units (OU) of subject.\n\ntype: keyword\n\n**`threat.enrichments.indicator.file.x509.subject.state_or_province`**\
    \ :   List of state or province names (ST, S, or P)\n\ntype: keyword\n\nexample:\
    \ California\n\n**`threat.enrichments.indicator.file.x509.version_number`** :\
    \   Version of x509 format.\n\ntype: keyword\n\nexample: 3\n\n**`threat.enrichments.indicator.first_seen`**\
    \ :   The date and time when intelligence source first reported sighting this\
    \ indicator.\n\ntype: date\n\nexample: 2020-11-05T17:25:47.000Z\n\n**`threat.enrichments.indicator.geo.city_name`**\
    \ :   City name.\n\ntype: keyword\n\nexample: Montreal\n\n**`threat.enrichments.indicator.geo.continent_code`**\
    \ :   Two-letter code representing continent\u2019s name.\n\ntype: keyword\n\n\
    example: NA\n\n**`threat.enrichments.ind..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/921'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '230'
    parent: '210'
    previous: '228'
- node_id: '230'
  node_depth: 2
  node_type: Node
  content_length: 1041
  content: |-
    **`threat.enrichments.indicator.geo.country_iso_code`** :   Country ISO code.

    type: keyword

    example: CA

    **`threat.enrichments.indicator.geo.country_name`** :   Country name.

    type: keyword

    example: Canada

    **`threat.enrichments.indicator.geo.location`** :   Longitude and latitude.

    type: geo_point

    example: { "lon": -73.614830, "lat": 45.505918 }

    **`threat.enrichments.indicator.geo.name`** :   User-defined description of a location, at the level of granularity they care about. Could be the name of their data centers, the floor number, if this describes a local physical entity, city names. Not typically used in automated geolocation.

    type: keyword

    example: boston-dc

    **`threat.enrichments.indicator.geo.postal_code`** :   Postal code associated with the location. Values appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.

    type: keyword

    example: 94040

    **`threat.enrichments.indicator.geo.region_iso_code`** :   Region...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/929'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '231'
    parent: '210'
    previous: '229'
- node_id: '231'
  node_depth: 2
  node_type: Node
  content_length: 1093
  content: |-
    **`threat.enrichments.indicator.geo.region_name`** :   Region name.

    type: keyword

    example: Quebec

    **`threat.enrichments.indicator.geo.timezone`** :   The time zone of the location, such as IANA time zone name.

    type: keyword

    example: America/Argentina/Buenos_Aires

    **`threat.enrichments.indicator.ip`** :   Identifies a threat indicator as an IP address (irrespective of direction).

    type: ip

    example: 1.2.3.4

    **`threat.enrichments.indicator.last_seen`** :   The date and time when intelligence source last reported sighting this indicator.

    type: date

    example: 2020-11-05T17:25:47.000Z

    **`threat.enrichments.indicator.marking.tlp`** :   Traffic Light Protocol sharing markings. Recommended values are: * WHITE * GREEN * AMBER * RED

    type: keyword

    example: White

    **`threat.enrichments.indicator.modified_at`** :   The date and time when intelligence source last modified information for this indicator.

    type: date

    example: 2020-11-05T17:25:47.000Z

    **`threat.enrichments.indicator.port`*...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/935'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '232'
    parent: '210'
    previous: '230'
- node_id: '232'
  node_depth: 2
  node_type: Node
  content_length: 717
  content: "example: 443\n\n**`threat.enrichments.indicator.provider`** :   The name\
    \ of the indicator\u2019s provider.\n\ntype: keyword\n\nexample: lrz_urlhaus\n\
    \n**`threat.enrichments.indicator.reference`** :   Reference URL linking to additional\
    \ information about this indicator.\n\ntype: keyword\n\nexample: https://system.example.com/indicator/0001234\n\
    \n**`threat.enrichments.indicator.registry.data.bytes`** :   Original bytes written\
    \ with base64 encoding. For Windows registry operations, such as SetValueEx and\
    \ RegQueryValueEx, this corresponds to the data pointed by `lp_data` . This is\
    \ optional but provides better recoverability and should be populated for REG_BINARY\
    \ encoded values.\n\ntype: keyword\n\nexample: ZQBuAC0AVQBTAAAAZQBuAAAAAAA="
  metadata:
    docling_label: text
    docling_ref: '#/texts/3994'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '233'
    parent: '210'
    previous: '231'
- node_id: '233'
  node_depth: 2
  node_type: Node
  content_length: 1071
  content: |-
    **`threat.enrichments.indicator.registry.data.strings`** :   Content when writing string types. Populated as an array when writing string data to the registry. For single string registry types (REG_SZ, REG_EXPAND_SZ), this should be an array with one string. For sequences of string with REG_MULTI_SZ, this array will be variable length. For numeric data, such as REG_DWORD and REG_QWORD, this should be populated with the decimal representation (e.g `"1"` ).

    type: wildcard

    example: ["C:\rta\red_ttp\bin\myapp.exe"]

    **`threat.enrichments.indicator.registry.data.type`** :   Standard registry type for encoding contents

    type: keyword

    example: REG_SZ

    **`threat.enrichments.indicator.registry.hive`** :   Abbreviated name for the hive.

    type: keyword

    example: HKLM

    **`threat.enrichments.indicator.registry.key`** :   Hive-relative path of keys.

    type: keyword

    example: SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\winword.exe

    **`threat.enrichments.indicator.regis...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/946'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '234'
    parent: '210'
    previous: '232'
- node_id: '234'
  node_depth: 2
  node_type: Node
  content_length: 900
  content: |-
    example: HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\winword.exe\Debugger

    **`threat.enrichments.indicator.registry.value`** :   Name of the value written.

    type: keyword

    example: Debugger

    **`threat.enrichments.indicator.scanner_stats`** :   Count of AV/EDR vendors that successfully detected malicious file or URL.

    type: long

    example: 4

    **`threat.enrichments.indicator.sightings`** :   Number of times this indicator was observed conducting threat activity.

    type: long

    example: 20

    **`threat.enrichments.indicator.type`** :   Type of indicator as represented by Cyber Observable in STIX 2.0. Recommended values: * autonomous-system * artifact * directory * domain-name * email-addr * file * ipv4-addr * ipv6-addr * mac-addr * mutex * port * process * software * url * user-account * windows-registry-key * x509-certificate

    type: keyword

    example: ipv4-addr
  metadata:
    docling_label: text
    docling_ref: '#/texts/4031'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '235'
    parent: '210'
    previous: '233'
- node_id: '235'
  node_depth: 2
  node_type: Node
  content_length: 921
  content: |-
    **`threat.enrichments.indicator.url.domain`** :   Domain of the url, such as "www.elastic.co". In some cases a URL may refer to an IP and/or port directly, without a domain name. In this case, the IP address would go to the `domain` field. If the URL contains a literal IPv6 address enclosed by `[` and `]` (IETF RFC 2732), the `[` and `]` characters should also be captured in the `domain` field.

    type: keyword

    example: www.elastic.co

    **`threat.enrichments.indicator.url.extension`** :   The field contains the file extension from the original request url, excluding the leading dot. The file extension is only set if it exists, as not every url has a file extension. The leading period must not be included. For example, the value must be "png", not ".png". Note that when the file name has multiple extensions (example.tar.gz), only the last one should be captured ("gz", not "tar.gz").

    type: keyword

    example: png
  metadata:
    docling_label: inline
    docling_ref: '#/groups/955'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '236'
    parent: '210'
    previous: '234'
- node_id: '236'
  node_depth: 2
  node_type: Node
  content_length: 1018
  content: |-
    **`threat.enrichments.indicator.url.fragment`** :   Portion of the url after the `#` , such as "top". The `#` is not part of the fragment.

    type: keyword

    **`threat.enrichments.indicator.url.full`** :   If full URLs are important to your use case, they should be stored in `url.full` , whether this field is reconstructed or present in the event source.

    type: wildcard

    example: https://www.elastic.co:443/search?q=elasticsearch#top

    **`threat.enrichments.indicator.url.full.text`** :   type: match_only_text

    **`threat.enrichments.indicator.url.original`** :   Unmodified original url as seen in the event source. Note that in network monitoring, the observed URL may be a full URL, whereas in access logs, the URL is often just represented as a path. This field is meant to represent the URL as it was observed, complete or not.

    type: wildcard

    example: https://www.elastic.co:443/search?q=elasticsearch#top or /search?q=elasticsearch

    **`threat.enrichments.indicator.url.original.text`** :   typ...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/957'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '237'
    parent: '210'
    previous: '235'
- node_id: '237'
  node_depth: 2
  node_type: Node
  content_length: 715
  content: |-
    **`threat.enrichments.indicator.url.password`** :   Password of the request.

    type: keyword

    **`threat.enrichments.indicator.url.path`** :   Path of the request, such as "/search".

    type: wildcard

    **`threat.enrichments.indicator.url.port`** :   Port of the request, such as 443.

    type: long

    example: 443

    format: string

    **`threat.enrichments.indicator.url.query`** :   The query field describes the query string of the request, such as "q=elasticsearch". The `?` is excluded from the query string. If a URL contains no `?` , there is no query field. If there is a `?` but no query, the query field exists with an empty string. The `exists` query can be used to differentiate between the two cases.

    type: keyword
  metadata:
    docling_label: inline
    docling_ref: '#/groups/964'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '238'
    parent: '210'
    previous: '236'
- node_id: '238'
  node_depth: 2
  node_type: Node
  content_length: 614
  content: |-
    **`threat.enrichments.indicator.url.registered_domain`** :   The highest registered url domain, stripped of the subdomain. For example, the registered domain for "foo.example.com" is "example.com". This value can be determined precisely with a list like the public suffix list ( http://publicsuffix.org ). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".

    type: keyword

    example: example.com

    **`threat.enrichments.indicator.url.scheme`** :   Scheme of the request, such as "https". Note: The `:` is not part of the scheme.

    type: keyword

    example: https
  metadata:
    docling_label: inline
    docling_ref: '#/groups/968'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '239'
    parent: '210'
    previous: '237'
- node_id: '239'
  node_depth: 2
  node_type: Node
  content_length: 613
  content: |-
    **`threat.enrichments.indicator.url.subdomain`** :   The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain. For example the subdomain portion of "www.east.mydomain.co.uk" is "east". If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.

    type: keyword

    example: east
  metadata:
    docling_label: inline
    docling_ref: '#/groups/970'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '240'
    parent: '210'
    previous: '238'
- node_id: '240'
  node_depth: 2
  node_type: Node
  content_length: 1047
  content: |-
    **`threat.enrichments.indicator.url.top_level_domain`** :   The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com". This value can be determined precisely with a list like the public suffix list ( http://publicsuffix.org ). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".

    type: keyword

    example: co.uk

    **`threat.enrichments.indicator.url.username`** :   Username of the request.

    type: keyword

    **`threat.enrichments.indicator.x509.alternative_names`** :   List of subject alternative names (SAN). Name types vary by certificate authority and certificate type but commonly contain IP addresses, DNS names (and wildcards), and email addresses.

    type: keyword

    example: *.elastic.co

    **`threat.enrichments.indicator.x509.issuer.common_name`** :   List of common name (CN) of issuing certificate authority.

    type: keyword
    ...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/971'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '241'
    parent: '210'
    previous: '239'
- node_id: '241'
  node_depth: 2
  node_type: Node
  content_length: 1096
  content: "**`threat.enrichments.indicator.x509.issuer.country`** :   List of country\
    \ \xA9 codes\n\ntype: keyword\n\nexample: US\n\n**`threat.enrichments.indicator.x509.issuer.distinguished_name`**\
    \ :   Distinguished name (DN) of issuing certificate authority.\n\ntype: keyword\n\
    \nexample: C=US, O=Example Inc, OU=www.example.com, CN=Example SHA2 High Assurance\
    \ Server CA\n\n**`threat.enrichments.indicator.x509.issuer.locality`** :   List\
    \ of locality names (L)\n\ntype: keyword\n\nexample: Mountain View\n\n**`threat.enrichments.indicator.x509.issuer.organization`**\
    \ :   List of organizations (O) of issuing certificate authority.\n\ntype: keyword\n\
    \nexample: Example Inc\n\n**`threat.enrichments.indicator.x509.issuer.organizational_unit`**\
    \ :   List of organizational units (OU) of issuing certificate authority.\n\n\
    type: keyword\n\nexample: www.example.com\n\n**`threat.enrichments.indicator.x509.issuer.state_or_province`**\
    \ :   List of state or province names (ST, S, or P)\n\ntype: keyword\n\nexample:\
    \ California\n\n**`threat.enrichments.indicato..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/975'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '242'
    parent: '210'
    previous: '240'
- node_id: '242'
  node_depth: 2
  node_type: Node
  content_length: 1074
  content: |-
    example: 2020-07-16 03:15:39+00:00

    **`threat.enrichments.indicator.x509.not_before`** :   Time at which the certificate is first considered valid.

    type: date

    example: 2019-08-16 01:40:25+00:00

    **`threat.enrichments.indicator.x509.public_key_algorithm`** :   Algorithm used to generate the public key.

    type: keyword

    example: RSA

    **`threat.enrichments.indicator.x509.public_key_curve`** :   The curve used by the elliptic curve public key algorithm. This is algorithm specific.

    type: keyword

    example: nistp521

    **`threat.enrichments.indicator.x509.public_key_exponent`** :   Exponent used to derive the public key. This is algorithm specific.

    type: long

    example: 65537

    Field is not indexed.

    **`threat.enrichments.indicator.x509.public_key_size`** :   The size of the public key space in bits.

    type: long

    example: 2048

    **`threat.enrichments.indicator.x509.serial_number`** :   Unique serial number issued by the certificate authority. For consistency, if this value is alphanumeric, it s...
  metadata:
    docling_label: text
    docling_ref: '#/texts/4174'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '243'
    parent: '210'
    previous: '241'
- node_id: '243'
  node_depth: 2
  node_type: Node
  content_length: 1074
  content: "example: 55FBB9C7DEBF09809D12CCAA\n\n**`threat.enrichments.indicator.x509.signature_algorithm`**\
    \ :   Identifier for certificate signature algorithm. We recommend using names\
    \ found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353\
    \ .\n\ntype: keyword\n\nexample: SHA256-RSA\n\n**`threat.enrichments.indicator.x509.subject.common_name`**\
    \ :   List of common names (CN) of subject.\n\ntype: keyword\n\nexample: shared.global.example.net\n\
    \n**`threat.enrichments.indicator.x509.subject.country`** :   List of country\
    \ \xA9 code\n\ntype: keyword\n\nexample: US\n\n**`threat.enrichments.indicator.x509.subject.distinguished_name`**\
    \ :   Distinguished name (DN) of the certificate subject entity.\n\ntype: keyword\n\
    \nexample: C=US, ST=California, L=San Francisco, O=Example, Inc., CN=shared.global.example.net\n\
    \n**`threat.enrichments.indicator.x509.subject.locality`** :   List of locality\
    \ names (L)\n\ntype: keyword\n\nexample: San Francisco\n\n**`threat.enrichments.indicator.x509.subjec..."
  metadata:
    docling_label: text
    docling_ref: '#/texts/4199'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '244'
    parent: '210'
    previous: '242'
- node_id: '244'
  node_depth: 2
  node_type: Node
  content_length: 1091
  content: |-
    example: Example, Inc.

    **`threat.enrichments.indicator.x509.subject.organizational_unit`** :   List of organizational units (OU) of subject.

    type: keyword

    **`threat.enrichments.indicator.x509.subject.state_or_province`** :   List of state or province names (ST, S, or P)

    type: keyword

    example: California

    **`threat.enrichments.indicator.x509.version_number`** :   Version of x509 format.

    type: keyword

    example: 3

    **`threat.enrichments.matched.atomic`** :   Identifies the atomic indicator value that matched a local environment endpoint or network event.

    type: keyword

    example: bad-domain.com

    **`threat.enrichments.matched.field`** :   Identifies the field of the atomic indicator that matched a local environment endpoint or network event.

    type: keyword

    example: file.hash.sha256

    **`threat.enrichments.matched.id`** :   Identifies the _id of the indicator document enriching the event.

    type: keyword

    example: ff93aee5-86a1-4a61-b0e6-0cdc313d01b5

    **`threat.enrichments.matched.index...
  metadata:
    docling_label: text
    docling_ref: '#/texts/4225'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '245'
    parent: '210'
    previous: '243'
- node_id: '245'
  node_depth: 2
  node_type: Node
  content_length: 1039
  content: "example: filebeat-8.0.0-2021.05.23-000011\n\n**`threat.enrichments.matched.type`**\
    \ :   Identifies the type of match that caused the event to be enriched with the\
    \ given indicator\n\ntype: keyword\n\nexample: indicator_match_rule\n\n**`threat.framework`**\
    \ :   Name of the threat framework used to further categorize and classify the\
    \ tactic and technique of the reported threat. Framework classification can be\
    \ provided by detecting systems, evaluated at ingest time, or retrospectively\
    \ tagged to events.\n\ntype: keyword\n\nexample: MITRE ATT&CK\n\n**`threat.group.alias`**\
    \ :   The alias(es) of the group for a set of related intrusion activity that\
    \ are tracked by a common name in the security community. While not required,\
    \ you can use a MITRE ATT&CK\xAE group alias(es).\n\ntype: keyword\n\nexample:\
    \ [ \"Magecart Group 6\" ]\n\n**`threat.group.id`** :   The id of the group for\
    \ a set of related intrusion activity that are tracked by a common name in the\
    \ security community. While not required, you can use a MITRE ATT&CK\xAE g..."
  metadata:
    docling_label: text
    docling_ref: '#/texts/4252'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '246'
    parent: '210'
    previous: '244'
- node_id: '246'
  node_depth: 2
  node_type: Node
  content_length: 920
  content: "**`threat.group.name`** :   The name of the group for a set of related\
    \ intrusion activity that are tracked by a common name in the security community.\
    \ While not required, you can use a MITRE ATT&CK\xAE group name.\n\ntype: keyword\n\
    \nexample: FIN6\n\n**`threat.group.reference`** :   The reference URL of the group\
    \ for a set of related intrusion activity that are tracked by a common name in\
    \ the security community. While not required, you can use a MITRE ATT&CK\xAE group\
    \ reference URL.\n\ntype: keyword\n\nexample: https://attack.mitre.org/groups/G0037/\n\
    \n**`threat.indicator.as.number`** :   Unique number allocated to the autonomous\
    \ system. The autonomous system number (ASN) uniquely identifies each network\
    \ on the Internet.\n\ntype: long\n\nexample: 15169\n\n**`threat.indicator.as.organization.name`**\
    \ :   Organization name.\n\ntype: keyword\n\nexample: Google LLC\n\n**`threat.indicator.as.organization.name.text`**\
    \ :   type: match_only_text"
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1005'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '247'
    parent: '210'
    previous: '245'
- node_id: '247'
  node_depth: 2
  node_type: Node
  content_length: 813
  content: "**`threat.indicator.confidence`** :   Identifies\_the\_vendor-neutral\
    \ confidence\_rating\_using\_the None/Low/Medium/High\_scale defined in Appendix\
    \ A of the STIX 2.1 framework. Vendor-specific confidence scales may be added\
    \ as custom fields. Expected values are: * Not Specified * None * Low * Medium\
    \ * High\n\ntype: keyword\n\nexample: Medium\n\n**`threat.indicator.description`**\
    \ :   Describes the type of action conducted by the threat.\n\ntype: keyword\n\
    \nexample: IP x.x.x.x was observed delivering the Angler EK.\n\n**`threat.indicator.email.address`**\
    \ :   Identifies a threat indicator as an email address (irrespective of direction).\n\
    \ntype: keyword\n\nexample: `phish@example.com`\n\n**`threat.indicator.file.accessed`**\
    \ :   Last time the file was accessed. Note that not all filesystems keep track\
    \ of access time.\n\ntype: date"
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1011'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '248'
    parent: '210'
    previous: '246'
- node_id: '248'
  node_depth: 2
  node_type: Node
  content_length: 990
  content: "**`threat.indicator.file.attributes`** :   Array of file attributes. Attributes\
    \ names will vary by platform. Here\u2019s a non-exhaustive list of values that\
    \ are expected in this field: archive, compressed, directory, encrypted, execute,\
    \ hidden, read, readonly, system, write.\n\ntype: keyword\n\nexample: [\"readonly\"\
    , \"system\"]\n\n**`threat.indicator.file.code_signature.digest_algorithm`** :\
    \   The hashing algorithm used to sign the process. This value can distinguish\
    \ signatures when a file is signed multiple times by the same signer but with\
    \ a different digest algorithm.\n\ntype: keyword\n\nexample: sha256\n\n**`threat.indicator.file.code_signature.exists`**\
    \ :   Boolean to capture if a signature is present.\n\ntype: boolean\n\nexample:\
    \ true\n\n**`threat.indicator.file.code_signature.signing_id`** :   The identifier\
    \ used to sign the process. This is used to identify the application manufactured\
    \ by a software vendor. The field is relevant to Apple *OS only.\n\ntype: keyword\n\
    \nexample: com.apple.xpc.proxy"
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1016'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '249'
    parent: '210'
    previous: '247'
- node_id: '249'
  node_depth: 2
  node_type: Node
  content_length: 875
  content: |-
    **`threat.indicator.file.code_signature.status`** :   Additional information about the certificate status. This is useful for logging cryptographic errors with the certificate validity or trust status. Leave unpopulated if the validity or trust of the certificate was unchecked.

    type: keyword

    example: ERROR_UNTRUSTED_ROOT

    **`threat.indicator.file.code_signature.subject_name`** :   Subject name of the code signer

    type: keyword

    example: Microsoft Corporation

    **`threat.indicator.file.code_signature.team_id`** :   The team identifier used to sign the process. This is used to identify the team or vendor of a software product. The field is relevant to Apple *OS only.

    type: keyword

    example: EQHXZ8M8AV

    **`threat.indicator.file.code_signature.timestamp`** :   Date and time when the code signature was generated and signed.

    type: date

    example: 2021-01-01T12:10:30Z
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1020'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '250'
    parent: '210'
    previous: '248'
- node_id: '250'
  node_depth: 2
  node_type: Node
  content_length: 996
  content: |-
    **`threat.indicator.file.code_signature.trusted`** :   Stores the trust status of the certificate chain. Validating the trust of the certificate chain may be complicated, and this field should only be populated by tools that actively check the status.

    type: boolean

    example: true

    **`threat.indicator.file.code_signature.valid`** :   Boolean to capture if the digital signature is verified against the binary content. Leave unpopulated if a certificate was unchecked.

    type: boolean

    example: true

    **`threat.indicator.file.created`** :   File creation time. Note that not all filesystems store the creation time.

    type: date

    **`threat.indicator.file.ctime`** :   Last time the file attributes or metadata changed. Note that changes to the file content will update `mtime` . This implies `ctime` will be adjusted at the same time, since `mtime` is an attribute of the file.

    type: date

    **`threat.indicator.file.device`** :   Device that is the source of the file.

    type: keyword

    example: sda
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1024'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '251'
    parent: '210'
    previous: '249'
- node_id: '251'
  node_depth: 2
  node_type: Node
  content_length: 1017
  content: "**`threat.indicator.file.directory`** :   Directory where the file is\
    \ located. It should include the drive letter, when appropriate.\n\ntype: keyword\n\
    \nexample: /home/alice\n\n**`threat.indicator.file.drive_letter`** :   Drive letter\
    \ where the file is located. This field is only relevant on Windows. The value\
    \ should be uppercase, and not include the colon.\n\ntype: keyword\n\nexample:\
    \ C\n\n**`threat.indicator.file.elf.architecture`** :   Machine architecture of\
    \ the ELF file.\n\ntype: keyword\n\nexample: x86-64\n\n**`threat.indicator.file.elf.byte_order`**\
    \ :   Byte sequence of ELF file.\n\ntype: keyword\n\nexample: Little Endian\n\n\
    **`threat.indicator.file.elf.cpu_type`** :   CPU type of the ELF file.\n\ntype:\
    \ keyword\n\nexample: Intel\n\n**`threat.indicator.file.elf.creation_date`** :\
    \   Extracted when possible from the file\u2019s metadata. Indicates when it was\
    \ built or compiled. It can also be faked by malware creators.\n\ntype: date\n\
    \n**`threat.indicator.file.elf.exports`** :   List of exported element names and\
    \ types...."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1029'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '252'
    parent: '210'
    previous: '250'
- node_id: '252'
  node_depth: 2
  node_type: Node
  content_length: 944
  content: |-
    **`threat.indicator.file.elf.header.abi_version`** :   Version of the ELF Application Binary Interface (ABI).

    type: keyword

    **`threat.indicator.file.elf.header.class`** :   Header class of the ELF file.

    type: keyword

    **`threat.indicator.file.elf.header.data`** :   Data table of the ELF header.

    type: keyword

    **`threat.indicator.file.elf.header.entrypoint`** :   Header entrypoint of the ELF file.

    type: long

    format: string

    **`threat.indicator.file.elf.header.object_version`** :   "0x1" for original ELF files.

    type: keyword

    **`threat.indicator.file.elf.header.os_abi`** :   Application Binary Interface (ABI) of the Linux OS.

    type: keyword

    **`threat.indicator.file.elf.header.type`** :   Header type of the ELF file.

    type: keyword

    **`threat.indicator.file.elf.header.version`** :   Version of the ELF header.

    type: keyword

    **`threat.indicator.file.elf.imports`** :   List of imported element names and types.

    type: flattened
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1036'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '253'
    parent: '210'
    previous: '251'
- node_id: '253'
  node_depth: 2
  node_type: Node
  content_length: 1084
  content: |-
    **`threat.indicator.file.elf.sections`** :   An array containing an object for each section of the ELF file. The keys that should be present in these objects are defined by sub-fields underneath `elf.sections.*` .

    type: nested

    **`threat.indicator.file.elf.sections.chi2`** :   Chi-square probability distribution of the section.

    type: long

    format: number

    **`threat.indicator.file.elf.sections.entropy`** :   Shannon entropy calculation from the section.

    type: long

    format: number

    **`threat.indicator.file.elf.sections.flags`** :   ELF Section List flags.

    type: keyword

    **`threat.indicator.file.elf.sections.name`** :   ELF Section List name.

    type: keyword

    **`threat.indicator.file.elf.sections.physical_offset`** :   ELF Section List offset.

    type: keyword

    **`threat.indicator.file.elf.sections.physical_size`** :   ELF Section List physical size.

    type: long

    format: bytes

    **`threat.indicator.file.elf.sections.type`** :   ELF Section List type.

    type: keyword

    **`threat.indicator.fi...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1045'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '254'
    parent: '210'
    previous: '252'
- node_id: '254'
  node_depth: 2
  node_type: Node
  content_length: 1011
  content: |-
    format: string

    **`threat.indicator.file.elf.sections.virtual_size`** :   ELF Section List virtual size.

    type: long

    format: string

    **`threat.indicator.file.elf.segments`** :   An array containing an object for each segment of the ELF file. The keys that should be present in these objects are defined by sub-fields underneath `elf.segments.*` .

    type: nested

    **`threat.indicator.file.elf.segments.sections`** :   ELF object segment sections.

    type: keyword

    **`threat.indicator.file.elf.segments.type`** :   ELF object segment type.

    type: keyword

    **`threat.indicator.file.elf.shared_libraries`** :   List of shared libraries used by this ELF object.

    type: keyword

    **`threat.indicator.file.elf.telfhash`** :   telfhash symbol hash for ELF file.

    type: keyword

    **`threat.indicator.file.extension`** :   File extension, excluding the leading dot. Note that when the file name has multiple extensions (example.tar.gz), only the last one should be captured ("gz", not "tar.gz").

    type: keyword

    e...
  metadata:
    docling_label: text
    docling_ref: '#/texts/4446'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '255'
    parent: '210'
    previous: '253'
- node_id: '255'
  node_depth: 2
  node_type: Node
  content_length: 1049
  content: |-
    **`threat.indicator.file.fork_name`** :   A fork is additional data associated with a filesystem object. On Linux, a resource fork is used to store additional data with a filesystem object. A file always has at least one fork for the data portion, and additional forks may exist. On NTFS, this is analogous to an Alternate Data Stream (ADS), and the default data stream for a file is just called $DATA. Zone.Identifier is commonly used by Windows to track contents downloaded from the Internet. An ADS is typically of the form: `C:\path\to\filename.extension:some_fork_name` , and `some_fork_name` is the value that should populate `fork_name` . `filename.extension` should populate `file.name` , and `extension` should populate `file.extension` . The full path, `file.path` , will include the fork name.

    type: keyword

    example: Zone.Identifer

    **`threat.indicator.file.gid`** :   Primary group ID (GID) of the file.

    type: keyword

    example: 1001

    **`threat.indicator.file.group`** :   Primary group...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1061'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '256'
    parent: '210'
    previous: '254'
- node_id: '256'
  node_depth: 2
  node_type: Node
  content_length: 1061
  content: |-
    **`threat.indicator.file.hash.md5`** :   MD5 hash.

    type: keyword

    **`threat.indicator.file.hash.sha1`** :   SHA1 hash.

    type: keyword

    **`threat.indicator.file.hash.sha256`** :   SHA256 hash.

    type: keyword

    **`threat.indicator.file.hash.sha512`** :   SHA512 hash.

    type: keyword

    **`threat.indicator.file.hash.ssdeep`** :   SSDEEP hash.

    type: keyword

    **`threat.indicator.file.inode`** :   Inode representing the file in the filesystem.

    type: keyword

    example: 256383

    **`threat.indicator.file.mime_type`** :   MIME type should identify the format of the file or stream of bytes using IANA official types , where possible. When more than one type is applicable, the most specific type should be used.

    type: keyword

    **`threat.indicator.file.mode`** :   Mode of the file in octal representation.

    type: keyword

    example: 0640

    **`threat.indicator.file.mtime`** :   Last time the file content was modified.

    type: date

    **`threat.indicator.file.name`** :   Name of the file including the extension...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1064'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '257'
    parent: '210'
    previous: '255'
- node_id: '257'
  node_depth: 2
  node_type: Node
  content_length: 897
  content: "**`threat.indicator.file.owner`** :   File owner\u2019s username.\n\n\
    type: keyword\n\nexample: alice\n\n**`threat.indicator.file.path`** :   Full path\
    \ to the file, including the file name. It should include the drive letter, when\
    \ appropriate.\n\ntype: keyword\n\nexample: /home/alice/example.png\n\n**`threat.indicator.file.path.text`**\
    \ :   type: match_only_text\n\n**`threat.indicator.file.pe.architecture`** : \
    \  CPU architecture target for the file.\n\ntype: keyword\n\nexample: x64\n\n\
    **`threat.indicator.file.pe.company`** :   Internal company name of the file,\
    \ provided at compile-time.\n\ntype: keyword\n\nexample: Microsoft Corporation\n\
    \n**`threat.indicator.file.pe.description`** :   Internal description of the file,\
    \ provided at compile-time.\n\ntype: keyword\n\nexample: Paint\n\n**`threat.indicator.file.pe.file_version`**\
    \ :   Internal version of the file, provided at compile-time.\n\ntype: keyword\n\
    \nexample: 6.3.9600.17415"
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1074'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '258'
    parent: '210'
    previous: '256'
- node_id: '258'
  node_depth: 2
  node_type: Node
  content_length: 1031
  content: "**`threat.indicator.file.pe.imphash`** :   A hash of the imports in a\
    \ PE file. An imphash\u2009\u2014\u2009or import hash\u2009\u2014\u2009can be\
    \ used to fingerprint binaries even after recompilation or other code-level transformations\
    \ have occurred, which would change more traditional hash values. Learn more at\
    \ https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html\
    \ .\n\ntype: keyword\n\nexample: 0c6803c4e922103c4dca5963aad36ddf\n\n**`threat.indicator.file.pe.original_file_name`**\
    \ :   Internal name of the file, provided at compile-time.\n\ntype: keyword\n\n\
    example: MSPAINT.EXE\n\n**`threat.indicator.file.pe.product`** :   Internal product\
    \ name of the file, provided at compile-time.\n\ntype: keyword\n\nexample: Microsoft\xAE\
    \ Windows\xAE Operating System\n\n**`threat.indicator.file.size`** :   File size\
    \ in bytes. Only relevant when `file.type` is \"file\".\n\ntype: long\n\nexample:\
    \ 16384\n\n**`threat.indicator.file.target_path`** :   Target path for symlinks.\n\
    \ntype: keyword\n\n**`threat.indicator.file.target_path.te..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1081'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '259'
    parent: '210'
    previous: '257'
- node_id: '259'
  node_depth: 2
  node_type: Node
  content_length: 1027
  content: "**`threat.indicator.file.type`** :   File type (file, dir, or symlink).\n\
    \ntype: keyword\n\nexample: file\n\n**`threat.indicator.file.uid`** :   The user\
    \ ID (UID) or security identifier (SID) of the file owner.\n\ntype: keyword\n\n\
    example: 1001\n\n**`threat.indicator.file.x509.alternative_names`** :   List of\
    \ subject alternative names (SAN). Name types vary by certificate authority and\
    \ certificate type but commonly contain IP addresses, DNS names (and wildcards),\
    \ and email addresses.\n\ntype: keyword\n\nexample: *.elastic.co\n\n**`threat.indicator.file.x509.issuer.common_name`**\
    \ :   List of common name (CN) of issuing certificate authority.\n\ntype: keyword\n\
    \nexample: Example SHA2 High Assurance Server CA\n\n**`threat.indicator.file.x509.issuer.country`**\
    \ :   List of country \xA9 codes\n\ntype: keyword\n\nexample: US\n\n**`threat.indicator.file.x509.issuer.distinguished_name`**\
    \ :   Distinguished name (DN) of issuing certificate authority.\n\ntype: keyword\n\
    \nexample: C=US, O=Example Inc, OU=www.example.com, CN=Example SH..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1087'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '260'
    parent: '210'
    previous: '258'
- node_id: '260'
  node_depth: 2
  node_type: Node
  content_length: 1034
  content: |-
    **`threat.indicator.file.x509.issuer.locality`** :   List of locality names (L)

    type: keyword

    example: Mountain View

    **`threat.indicator.file.x509.issuer.organization`** :   List of organizations (O) of issuing certificate authority.

    type: keyword

    example: Example Inc

    **`threat.indicator.file.x509.issuer.organizational_unit`** :   List of organizational units (OU) of issuing certificate authority.

    type: keyword

    example: www.example.com

    **`threat.indicator.file.x509.issuer.state_or_province`** :   List of state or province names (ST, S, or P)

    type: keyword

    example: California

    **`threat.indicator.file.x509.not_after`** :   Time at which the certificate is no longer considered valid.

    type: date

    example: 2020-07-16 03:15:39+00:00

    **`threat.indicator.file.x509.not_before`** :   Time at which the certificate is first considered valid.

    type: date

    example: 2019-08-16 01:40:25+00:00

    **`threat.indicator.file.x509.public_key_algorithm`** :   Algorithm used to generate the public...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1093'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '261'
    parent: '210'
    previous: '259'
- node_id: '261'
  node_depth: 2
  node_type: Node
  content_length: 1027
  content: |-
    **`threat.indicator.file.x509.public_key_curve`** :   The curve used by the elliptic curve public key algorithm. This is algorithm specific.

    type: keyword

    example: nistp521

    **`threat.indicator.file.x509.public_key_exponent`** :   Exponent used to derive the public key. This is algorithm specific.

    type: long

    example: 65537

    Field is not indexed.

    **`threat.indicator.file.x509.public_key_size`** :   The size of the public key space in bits.

    type: long

    example: 2048

    **`threat.indicator.file.x509.serial_number`** :   Unique serial number issued by the certificate authority. For consistency, if this value is alphanumeric, it should be formatted without colons and uppercase characters.

    type: keyword

    example: 55FBB9C7DEBF09809D12CCAA

    **`threat.indicator.file.x509.signature_algorithm`** :   Identifier for certificate signature algorithm. We recommend using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353 .

    type: k...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1100'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '262'
    parent: '210'
    previous: '260'
- node_id: '262'
  node_depth: 2
  node_type: Node
  content_length: 1090
  content: "**`threat.indicator.file.x509.subject.common_name`** :   List of common\
    \ names (CN) of subject.\n\ntype: keyword\n\nexample: shared.global.example.net\n\
    \n**`threat.indicator.file.x509.subject.country`** :   List of country \xA9 code\n\
    \ntype: keyword\n\nexample: US\n\n**`threat.indicator.file.x509.subject.distinguished_name`**\
    \ :   Distinguished name (DN) of the certificate subject entity.\n\ntype: keyword\n\
    \nexample: C=US, ST=California, L=San Francisco, O=Example, Inc., CN=shared.global.example.net\n\
    \n**`threat.indicator.file.x509.subject.locality`** :   List of locality names\
    \ (L)\n\ntype: keyword\n\nexample: San Francisco\n\n**`threat.indicator.file.x509.subject.organization`**\
    \ :   List of organizations (O) of subject.\n\ntype: keyword\n\nexample: Example,\
    \ Inc.\n\n**`threat.indicator.file.x509.subject.organizational_unit`** :   List\
    \ of organizational units (OU) of subject.\n\ntype: keyword\n\n**`threat.indicator.file.x509.subject.state_or_province`**\
    \ :   List of state or province names (ST, S, or P)\n\ntype: keyword\n\nexampl..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1105'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '263'
    parent: '210'
    previous: '261'
- node_id: '263'
  node_depth: 2
  node_type: Node
  content_length: 830
  content: "type: keyword\n\nexample: 3\n\n**`threat.indicator.first_seen`** :   The\
    \ date and time when intelligence source first reported sighting this indicator.\n\
    \ntype: date\n\nexample: 2020-11-05T17:25:47.000Z\n\n**`threat.indicator.geo.city_name`**\
    \ :   City name.\n\ntype: keyword\n\nexample: Montreal\n\n**`threat.indicator.geo.continent_code`**\
    \ :   Two-letter code representing continent\u2019s name.\n\ntype: keyword\n\n\
    example: NA\n\n**`threat.indicator.geo.continent_name`** :   Name of the continent.\n\
    \ntype: keyword\n\nexample: North America\n\n**`threat.indicator.geo.country_iso_code`**\
    \ :   Country ISO code.\n\ntype: keyword\n\nexample: CA\n\n**`threat.indicator.geo.country_name`**\
    \ :   Country name.\n\ntype: keyword\n\nexample: Canada\n\n**`threat.indicator.geo.location`**\
    \ :   Longitude and latitude.\n\ntype: geo_point\n\nexample: { \"lon\": -73.614830,\
    \ \"lat\": 45.505918 }"
  metadata:
    docling_label: text
    docling_ref: '#/texts/4690'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '264'
    parent: '210'
    previous: '262'
- node_id: '264'
  node_depth: 2
  node_type: Node
  content_length: 1032
  content: |-
    **`threat.indicator.geo.name`** :   User-defined description of a location, at the level of granularity they care about. Could be the name of their data centers, the floor number, if this describes a local physical entity, city names. Not typically used in automated geolocation.

    type: keyword

    example: boston-dc

    **`threat.indicator.geo.postal_code`** :   Postal code associated with the location. Values appropriate for this field may also be known as a postcode or ZIP code and will vary widely from country to country.

    type: keyword

    example: 94040

    **`threat.indicator.geo.region_iso_code`** :   Region ISO code.

    type: keyword

    example: CA-QC

    **`threat.indicator.geo.region_name`** :   Region name.

    type: keyword

    example: Quebec

    **`threat.indicator.geo.timezone`** :   The time zone of the location, such as IANA time zone name.

    type: keyword

    example: America/Argentina/Buenos_Aires

    **`threat.indicator.ip`** :   Identifies a threat indicator as an IP address (irrespective of directi...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1120'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '265'
    parent: '210'
    previous: '263'
- node_id: '265'
  node_depth: 2
  node_type: Node
  content_length: 932
  content: "**`threat.indicator.last_seen`** :   The date and time when intelligence\
    \ source last reported sighting this indicator.\n\ntype: date\n\nexample: 2020-11-05T17:25:47.000Z\n\
    \n**`threat.indicator.marking.tlp`** :   Traffic Light Protocol sharing markings.\
    \ Recommended values are: * WHITE * GREEN * AMBER * RED\n\ntype: keyword\n\nexample:\
    \ WHITE\n\n**`threat.indicator.modified_at`** :   The date and time when intelligence\
    \ source last modified information for this indicator.\n\ntype: date\n\nexample:\
    \ 2020-11-05T17:25:47.000Z\n\n**`threat.indicator.port`** :   Identifies a threat\
    \ indicator as a port number (irrespective of direction).\n\ntype: long\n\nexample:\
    \ 443\n\n**`threat.indicator.provider`** :   The name of the indicator\u2019s\
    \ provider.\n\ntype: keyword\n\nexample: lrz_urlhaus\n\n**`threat.indicator.reference`**\
    \ :   Reference URL linking to additional information about this indicator.\n\n\
    type: keyword\n\nexample: https://system.example.com/indicator/0001234"
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1126'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '266'
    parent: '210'
    previous: '264'
- node_id: '266'
  node_depth: 2
  node_type: Node
  content_length: 1009
  content: |-
    **`threat.indicator.registry.data.bytes`** :   Original bytes written with base64 encoding. For Windows registry operations, such as SetValueEx and RegQueryValueEx, this corresponds to the data pointed by `lp_data` . This is optional but provides better recoverability and should be populated for REG_BINARY encoded values.

    type: keyword

    example: ZQBuAC0AVQBTAAAAZQBuAAAAAAA=

    **`threat.indicator.registry.data.strings`** :   Content when writing string types. Populated as an array when writing string data to the registry. For single string registry types (REG_SZ, REG_EXPAND_SZ), this should be an array with one string. For sequences of string with REG_MULTI_SZ, this array will be variable length. For numeric data, such as REG_DWORD and REG_QWORD, this should be populated with the decimal representation (e.g `"1"` ).

    type: wildcard

    example: ["C:\rta\red_ttp\bin\myapp.exe"]

    **`threat.indicator.registry.data.type`** :   Standard registry type for encoding contents

    type: keyword

    exampl...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1133'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '267'
    parent: '210'
    previous: '265'
- node_id: '267'
  node_depth: 2
  node_type: Node
  content_length: 868
  content: |-
    **`threat.indicator.registry.hive`** :   Abbreviated name for the hive.

    type: keyword

    example: HKLM

    **`threat.indicator.registry.key`** :   Hive-relative path of keys.

    type: keyword

    example: SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\winword.exe

    **`threat.indicator.registry.path`** :   Full path, including hive, key and value

    type: keyword

    example: HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\winword.exe\Debugger

    **`threat.indicator.registry.value`** :   Name of the value written.

    type: keyword

    example: Debugger

    **`threat.indicator.scanner_stats`** :   Count of AV/EDR vendors that successfully detected malicious file or URL.

    type: long

    example: 4

    **`threat.indicator.sightings`** :   Number of times this indicator was observed conducting threat activity.

    type: long

    example: 20
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1136'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '268'
    parent: '210'
    previous: '266'
- node_id: '268'
  node_depth: 2
  node_type: Node
  content_length: 790
  content: |-
    **`threat.indicator.type`** :   Type of indicator as represented by Cyber Observable in STIX 2.0. Recommended values: * autonomous-system * artifact * directory * domain-name * email-addr * file * ipv4-addr * ipv6-addr * mac-addr * mutex * port * process * software * url * user-account * windows-registry-key * x509-certificate

    type: keyword

    example: ipv4-addr

    **`threat.indicator.url.domain`** :   Domain of the url, such as "www.elastic.co". In some cases a URL may refer to an IP and/or port directly, without a domain name. In this case, the IP address would go to the `domain` field. If the URL contains a literal IPv6 address enclosed by `[` and `]` (IETF RFC 2732), the `[` and `]` characters should also be captured in the `domain` field.

    type: keyword

    example: www.elastic.co
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1142'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '269'
    parent: '210'
    previous: '267'
- node_id: '269'
  node_depth: 2
  node_type: Node
  content_length: 945
  content: |-
    **`threat.indicator.url.extension`** :   The field contains the file extension from the original request url, excluding the leading dot. The file extension is only set if it exists, as not every url has a file extension. The leading period must not be included. For example, the value must be "png", not ".png". Note that when the file name has multiple extensions (example.tar.gz), only the last one should be captured ("gz", not "tar.gz").

    type: keyword

    example: png

    **`threat.indicator.url.fragment`** :   Portion of the url after the `#` , such as "top". The `#` is not part of the fragment.

    type: keyword

    **`threat.indicator.url.full`** :   If full URLs are important to your use case, they should be stored in `url.full` , whether this field is reconstructed or present in the event source.

    type: wildcard

    example: https://www.elastic.co:443/search?q=elasticsearch#top

    **`threat.indicator.url.full.text`** :   type: match_only_text
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1144'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '270'
    parent: '210'
    previous: '268'
- node_id: '270'
  node_depth: 2
  node_type: Node
  content_length: 770
  content: |-
    **`threat.indicator.url.original`** :   Unmodified original url as seen in the event source. Note that in network monitoring, the observed URL may be a full URL, whereas in access logs, the URL is often just represented as a path. This field is meant to represent the URL as it was observed, complete or not.

    type: wildcard

    example: https://www.elastic.co:443/search?q=elasticsearch#top or /search?q=elasticsearch

    **`threat.indicator.url.original.text`** :   type: match_only_text

    **`threat.indicator.url.password`** :   Password of the request.

    type: keyword

    **`threat.indicator.url.path`** :   Path of the request, such as "/search".

    type: wildcard

    **`threat.indicator.url.port`** :   Port of the request, such as 443.

    type: long

    example: 443

    format: string
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1149'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '271'
    parent: '210'
    previous: '269'
- node_id: '271'
  node_depth: 2
  node_type: Node
  content_length: 972
  content: |-
    **`threat.indicator.url.query`** :   The query field describes the query string of the request, such as "q=elasticsearch". The `?` is excluded from the query string. If a URL contains no `?` , there is no query field. If there is a `?` but no query, the query field exists with an empty string. The `exists` query can be used to differentiate between the two cases.

    type: keyword

    **`threat.indicator.url.registered_domain`** :   The highest registered url domain, stripped of the subdomain. For example, the registered domain for "foo.example.com" is "example.com". This value can be determined precisely with a list like the public suffix list ( http://publicsuffix.org ). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".

    type: keyword

    example: example.com

    **`threat.indicator.url.scheme`** :   Scheme of the request, such as "https". Note: The `:` is not part of the scheme.

    type: keyword

    example: https
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1155'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '272'
    parent: '210'
    previous: '270'
- node_id: '272'
  node_depth: 2
  node_type: Node
  content_length: 601
  content: |-
    **`threat.indicator.url.subdomain`** :   The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain. For example the subdomain portion of "www.east.mydomain.co.uk" is "east". If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.

    type: keyword

    example: east
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1158'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '273'
    parent: '210'
    previous: '271'
- node_id: '273'
  node_depth: 2
  node_type: Node
  content_length: 999
  content: |-
    **`threat.indicator.url.top_level_domain`** :   The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com". This value can be determined precisely with a list like the public suffix list ( http://publicsuffix.org ). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "co.uk".

    type: keyword

    example: co.uk

    **`threat.indicator.url.username`** :   Username of the request.

    type: keyword

    **`threat.indicator.x509.alternative_names`** :   List of subject alternative names (SAN). Name types vary by certificate authority and certificate type but commonly contain IP addresses, DNS names (and wildcards), and email addresses.

    type: keyword

    example: *.elastic.co

    **`threat.indicator.x509.issuer.common_name`** :   List of common name (CN) of issuing certificate authority.

    type: keyword

    example: Example SHA2 High Assurance Server CA
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1159'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '274'
    parent: '210'
    previous: '272'
- node_id: '274'
  node_depth: 2
  node_type: Node
  content_length: 1048
  content: "**`threat.indicator.x509.issuer.country`** :   List of country \xA9 codes\n\
    \ntype: keyword\n\nexample: US\n\n**`threat.indicator.x509.issuer.distinguished_name`**\
    \ :   Distinguished name (DN) of issuing certificate authority.\n\ntype: keyword\n\
    \nexample: C=US, O=Example Inc, OU=www.example.com, CN=Example SHA2 High Assurance\
    \ Server CA\n\n**`threat.indicator.x509.issuer.locality`** :   List of locality\
    \ names (L)\n\ntype: keyword\n\nexample: Mountain View\n\n**`threat.indicator.x509.issuer.organization`**\
    \ :   List of organizations (O) of issuing certificate authority.\n\ntype: keyword\n\
    \nexample: Example Inc\n\n**`threat.indicator.x509.issuer.organizational_unit`**\
    \ :   List of organizational units (OU) of issuing certificate authority.\n\n\
    type: keyword\n\nexample: www.example.com\n\n**`threat.indicator.x509.issuer.state_or_province`**\
    \ :   List of state or province names (ST, S, or P)\n\ntype: keyword\n\nexample:\
    \ California\n\n**`threat.indicator.x509.not_after`** :   Time at which the certificate\
    \ is no longer considered valid...."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1163'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '275'
    parent: '210'
    previous: '273'
- node_id: '275'
  node_depth: 2
  node_type: Node
  content_length: 1001
  content: |-
    **`threat.indicator.x509.not_before`** :   Time at which the certificate is first considered valid.

    type: date

    example: 2019-08-16 01:40:25+00:00

    **`threat.indicator.x509.public_key_algorithm`** :   Algorithm used to generate the public key.

    type: keyword

    example: RSA

    **`threat.indicator.x509.public_key_curve`** :   The curve used by the elliptic curve public key algorithm. This is algorithm specific.

    type: keyword

    example: nistp521

    **`threat.indicator.x509.public_key_exponent`** :   Exponent used to derive the public key. This is algorithm specific.

    type: long

    example: 65537

    Field is not indexed.

    **`threat.indicator.x509.public_key_size`** :   The size of the public key space in bits.

    type: long

    example: 2048

    **`threat.indicator.x509.serial_number`** :   Unique serial number issued by the certificate authority. For consistency, if this value is alphanumeric, it should be formatted without colons and uppercase characters.

    type: keyword

    example: 55FBB9C7DEBF09809D12CCA...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1170'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '276'
    parent: '210'
    previous: '274'
- node_id: '276'
  node_depth: 2
  node_type: Node
  content_length: 991
  content: "**`threat.indicator.x509.signature_algorithm`** :   Identifier for certificate\
    \ signature algorithm. We recommend using names found in Go Lang Crypto library.\
    \ See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353\
    \ .\n\ntype: keyword\n\nexample: SHA256-RSA\n\n**`threat.indicator.x509.subject.common_name`**\
    \ :   List of common names (CN) of subject.\n\ntype: keyword\n\nexample: shared.global.example.net\n\
    \n**`threat.indicator.x509.subject.country`** :   List of country \xA9 code\n\n\
    type: keyword\n\nexample: US\n\n**`threat.indicator.x509.subject.distinguished_name`**\
    \ :   Distinguished name (DN) of the certificate subject entity.\n\ntype: keyword\n\
    \nexample: C=US, ST=California, L=San Francisco, O=Example, Inc., CN=shared.global.example.net\n\
    \n**`threat.indicator.x509.subject.locality`** :   List of locality names (L)\n\
    \ntype: keyword\n\nexample: San Francisco\n\n**`threat.indicator.x509.subject.organization`**\
    \ :   List of organizations (O) of subject.\n\ntype: keyword\n\nexample: Example,\
    \ Inc."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1176'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '277'
    parent: '210'
    previous: '275'
- node_id: '277'
  node_depth: 2
  node_type: Node
  content_length: 1080
  content: "**`threat.indicator.x509.subject.organizational_unit`** :   List of organizational\
    \ units (OU) of subject.\n\ntype: keyword\n\n**`threat.indicator.x509.subject.state_or_province`**\
    \ :   List of state or province names (ST, S, or P)\n\ntype: keyword\n\nexample:\
    \ California\n\n**`threat.indicator.x509.version_number`** :   Version of x509\
    \ format.\n\ntype: keyword\n\nexample: 3\n\n**`threat.software.alias`** :   The\
    \ alias(es) of the software for a set of related intrusion activity that are tracked\
    \ by a common name in the security community. While not required, you can use\
    \ a MITRE ATT&CK\xAE associated software description.\n\ntype: keyword\n\nexample:\
    \ [ \"X-Agent\" ]\n\n**`threat.software.id`** :   The id of the software used\
    \ by this threat to conduct behavior commonly modeled using MITRE ATT&CK\xAE.\
    \ While not required, you can use a MITRE ATT&CK\xAE software id.\n\ntype: keyword\n\
    \nexample: S0552\n\n**`threat.software.name`** :   The name of the software used\
    \ by this threat to conduct behavior commonly modeled using MITRE ATT&CK..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1182'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '278'
    parent: '210'
    previous: '276'
- node_id: '278'
  node_depth: 2
  node_type: Node
  content_length: 931
  content: "example: AdFind\n\n**`threat.software.platforms`** :   The platforms of\
    \ the software used by this threat to conduct behavior commonly modeled using\
    \ MITRE ATT&CK\xAE. Recommended Values: * AWS * Azure * Azure AD * GCP * Linux\
    \ * macOS * Network * Office 365 * SaaS * Windows\n\nWhile not required, you can\
    \ use a MITRE ATT&CK\xAE software platforms.\n\ntype: keyword\n\nexample: [ \"\
    Windows\" ]\n\n**`threat.software.reference`** :   The reference URL of the software\
    \ used by this threat to conduct behavior commonly modeled using MITRE ATT&CK\xAE\
    . While not required, you can use a MITRE ATT&CK\xAE software reference URL.\n\
    \ntype: keyword\n\nexample: https://attack.mitre.org/software/S0552/\n\n**`threat.software.type`**\
    \ :   The type of software used by this threat to conduct behavior commonly modeled\
    \ using MITRE ATT&CK\xAE. Recommended values * Malware * Tool\n\n```\nWhile not\
    \ required, you can use a MITRE ATT&CK\xAE software type.\n```\n\ntype: keyword\n\
    \nexample: Tool"
  metadata:
    docling_label: text
    docling_ref: '#/texts/5013'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '279'
    parent: '210'
    previous: '277'
- node_id: '279'
  node_depth: 2
  node_type: Node
  content_length: 1048
  content: "**`threat.tactic.id`** :   The id of tactic used by this threat. You can\
    \ use a MITRE ATT&CK\xAE tactic, for example. (ex. https://attack.mitre.org/tactics/TA0002/\
    \ )\n\ntype: keyword\n\nexample: TA0002\n\n**`threat.tactic.name`** :   Name of\
    \ the type of tactic used by this threat. You can use a MITRE ATT&CK\xAE tactic,\
    \ for example. (ex. https://attack.mitre.org/tactics/TA0002/ )\n\ntype: keyword\n\
    \nexample: Execution\n\n**`threat.tactic.reference`** :   The reference url of\
    \ tactic used by this threat. You can use a MITRE ATT&CK\xAE tactic, for example.\
    \ (ex. https://attack.mitre.org/tactics/TA0002/ )\n\ntype: keyword\n\nexample:\
    \ https://attack.mitre.org/tactics/TA0002/\n\n**`threat.technique.id`** :   The\
    \ id of technique used by this threat. You can use a MITRE ATT&CK\xAE technique,\
    \ for example. (ex. https://attack.mitre.org/techniques/T1059/ )\n\ntype: keyword\n\
    \nexample: T1059\n\n**`threat.technique.name`** :   The name of technique used\
    \ by this threat. You can use a MITRE ATT&CK\xAE technique, for example. (ex.\
    \ https://att..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1192'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '280'
    parent: '210'
    previous: '278'
- node_id: '280'
  node_depth: 2
  node_type: Node
  content_length: 909
  content: "example: Command and Scripting Interpreter\n\n**`threat.technique.name.text`**\
    \ :   type: match_only_text\n\n**`threat.technique.reference`** :   The reference\
    \ url of technique used by this threat. You can use a MITRE ATT&CK\xAE technique,\
    \ for example. (ex. https://attack.mitre.org/techniques/T1059/ )\n\ntype: keyword\n\
    \nexample: https://attack.mitre.org/techniques/T1059/\n\n**`threat.technique.subtechnique.id`**\
    \ :   The full id of subtechnique used by this threat. You can use a MITRE ATT&CK\xAE\
    \ subtechnique, for example. (ex. https://attack.mitre.org/techniques/T1059/001/\
    \ )\n\ntype: keyword\n\nexample: T1059.001\n\n**`threat.technique.subtechnique.name`**\
    \ :   The name of subtechnique used by this threat. You can use a MITRE ATT&CK\xAE\
    \ subtechnique, for example. (ex. https://attack.mitre.org/techniques/T1059/001/\
    \ )\n\ntype: keyword\n\nexample: PowerShell\n\n**`threat.technique.subtechnique.name.text`**\
    \ :   type: match_only_text"
  metadata:
    docling_label: text
    docling_ref: '#/texts/5059'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    next: '281'
    parent: '210'
    previous: '279'
- node_id: '281'
  node_depth: 2
  node_type: Node
  content_length: 285
  content: "**`threat.technique.subtechnique.reference`** :   The reference url of\
    \ subtechnique used by this threat. You can use a MITRE ATT&CK\xAE subtechnique,\
    \ for example. (ex. https://attack.mitre.org/techniques/T1059/001/ )\n\ntype:\
    \ keyword\n\nexample: https://attack.mitre.org/techniques/T1059/001/"
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1204'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## threat [_threat]'
  relationships:
    parent: '210'
    previous: '280'
- node_id: '282'
  node_depth: 1
  node_type: Node
  content_length: 14483
  content: "## tls [_tls]\n\nFields related to a TLS connection. These fields focus\
    \ on the TLS protocol itself and intentionally avoids in-depth analysis of the\
    \ related x.509 certificate files.\n\n**`tls.cipher`** :   String indicating the\
    \ cipher used during the current connection.\n\ntype: keyword\n\nexample: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n\
    \n**`tls.client.certificate`** :   PEM-encoded stand-alone certificate offered\
    \ by the client. This is usually mutually-exclusive of `client.certificate_chain`\
    \ since this value also exists in that list.\n\ntype: keyword\n\nexample: MII\u2026\
    \u200B\n\n**`tls.client.certificate_chain`** :   Array of PEM-encoded certificates\
    \ that make up the certificate chain offered by the client. This is usually mutually-exclusive\
    \ of `client.certificate` since that value should be the first certificate in\
    \ the chain.\n\ntype: keyword\n\nexample: [\"MII\u2026\u200B\", \"MII\u2026\u200B\
    \"]\n\n**`tls.client.hash.md5`** :   Certificate fingerprint using the MD5 digest\
    \ of DER-encoded version of certificate offered by the client. For..."
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/5090'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## tls [_tls]'
  relationships:
    children:
    - '283'
    - '284'
    - '285'
    - '286'
    - '287'
    - '288'
    - '289'
    - '290'
    - '291'
    - '292'
    - '293'
    - '294'
    - '295'
    - '296'
    - '297'
    next: '298'
    parent: '2'
    previous: '210'
- node_id: '283'
  node_depth: 2
  node_type: Node
  content_length: 859
  content: "## tls [_tls]\n\nFields related to a TLS connection. These fields focus\
    \ on the TLS protocol itself and intentionally avoids in-depth analysis of the\
    \ related x.509 certificate files.\n\n**`tls.cipher`** :   String indicating the\
    \ cipher used during the current connection.\n\ntype: keyword\n\nexample: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256\n\
    \n**`tls.client.certificate`** :   PEM-encoded stand-alone certificate offered\
    \ by the client. This is usually mutually-exclusive of `client.certificate_chain`\
    \ since this value also exists in that list.\n\ntype: keyword\n\nexample: MII\u2026\
    \u200B\n\n**`tls.client.certificate_chain`** :   Array of PEM-encoded certificates\
    \ that make up the certificate chain offered by the client. This is usually mutually-exclusive\
    \ of `client.certificate` since that value should be the first certificate in\
    \ the chain.\n\ntype: keyword\n\nexample: [\"MII\u2026\u200B\", \"MII\u2026\u200B\
    \"]"
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/5090'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## tls [_tls]'
  relationships:
    next: '284'
    parent: '282'
- node_id: '284'
  node_depth: 2
  node_type: Node
  content_length: 1048
  content: |-
    **`tls.client.hash.md5`** :   Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.

    type: keyword

    example: 0F76C7F2C55BFD7D8E8B8F4BFBF0C9EC

    **`tls.client.hash.sha1`** :   Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.

    type: keyword

    example: 9E393D93138888D288266C2D915214D1D1CCEB2A

    **`tls.client.hash.sha256`** :   Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the client. For consistency with other hash values, this value should be formatted as an uppercase hash.

    type: keyword

    example: 0687F666A054EF17A08E2F2162EAB4CBC0D265E1D7875BE74BF3C712CA92DAF0

    **`tls.client.issuer`** :   Distinguished name of subject of the issuer of the x.509 cer...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1209'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## tls [_tls]'
  relationships:
    next: '285'
    parent: '282'
    previous: '283'
- node_id: '285'
  node_depth: 2
  node_type: Node
  content_length: 988
  content: |-
    example: CN=Example Root CA, OU=Infrastructure Team, DC=example, DC=com

    **`tls.client.ja3`** :   A hash that identifies clients based on how they perform an SSL/TLS handshake.

    type: keyword

    example: d4e5b18d6b55c71272893221c96ba240

    **`tls.client.not_after`** :   Date/Time indicating when client certificate is no longer considered valid.

    type: date

    example: 2021-01-01T00:00:00.000Z

    **`tls.client.not_before`** :   Date/Time indicating when client certificate is first considered valid.

    type: date

    example: 1970-01-01T00:00:00.000Z

    **`tls.client.server_name`** :   Also called an SNI, this tells the server which hostname to which the client is attempting to connect to. When this value is available, it should get copied to `destination.domain` .

    type: keyword

    example: www.elastic.co

    **`tls.client.subject`** :   Distinguished name of subject of the x.509 certificate presented by the client.

    type: keyword

    example: CN=myclient, OU=Documentation Team, DC=example, DC=com
  metadata:
    docling_label: text
    docling_ref: '#/texts/5123'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## tls [_tls]'
  relationships:
    next: '286'
    parent: '282'
    previous: '284'
- node_id: '286'
  node_depth: 2
  node_type: Node
  content_length: 1076
  content: "**`tls.client.supported_ciphers`** :   Array of ciphers offered by the\
    \ client during the client hello.\n\ntype: keyword\n\nexample: [\"TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\"\
    , \"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\", \"\u2026\u200B\"]\n\n**`tls.client.x509.alternative_names`**\
    \ :   List of subject alternative names (SAN). Name types vary by certificate\
    \ authority and certificate type but commonly contain IP addresses, DNS names\
    \ (and wildcards), and email addresses.\n\ntype: keyword\n\nexample: *.elastic.co\n\
    \n**`tls.client.x509.issuer.common_name`** :   List of common name (CN) of issuing\
    \ certificate authority.\n\ntype: keyword\n\nexample: Example SHA2 High Assurance\
    \ Server CA\n\n**`tls.client.x509.issuer.country`** :   List of country \xA9 codes\n\
    \ntype: keyword\n\nexample: US\n\n**`tls.client.x509.issuer.distinguished_name`**\
    \ :   Distinguished name (DN) of issuing certificate authority.\n\ntype: keyword\n\
    \nexample: C=US, O=Example Inc, OU=www.example.com, CN=Example SHA2 High Assurance\
    \ Server CA\n\n**`tls.client.x509.issuer.local..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1218'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## tls [_tls]'
  relationships:
    next: '287'
    parent: '282'
    previous: '285'
- node_id: '287'
  node_depth: 2
  node_type: Node
  content_length: 1013
  content: |-
    **`tls.client.x509.issuer.organization`** :   List of organizations (O) of issuing certificate authority.

    type: keyword

    example: Example Inc

    **`tls.client.x509.issuer.organizational_unit`** :   List of organizational units (OU) of issuing certificate authority.

    type: keyword

    example: www.example.com

    **`tls.client.x509.issuer.state_or_province`** :   List of state or province names (ST, S, or P)

    type: keyword

    example: California

    **`tls.client.x509.not_after`** :   Time at which the certificate is no longer considered valid.

    type: date

    example: 2020-07-16 03:15:39+00:00

    **`tls.client.x509.not_before`** :   Time at which the certificate is first considered valid.

    type: date

    example: 2019-08-16 01:40:25+00:00

    **`tls.client.x509.public_key_algorithm`** :   Algorithm used to generate the public key.

    type: keyword

    example: RSA

    **`tls.client.x509.public_key_curve`** :   The curve used by the elliptic curve public key algorithm. This is algorithm specific.

    type: keyword

    exam...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1224'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## tls [_tls]'
  relationships:
    next: '288'
    parent: '282'
    previous: '286'
- node_id: '288'
  node_depth: 2
  node_type: Node
  content_length: 1037
  content: |-
    **`tls.client.x509.public_key_exponent`** :   Exponent used to derive the public key. This is algorithm specific.

    type: long

    example: 65537

    Field is not indexed.

    **`tls.client.x509.public_key_size`** :   The size of the public key space in bits.

    type: long

    example: 2048

    **`tls.client.x509.serial_number`** :   Unique serial number issued by the certificate authority. For consistency, if this value is alphanumeric, it should be formatted without colons and uppercase characters.

    type: keyword

    example: 55FBB9C7DEBF09809D12CCAA

    **`tls.client.x509.signature_algorithm`** :   Identifier for certificate signature algorithm. We recommend using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353 .

    type: keyword

    example: SHA256-RSA

    **`tls.client.x509.subject.common_name`** :   List of common names (CN) of subject.

    type: keyword

    example: shared.global.example.net

    **`tls.client.x509.subject.country`** :   List of count...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1231'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## tls [_tls]'
  relationships:
    next: '289'
    parent: '282'
    previous: '287'
- node_id: '289'
  node_depth: 2
  node_type: Node
  content_length: 1072
  content: |-
    **`tls.client.x509.subject.distinguished_name`** :   Distinguished name (DN) of the certificate subject entity.

    type: keyword

    example: C=US, ST=California, L=San Francisco, O=Example, Inc., CN=shared.global.example.net

    **`tls.client.x509.subject.locality`** :   List of locality names (L)

    type: keyword

    example: San Francisco

    **`tls.client.x509.subject.organization`** :   List of organizations (O) of subject.

    type: keyword

    example: Example, Inc.

    **`tls.client.x509.subject.organizational_unit`** :   List of organizational units (OU) of subject.

    type: keyword

    **`tls.client.x509.subject.state_or_province`** :   List of state or province names (ST, S, or P)

    type: keyword

    example: California

    **`tls.client.x509.version_number`** :   Version of x509 format.

    type: keyword

    example: 3

    **`tls.curve`** :   String indicating the curve used for the given cipher, when applicable.

    type: keyword

    example: secp256r1

    **`tls.established`** :   Boolean flag indicating if the TLS negotiatio...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1237'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## tls [_tls]'
  relationships:
    next: '290'
    parent: '282'
    previous: '288'
- node_id: '290'
  node_depth: 2
  node_type: Node
  content_length: 951
  content: "**`tls.next_protocol`** :   String indicating the protocol being tunneled.\
    \ Per the values in the IANA registry ( https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids\
    \ ), this string should be lower case.\n\ntype: keyword\n\nexample: http/1.1\n\
    \n**`tls.resumed`** :   Boolean flag indicating if this TLS connection was resumed\
    \ from an existing TLS negotiation.\n\ntype: boolean\n\n**`tls.server.certificate`**\
    \ :   PEM-encoded stand-alone certificate offered by the server. This is usually\
    \ mutually-exclusive of `server.certificate_chain` since this value also exists\
    \ in that list.\n\ntype: keyword\n\nexample: MII\u2026\u200B\n\n**`tls.server.certificate_chain`**\
    \ :   Array of PEM-encoded certificates that make up the certificate chain offered\
    \ by the server. This is usually mutually-exclusive of `server.certificate` since\
    \ that value should be the first certificate in the chain.\n\ntype: keyword\n\n\
    example: [\"MII\u2026\u200B\", \"MII\u2026\u200B\"]"
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1245'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## tls [_tls]'
  relationships:
    next: '291'
    parent: '282'
    previous: '289'
- node_id: '291'
  node_depth: 2
  node_type: Node
  content_length: 1026
  content: |-
    **`tls.server.hash.md5`** :   Certificate fingerprint using the MD5 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.

    type: keyword

    example: 0F76C7F2C55BFD7D8E8B8F4BFBF0C9EC

    **`tls.server.hash.sha1`** :   Certificate fingerprint using the SHA1 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.

    type: keyword

    example: 9E393D93138888D288266C2D915214D1D1CCEB2A

    **`tls.server.hash.sha256`** :   Certificate fingerprint using the SHA256 digest of DER-encoded version of certificate offered by the server. For consistency with other hash values, this value should be formatted as an uppercase hash.

    type: keyword

    example: 0687F666A054EF17A08E2F2162EAB4CBC0D265E1D7875BE74BF3C712CA92DAF0

    **`tls.server.issuer`** :   Subject of the issuer of the x.509 certificate presented by ...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1249'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## tls [_tls]'
  relationships:
    next: '292'
    parent: '282'
    previous: '290'
- node_id: '292'
  node_depth: 2
  node_type: Node
  content_length: 987
  content: |-
    example: CN=Example Root CA, OU=Infrastructure Team, DC=example, DC=com

    **`tls.server.ja3s`** :   A hash that identifies servers based on how they perform an SSL/TLS handshake.

    type: keyword

    example: 394441ab65754e2207b1e1b457b3641d

    **`tls.server.not_after`** :   Timestamp indicating when server certificate is no longer considered valid.

    type: date

    example: 2021-01-01T00:00:00.000Z

    **`tls.server.not_before`** :   Timestamp indicating when server certificate is first considered valid.

    type: date

    example: 1970-01-01T00:00:00.000Z

    **`tls.server.subject`** :   Subject of the x.509 certificate presented by the server.

    type: keyword

    example: CN=www.example.com, OU=Infrastructure Team, DC=example, DC=com

    **`tls.server.x509.alternative_names`** :   List of subject alternative names (SAN). Name types vary by certificate authority and certificate type but commonly contain IP addresses, DNS names (and wildcards), and email addresses.

    type: keyword

    example: *.elastic.co
  metadata:
    docling_label: text
    docling_ref: '#/texts/5291'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## tls [_tls]'
  relationships:
    next: '293'
    parent: '282'
    previous: '291'
- node_id: '293'
  node_depth: 2
  node_type: Node
  content_length: 1028
  content: "**`tls.server.x509.issuer.common_name`** :   List of common name (CN)\
    \ of issuing certificate authority.\n\ntype: keyword\n\nexample: Example SHA2\
    \ High Assurance Server CA\n\n**`tls.server.x509.issuer.country`** :   List of\
    \ country \xA9 codes\n\ntype: keyword\n\nexample: US\n\n**`tls.server.x509.issuer.distinguished_name`**\
    \ :   Distinguished name (DN) of issuing certificate authority.\n\ntype: keyword\n\
    \nexample: C=US, O=Example Inc, OU=www.example.com, CN=Example SHA2 High Assurance\
    \ Server CA\n\n**`tls.server.x509.issuer.locality`** :   List of locality names\
    \ (L)\n\ntype: keyword\n\nexample: Mountain View\n\n**`tls.server.x509.issuer.organization`**\
    \ :   List of organizations (O) of issuing certificate authority.\n\ntype: keyword\n\
    \nexample: Example Inc\n\n**`tls.server.x509.issuer.organizational_unit`** : \
    \  List of organizational units (OU) of issuing certificate authority.\n\ntype:\
    \ keyword\n\nexample: www.example.com\n\n**`tls.server.x509.issuer.state_or_province`**\
    \ :   List of state or province names (ST, S, or P)\n\ntype: ..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1258'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## tls [_tls]'
  relationships:
    next: '294'
    parent: '282'
    previous: '292'
- node_id: '294'
  node_depth: 2
  node_type: Node
  content_length: 1076
  content: |-
    **`tls.server.x509.not_after`** :   Time at which the certificate is no longer considered valid.

    type: date

    example: 2020-07-16 03:15:39+00:00

    **`tls.server.x509.not_before`** :   Time at which the certificate is first considered valid.

    type: date

    example: 2019-08-16 01:40:25+00:00

    **`tls.server.x509.public_key_algorithm`** :   Algorithm used to generate the public key.

    type: keyword

    example: RSA

    **`tls.server.x509.public_key_curve`** :   The curve used by the elliptic curve public key algorithm. This is algorithm specific.

    type: keyword

    example: nistp521

    **`tls.server.x509.public_key_exponent`** :   Exponent used to derive the public key. This is algorithm specific.

    type: long

    example: 65537

    Field is not indexed.

    **`tls.server.x509.public_key_size`** :   The size of the public key space in bits.

    type: long

    example: 2048

    **`tls.server.x509.serial_number`** :   Unique serial number issued by the certificate authority. For consistency, if this value is alphanumeric, it...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1265'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## tls [_tls]'
  relationships:
    next: '295'
    parent: '282'
    previous: '293'
- node_id: '295'
  node_depth: 2
  node_type: Node
  content_length: 1091
  content: "example: 55FBB9C7DEBF09809D12CCAA\n\n**`tls.server.x509.signature_algorithm`**\
    \ :   Identifier for certificate signature algorithm. We recommend using names\
    \ found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353\
    \ .\n\ntype: keyword\n\nexample: SHA256-RSA\n\n**`tls.server.x509.subject.common_name`**\
    \ :   List of common names (CN) of subject.\n\ntype: keyword\n\nexample: shared.global.example.net\n\
    \n**`tls.server.x509.subject.country`** :   List of country \xA9 code\n\ntype:\
    \ keyword\n\nexample: US\n\n**`tls.server.x509.subject.distinguished_name`** :\
    \   Distinguished name (DN) of the certificate subject entity.\n\ntype: keyword\n\
    \nexample: C=US, ST=California, L=San Francisco, O=Example, Inc., CN=shared.global.example.net\n\
    \n**`tls.server.x509.subject.locality`** :   List of locality names (L)\n\ntype:\
    \ keyword\n\nexample: San Francisco\n\n**`tls.server.x509.subject.organization`**\
    \ :   List of organizations (O) of subject.\n\ntype: keyword\n\nexample: Example,\
    \ Inc.\n\n**`tls.s..."
  metadata:
    docling_label: text
    docling_ref: '#/texts/5368'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## tls [_tls]'
  relationships:
    next: '296'
    parent: '282'
    previous: '294'
- node_id: '296'
  node_depth: 2
  node_type: Node
  content_length: 968
  content: |-
    type: keyword

    **`tls.server.x509.subject.state_or_province`** :   List of state or province names (ST, S, or P)

    type: keyword

    example: California

    **`tls.server.x509.version_number`** :   Version of x509 format.

    type: keyword

    example: 3

    **`tls.version`** :   Numeric part of the version parsed from the original string.

    type: keyword

    example: 1.2

    **`tls.version_protocol`** :   Normalized lowercase protocol name parsed from original string.

    type: keyword

    example: tls

    **`span.id`** :   Unique identifier of the span within the scope of its trace. A span represents an operation within a transaction, such as a request to another service, or a database query.

    type: keyword

    example: 3ff9a8981b7ccd5a

    **`trace.id`** :   Unique identifier of the trace. A trace groups multiple events like transactions that belong together. For example, a user request handled by multiple inter-connected services.

    type: keyword

    example: 4bf92f3577b34da6a3ce929d0e0e4736
  metadata:
    docling_label: text
    docling_ref: '#/texts/5397'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## tls [_tls]'
  relationships:
    next: '297'
    parent: '282'
    previous: '295'
- node_id: '297'
  node_depth: 2
  node_type: Node
  content_length: 235
  content: |-
    **`transaction.id`** :   Unique identifier of the transaction within the scope of its trace. A transaction is the highest level of work measured within a service, such as a request to a server.

    type: keyword

    example: 00f067aa0ba902b7
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1285'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## tls [_tls]'
  relationships:
    parent: '282'
    previous: '296'
- node_id: '298'
  node_depth: 1
  node_type: Node
  content_length: 4143
  content: |-
    ## url [_url]

    URL fields provide support for complete or partial URLs, and supports the breaking down into scheme, domain, path, and so on.

    **`url.domain`** :   Domain of the url, such as "www.elastic.co". In some cases a URL may refer to an IP and/or port directly, without a domain name. In this case, the IP address would go to the `domain` field. If the URL contains a literal IPv6 address enclosed by `[` and `]` (IETF RFC 2732), the `[` and `]` characters should also be captured in the `domain` field.

    type: keyword

    example: www.elastic.co

    **`url.extension`** :   The field contains the file extension from the original request url, excluding the leading dot. The file extension is only set if it exists, as not every url has a file extension. The leading period must not be included. For example, the value must be "png", not ".png". Note that when the file name has multiple extensions (example.tar.gz), only the last one should be captured ("gz", not "tar.gz").

    type: keyword

    example...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/5426'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## url [_url]'
  relationships:
    children:
    - '299'
    - '300'
    - '301'
    - '302'
    - '303'
    next: '304'
    parent: '2'
    previous: '282'
- node_id: '299'
  node_depth: 2
  node_type: Node
  content_length: 1005
  content: |-
    ## url [_url]

    URL fields provide support for complete or partial URLs, and supports the breaking down into scheme, domain, path, and so on.

    **`url.domain`** :   Domain of the url, such as "www.elastic.co". In some cases a URL may refer to an IP and/or port directly, without a domain name. In this case, the IP address would go to the `domain` field. If the URL contains a literal IPv6 address enclosed by `[` and `]` (IETF RFC 2732), the `[` and `]` characters should also be captured in the `domain` field.

    type: keyword

    example: www.elastic.co

    **`url.extension`** :   The field contains the file extension from the original request url, excluding the leading dot. The file extension is only set if it exists, as not every url has a file extension. The leading period must not be included. For example, the value must be "png", not ".png". Note that when the file name has multiple extensions (example.tar.gz), only the last one should be captured ("gz", not "tar.gz").

    type: keyword

    example...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/5426'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## url [_url]'
  relationships:
    next: '300'
    parent: '298'
- node_id: '300'
  node_depth: 2
  node_type: Node
  content_length: 1079
  content: |-
    **`url.fragment`** :   Portion of the url after the `#` , such as "top". The `#` is not part of the fragment.

    type: keyword

    **`url.full`** :   If full URLs are important to your use case, they should be stored in `url.full` , whether this field is reconstructed or present in the event source.

    type: wildcard

    example: https://www.elastic.co:443/search?q=elasticsearch#top

    **`url.full.text`** :   type: match_only_text

    **`url.original`** :   Unmodified original url as seen in the event source. Note that in network monitoring, the observed URL may be a full URL, whereas in access logs, the URL is often just represented as a path. This field is meant to represent the URL as it was observed, complete or not.

    type: wildcard

    example: https://www.elastic.co:443/search?q=elasticsearch#top or /search?q=elasticsearch

    **`url.original.text`** :   type: match_only_text

    **`url.password`** :   Password of the request.

    type: keyword

    **`url.path`** :   Path of the request, such as "/search".

    t...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1288'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## url [_url]'
  relationships:
    next: '301'
    parent: '298'
    previous: '299'
- node_id: '301'
  node_depth: 2
  node_type: Node
  content_length: 951
  content: |-
    example: 443

    format: string

    **`url.query`** :   The query field describes the query string of the request, such as "q=elasticsearch". The `?` is excluded from the query string. If a URL contains no `?` , there is no query field. If there is a `?` but no query, the query field exists with an empty string. The `exists` query can be used to differentiate between the two cases.

    type: keyword

    **`url.registered_domain`** :   The highest registered url domain, stripped of the subdomain. For example, the registered domain for "foo.example.com" is "example.com". This value can be determined precisely with a list like the public suffix list ( http://publicsuffix.org ). Trying to approximate this by simply taking the last two labels will not work well for TLDs such as "co.uk".

    type: keyword

    example: example.com

    **`url.scheme`** :   Scheme of the request, such as "https". Note: The `:` is not part of the scheme.

    type: keyword

    example: https
  metadata:
    docling_label: text
    docling_ref: '#/texts/5481'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## url [_url]'
  relationships:
    next: '302'
    parent: '298'
    previous: '300'
- node_id: '302'
  node_depth: 2
  node_type: Node
  content_length: 1038
  content: |-
    **`url.subdomain`** :   The subdomain portion of a fully qualified domain name includes all of the names except the host name under the registered_domain.  In a partially qualified domain, or if the the qualification level of the full name cannot be determined, subdomain contains all of the names below the registered domain. For example the subdomain portion of "www.east.mydomain.co.uk" is "east". If the domain has multiple levels of subdomain, such as "sub2.sub1.example.com", the subdomain field should contain "sub2.sub1", with no trailing period.

    type: keyword

    example: east

    **`url.top_level_domain`** :   The effective top level domain (eTLD), also known as the domain suffix, is the last part of the domain name. For example, the top level domain for example.com is "com". This value can be determined precisely with a list like the public suffix list ( http://publicsuffix.org ). Trying to approximate this by simply taking the last label will not work well for effective TLDs such as "...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1301'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## url [_url]'
  relationships:
    next: '303'
    parent: '298'
    previous: '301'
- node_id: '303'
  node_depth: 2
  node_type: Node
  content_length: 62
  content: |-
    **`url.username`** :   Username of the request.

    type: keyword
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1303'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## url [_url]'
  relationships:
    parent: '298'
    previous: '302'
- node_id: '304'
  node_depth: 1
  node_type: Node
  content_length: 5476
  content: "## user [_user_2]\n\nThe user fields describe information about the user\
    \ that is relevant to the event. Fields can have one entry or multiple entries.\
    \ If a user has more than one id, provide an array that includes all of them.\n\
    \n**`user.changes.domain`** :   Name of the directory the user is a member of.\
    \ For example, an LDAP or Active Directory domain name.\n\ntype: keyword\n\n**`user.changes.email`**\
    \ :   User email address.\n\ntype: keyword\n\n**`user.changes.full_name`** : \
    \  User\u2019s full name, if available.\n\ntype: keyword\n\nexample: Albert Einstein\n\
    \n**`user.changes.full_name.text`** :   type: match_only_text\n\n**`user.changes.group.domain`**\
    \ :   Name of the directory the group is a member of. For example, an LDAP or\
    \ Active Directory domain name.\n\ntype: keyword\n\n**`user.changes.group.id`**\
    \ :   Unique identifier for the group on the system/platform.\n\ntype: keyword\n\
    \n**`user.changes.group.name`** :   Name of the group.\n\ntype: keyword\n\n**`user.changes.hash`**\
    \ :   Unique user hash to correlate informati..."
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/5519'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## user [_user_2]'
  relationships:
    children:
    - '305'
    - '306'
    - '307'
    - '308'
    - '309'
    - '310'
    next: '311'
    parent: '2'
    previous: '298'
- node_id: '305'
  node_depth: 2
  node_type: Node
  content_length: 931
  content: "## user [_user_2]\n\nThe user fields describe information about the user\
    \ that is relevant to the event. Fields can have one entry or multiple entries.\
    \ If a user has more than one id, provide an array that includes all of them.\n\
    \n**`user.changes.domain`** :   Name of the directory the user is a member of.\
    \ For example, an LDAP or Active Directory domain name.\n\ntype: keyword\n\n**`user.changes.email`**\
    \ :   User email address.\n\ntype: keyword\n\n**`user.changes.full_name`** : \
    \  User\u2019s full name, if available.\n\ntype: keyword\n\nexample: Albert Einstein\n\
    \n**`user.changes.full_name.text`** :   type: match_only_text\n\n**`user.changes.group.domain`**\
    \ :   Name of the directory the group is a member of. For example, an LDAP or\
    \ Active Directory domain name.\n\ntype: keyword\n\n**`user.changes.group.id`**\
    \ :   Unique identifier for the group on the system/platform.\n\ntype: keyword\n\
    \n**`user.changes.group.name`** :   Name of the group.\n\ntype: keyword"
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/5519'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## user [_user_2]'
  relationships:
    next: '306'
    parent: '304'
- node_id: '306'
  node_depth: 2
  node_type: Node
  content_length: 1089
  content: |-
    **`user.changes.hash`** :   Unique user hash to correlate information for a user in anonymized form. Useful if `user.id` or `user.name` contain confidential information and cannot be used.

    type: keyword

    **`user.changes.id`** :   Unique identifier of the user.

    type: keyword

    example: S-1-5-21-202424912787-2692429404-2351956786-1000

    **`user.changes.name`** :   Short name or login of the user.

    type: keyword

    example: a.einstein

    **`user.changes.name.text`** :   type: match_only_text

    **`user.changes.roles`** :   Array of user roles at the time of the event.

    type: keyword

    example: ["kibana_admin", "reporting_user"]

    **`user.domain`** :   Name of the directory the user is a member of. For example, an LDAP or Active Directory domain name.

    type: keyword

    **`user.effective.domain`** :   Name of the directory the user is a member of. For example, an LDAP or Active Directory domain name.

    type: keyword

    **`user.effective.email`** :   User email address.

    type: keyword

    **`user.effective....
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1311'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## user [_user_2]'
  relationships:
    next: '307'
    parent: '304'
    previous: '305'
- node_id: '307'
  node_depth: 2
  node_type: Node
  content_length: 1088
  content: |-
    **`user.effective.full_name.text`** :   type: match_only_text

    **`user.effective.group.domain`** :   Name of the directory the group is a member of. For example, an LDAP or Active Directory domain name.

    type: keyword

    **`user.effective.group.id`** :   Unique identifier for the group on the system/platform.

    type: keyword

    **`user.effective.group.name`** :   Name of the group.

    type: keyword

    **`user.effective.hash`** :   Unique user hash to correlate information for a user in anonymized form. Useful if `user.id` or `user.name` contain confidential information and cannot be used.

    type: keyword

    **`user.effective.id`** :   Unique identifier of the user.

    type: keyword

    example: S-1-5-21-202424912787-2692429404-2351956786-1000

    **`user.effective.name`** :   Short name or login of the user.

    type: keyword

    example: a.einstein

    **`user.effective.name.text`** :   type: match_only_text

    **`user.effective.roles`** :   Array of user roles at the time of the event.

    type: keyword

    example: ["k...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1320'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## user [_user_2]'
  relationships:
    next: '308'
    parent: '304'
    previous: '306'
- node_id: '308'
  node_depth: 2
  node_type: Node
  content_length: 1040
  content: "**`user.full_name`** :   User\u2019s full name, if available.\n\ntype:\
    \ keyword\n\nexample: Albert Einstein\n\n**`user.full_name.text`** :   type: match_only_text\n\
    \n**`user.group.domain`** :   Name of the directory the group is a member of.\
    \ For example, an LDAP or Active Directory domain name.\n\ntype: keyword\n\n**`user.group.id`**\
    \ :   Unique identifier for the group on the system/platform.\n\ntype: keyword\n\
    \n**`user.group.name`** :   Name of the group.\n\ntype: keyword\n\n**`user.hash`**\
    \ :   Unique user hash to correlate information for a user in anonymized form.\
    \ Useful if `user.id` or `user.name` contain confidential information and cannot\
    \ be used.\n\ntype: keyword\n\n**`user.id`** :   Unique identifier of the user.\n\
    \ntype: keyword\n\nexample: S-1-5-21-202424912787-2692429404-2351956786-1000\n\
    \n**`user.name`** :   Short name or login of the user.\n\ntype: keyword\n\nexample:\
    \ a.einstein\n\n**`user.name.text`** :   type: match_only_text\n\n**`user.roles`**\
    \ :   Array of user roles at the time of the event.\n\ntype: keyword\n\nexa..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1330'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## user [_user_2]'
  relationships:
    next: '309'
    parent: '304'
    previous: '307'
- node_id: '309'
  node_depth: 2
  node_type: Node
  content_length: 1094
  content: "**`user.target.domain`** :   Name of the directory the user is a member\
    \ of. For example, an LDAP or Active Directory domain name.\n\ntype: keyword\n\
    \n**`user.target.email`** :   User email address.\n\ntype: keyword\n\n**`user.target.full_name`**\
    \ :   User\u2019s full name, if available.\n\ntype: keyword\n\nexample: Albert\
    \ Einstein\n\n**`user.target.full_name.text`** :   type: match_only_text\n\n**`user.target.group.domain`**\
    \ :   Name of the directory the group is a member of. For example, an LDAP or\
    \ Active Directory domain name.\n\ntype: keyword\n\n**`user.target.group.id`**\
    \ :   Unique identifier for the group on the system/platform.\n\ntype: keyword\n\
    \n**`user.target.group.name`** :   Name of the group.\n\ntype: keyword\n\n**`user.target.hash`**\
    \ :   Unique user hash to correlate information for a user in anonymized form.\
    \ Useful if `user.id` or `user.name` contain confidential information and cannot\
    \ be used.\n\ntype: keyword\n\n**`user.target.id`** :   Unique identifier of the\
    \ user.\n\ntype: keyword\n\nexample: S-1-5-21-202424..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1340'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## user [_user_2]'
  relationships:
    next: '310'
    parent: '304'
    previous: '308'
- node_id: '310'
  node_depth: 2
  node_type: Node
  content_length: 224
  content: |-
    type: keyword

    example: a.einstein

    **`user.target.name.text`** :   type: match_only_text

    **`user.target.roles`** :   Array of user roles at the time of the event.

    type: keyword

    example: ["kibana_admin", "reporting_user"]
  metadata:
    docling_label: text
    docling_ref: '#/texts/5681'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## user [_user_2]'
  relationships:
    parent: '304'
    previous: '309'
- node_id: '311'
  node_depth: 1
  node_type: Node
  content_length: 1936
  content: |-
    ## user_agent [_user_agent]

    The user_agent fields normally come from a browser request. They often show up in web service logs coming from the parsed user agent string.

    **`user_agent.device.name`** :   Name of the device.

    type: keyword

    example: iPhone

    **`user_agent.name`** :   Name of the user agent.

    type: keyword

    example: Safari

    **`user_agent.original`** :   Unparsed user_agent string.

    type: keyword

    example: Mozilla/5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1

    **`user_agent.original.text`** :   type: match_only_text

    **`user_agent.os.family`** :   OS family (such as redhat, debian, freebsd, windows).

    type: keyword

    example: debian

    **`user_agent.os.full`** :   Operating system name, including the version or code name.

    type: keyword

    example: Mac OS Mojave

    **`user_agent.os.full.text`** :   type: match_only_text

    **`user_agent.os.kernel`** :   Operating system kernel version as a raw string....
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/5689'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## user_agent [_user_agent]'
  relationships:
    children:
    - '312'
    - '313'
    next: '314'
    parent: '2'
    previous: '304'
- node_id: '312'
  node_depth: 2
  node_type: Node
  content_length: 1043
  content: |-
    ## user_agent [_user_agent]

    The user_agent fields normally come from a browser request. They often show up in web service logs coming from the parsed user agent string.

    **`user_agent.device.name`** :   Name of the device.

    type: keyword

    example: iPhone

    **`user_agent.name`** :   Name of the user agent.

    type: keyword

    example: Safari

    **`user_agent.original`** :   Unparsed user_agent string.

    type: keyword

    example: Mozilla/5.0 (iPhone; CPU iPhone OS 12_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Mobile/15E148 Safari/604.1

    **`user_agent.original.text`** :   type: match_only_text

    **`user_agent.os.family`** :   OS family (such as redhat, debian, freebsd, windows).

    type: keyword

    example: debian

    **`user_agent.os.full`** :   Operating system name, including the version or code name.

    type: keyword

    example: Mac OS Mojave

    **`user_agent.os.full.text`** :   type: match_only_text

    **`user_agent.os.kernel`** :   Operating system kernel version as a raw string....
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/5689'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## user_agent [_user_agent]'
  relationships:
    next: '313'
    parent: '311'
- node_id: '313'
  node_depth: 2
  node_type: Node
  content_length: 891
  content: "**`user_agent.os.name`** :   Operating system name, without the version.\n\
    \ntype: keyword\n\nexample: Mac OS X\n\n**`user_agent.os.name.text`** :   type:\
    \ match_only_text\n\n**`user_agent.os.platform`** :   Operating system platform\
    \ (such centos, ubuntu, windows).\n\ntype: keyword\n\nexample: darwin\n\n**`user_agent.os.type`**\
    \ :   Use the `os.type` field to categorize the operating system into one of the\
    \ broad commercial families. One of these following values should be used (lowercase):\
    \ linux, macos, unix, windows. If the OS you\u2019re dealing with is not in the\
    \ list, the field should not be populated. Please let us know by opening an issue\
    \ with ECS, to propose its addition.\n\ntype: keyword\n\nexample: macos\n\n**`user_agent.os.version`**\
    \ :   Operating system version as a raw string.\n\ntype: keyword\n\nexample: 10.14.1\n\
    \n**`user_agent.version`** :   Version of the user agent.\n\ntype: keyword\n\n\
    example: 12.0"
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1360'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## user_agent [_user_agent]'
  relationships:
    parent: '311'
    previous: '312'
- node_id: '314'
  node_depth: 1
  node_type: Node
  content_length: 1178
  content: |-
    ## vlan [_vlan]

    The VLAN fields are used to identify 802.1q tag(s) of a packet, as well as ingress and egress VLAN associations of an observer in relation to a specific packet or connection. Network.vlan fields are used to record a single VLAN tag, or the outer tag in the case of q-in-q encapsulations, for a packet or connection as observed, typically provided by a network sensor (e.g. Zeek, Wireshark) passively reporting on traffic. Network.inner VLAN fields are used to report inner q-in-q 802.1q tags (multiple 802.1q encapsulations) as observed, typically provided by a network sensor  (e.g. Zeek, Wireshark) passively reporting on traffic. Network.inner VLAN fields should only be used in addition to network.vlan fields to indicate q-in-q tagging. Observer.ingress and observer.egress VLAN values are used to record observer specific information when observer events contain discrete ingress and egress VLAN information, typically provided by firewalls, routers, or load balancers.

    **`vla...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/5743'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## vlan [_vlan]'
  relationships:
    children:
    - '315'
    - '316'
    next: '317'
    parent: '2'
    previous: '311'
- node_id: '315'
  node_depth: 2
  node_type: Node
  content_length: 992
  content: |-
    ## vlan [_vlan]

    The VLAN fields are used to identify 802.1q tag(s) of a packet, as well as ingress and egress VLAN associations of an observer in relation to a specific packet or connection. Network.vlan fields are used to record a single VLAN tag, or the outer tag in the case of q-in-q encapsulations, for a packet or connection as observed, typically provided by a network sensor (e.g. Zeek, Wireshark) passively reporting on traffic. Network.inner VLAN fields are used to report inner q-in-q 802.1q tags (multiple 802.1q encapsulations) as observed, typically provided by a network sensor  (e.g. Zeek, Wireshark) passively reporting on traffic. Network.inner VLAN fields should only be used in addition to network.vlan fields to indicate q-in-q tagging. Observer.ingress and observer.egress VLAN values are used to record observer specific information when observer events contain discrete ingress and egress VLAN information, typically provided by firewalls, routers, or load balancers.
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/5743'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## vlan [_vlan]'
  relationships:
    next: '316'
    parent: '314'
- node_id: '316'
  node_depth: 2
  node_type: Node
  content_length: 184
  content: |-
    **`vlan.id`** :   VLAN ID as reported by the observer.

    type: keyword

    example: 10

    **`vlan.name`** :   Optional VLAN name as reported by the observer.

    type: keyword

    example: outside
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1366'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## vlan [_vlan]'
  relationships:
    parent: '314'
    previous: '315'
- node_id: '317'
  node_depth: 1
  node_type: Node
  content_length: 3648
  content: "## vulnerability [_vulnerability]\n\nThe vulnerability fields describe\
    \ information about a vulnerability that is relevant to an event.\n\n**`vulnerability.category`**\
    \ :   The type of system or architecture that the vulnerability affects. These\
    \ may be platform-specific (for example, Debian or SUSE) or general (for example,\
    \ Database or Firewall). For example ( Qualys vulnerability categories ) This\
    \ field must be an array.\n\ntype: keyword\n\nexample: [\"Firewall\"]\n\n**`vulnerability.classification`**\
    \ :   The classification of the vulnerability scoring system. For example ( https://www.first.org/cvss/\
    \ )\n\ntype: keyword\n\nexample: CVSS\n\n**`vulnerability.description`** :   The\
    \ description of the vulnerability that provides additional context of the vulnerability.\
    \ For example ( Common Vulnerabilities and Exposure CVE description )\n\ntype:\
    \ keyword\n\nexample: In macOS before 2.12.6, there is a vulnerability in the\
    \ RPC\u2026\u200B\n\n**`vulnerability.description.text`** :   type: match_only_text\n\
    \n**`vulnerability.enumer..."
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/5753'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## vulnerability [_vulnerability]'
  relationships:
    children:
    - '318'
    - '319'
    - '320'
    - '321'
    next: '322'
    parent: '2'
    previous: '314'
- node_id: '318'
  node_depth: 2
  node_type: Node
  content_length: 975
  content: "## vulnerability [_vulnerability]\n\nThe vulnerability fields describe\
    \ information about a vulnerability that is relevant to an event.\n\n**`vulnerability.category`**\
    \ :   The type of system or architecture that the vulnerability affects. These\
    \ may be platform-specific (for example, Debian or SUSE) or general (for example,\
    \ Database or Firewall). For example ( Qualys vulnerability categories ) This\
    \ field must be an array.\n\ntype: keyword\n\nexample: [\"Firewall\"]\n\n**`vulnerability.classification`**\
    \ :   The classification of the vulnerability scoring system. For example ( https://www.first.org/cvss/\
    \ )\n\ntype: keyword\n\nexample: CVSS\n\n**`vulnerability.description`** :   The\
    \ description of the vulnerability that provides additional context of the vulnerability.\
    \ For example ( Common Vulnerabilities and Exposure CVE description )\n\ntype:\
    \ keyword\n\nexample: In macOS before 2.12.6, there is a vulnerability in the\
    \ RPC\u2026\u200B\n\n**`vulnerability.description.text`** :   type: match_only_text"
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/5753'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## vulnerability [_vulnerability]'
  relationships:
    next: '319'
    parent: '317'
- node_id: '319'
  node_depth: 2
  node_type: Node
  content_length: 890
  content: |-
    **`vulnerability.enumeration`** :   The type of identifier used for this vulnerability. For example ( https://cve.mitre.org/about/ )

    type: keyword

    example: CVE

    **`vulnerability.id`** :   The identification (ID) is the number portion of a vulnerability entry. It includes a unique identification number for the vulnerability. For example ( Common Vulnerabilities and Exposure CVE ID )

    type: keyword

    example: CVE-2019-00001

    **`vulnerability.reference`** :   A resource that provides additional information, context, and mitigations for the identified vulnerability.

    type: keyword

    example: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-6111

    **`vulnerability.report_id`** :   The report or scan identification number.

    type: keyword

    example: 20191018.0001

    **`vulnerability.scanner.vendor`** :   The name of the vulnerability scanner vendor.

    type: keyword

    example: Tenable
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1372'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## vulnerability [_vulnerability]'
  relationships:
    next: '320'
    parent: '317'
    previous: '318'
- node_id: '320'
  node_depth: 2
  node_type: Node
  content_length: 1005
  content: |-
    **`vulnerability.score.base`** :   Scores can range from 0.0 to 10.0, with 10.0 being the most severe. Base scores cover an assessment for exploitability metrics (attack vector, complexity, privileges, and user interaction), impact metrics (confidentiality, integrity, and availability), and scope. For example ( https://www.first.org/cvss/specification-document )

    type: float

    example: 5.5

    **`vulnerability.score.environmental`** :   Scores can range from 0.0 to 10.0, with 10.0 being the most severe. Environmental scores cover an assessment for any modified Base metrics, confidentiality, integrity, and availability requirements. For example ( https://www.first.org/cvss/specification-document )

    type: float

    example: 5.5

    **`vulnerability.score.temporal`** :   Scores can range from 0.0 to 10.0, with 10.0 being the most severe. Temporal scores cover an assessment for code maturity, remediation level, and confidence. For example ( https://www.first.org/cvss/specification-document )

    type: ...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1378'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## vulnerability [_vulnerability]'
  relationships:
    next: '321'
    parent: '317'
    previous: '319'
- node_id: '321'
  node_depth: 2
  node_type: Node
  content_length: 772
  content: |-
    **`vulnerability.score.version`** :   The National Vulnerability Database (NVD) provides qualitative severity rankings of "Low", "Medium", and "High" for CVSS v2.0 base score ranges in addition to the severity ratings for CVSS v3.0 as they are defined in the CVSS v3.0 specification. CVSS is owned and managed by FIRST.Org, Inc. (FIRST), a US-based non-profit organization, whose mission is to help computer security incident response teams across the world. For example ( https://nvd.nist.gov/vuln-metrics/cvss )

    type: keyword

    example: 2.0

    **`vulnerability.severity`** :   The severity of the vulnerability can help with metrics and internal prioritization regarding remediation. For example ( https://nvd.nist.gov/vuln-metrics/cvss )

    type: keyword

    example: Critical
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1381'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## vulnerability [_vulnerability]'
  relationships:
    parent: '317'
    previous: '320'
- node_id: '322'
  node_depth: 1
  node_type: Node
  content_length: 4075
  content: |-
    ## x509 [_x509]

    This implements the common core fields for x509 certificates. This information is likely logged with TLS sessions, digital signatures found in executable binaries, S/MIME information in email bodies, or analysis of files on disk. When the certificate relates to a file, use the fields at `file.x509` . When hashes of the DER-encoded certificate are available, the `hash` data set should be populated as well (e.g. `file.hash.sha256` ). Events that contain certificate information about network connections, should use the x509 fields under the relevant TLS fields: `tls.server.x509` and/or `tls.client.x509` .

    **`x509.alternative_names`** :   List of subject alternative names (SAN). Name types vary by certificate authority and certificate type but commonly contain IP addresses, DNS names (and wildcards), and email addresses.

    type: keyword

    example: *.elastic.co

    **`x509.issuer.common_name`** :   List of common name (CN) of issuing certificate authority.

    type: keyword

    examp...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/5829'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## x509 [_x509]'
  relationships:
    children:
    - '323'
    - '324'
    - '325'
    - '326'
    parent: '2'
    previous: '317'
- node_id: '323'
  node_depth: 2
  node_type: Node
  content_length: 1041
  content: |-
    ## x509 [_x509]

    This implements the common core fields for x509 certificates. This information is likely logged with TLS sessions, digital signatures found in executable binaries, S/MIME information in email bodies, or analysis of files on disk. When the certificate relates to a file, use the fields at `file.x509` . When hashes of the DER-encoded certificate are available, the `hash` data set should be populated as well (e.g. `file.hash.sha256` ). Events that contain certificate information about network connections, should use the x509 fields under the relevant TLS fields: `tls.server.x509` and/or `tls.client.x509` .

    **`x509.alternative_names`** :   List of subject alternative names (SAN). Name types vary by certificate authority and certificate type but commonly contain IP addresses, DNS names (and wildcards), and email addresses.

    type: keyword

    example: *.elastic.co

    **`x509.issuer.common_name`** :   List of common name (CN) of issuing certificate authority.

    type: keyword

    examp...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/5829'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## x509 [_x509]'
  relationships:
    next: '324'
    parent: '322'
- node_id: '324'
  node_depth: 2
  node_type: Node
  content_length: 1061
  content: "**`x509.issuer.country`** :   List of country \xA9 codes\n\ntype: keyword\n\
    \nexample: US\n\n**`x509.issuer.distinguished_name`** :   Distinguished name (DN)\
    \ of issuing certificate authority.\n\ntype: keyword\n\nexample: C=US, O=Example\
    \ Inc, OU=www.example.com, CN=Example SHA2 High Assurance Server CA\n\n**`x509.issuer.locality`**\
    \ :   List of locality names (L)\n\ntype: keyword\n\nexample: Mountain View\n\n\
    **`x509.issuer.organization`** :   List of organizations (O) of issuing certificate\
    \ authority.\n\ntype: keyword\n\nexample: Example Inc\n\n**`x509.issuer.organizational_unit`**\
    \ :   List of organizational units (OU) of issuing certificate authority.\n\n\
    type: keyword\n\nexample: www.example.com\n\n**`x509.issuer.state_or_province`**\
    \ :   List of state or province names (ST, S, or P)\n\ntype: keyword\n\nexample:\
    \ California\n\n**`x509.not_after`** :   Time at which the certificate is no longer\
    \ considered valid.\n\ntype: date\n\nexample: 2020-07-16 03:15:39+00:00\n\n**`x509.not_before`**\
    \ :   Time at which the certificate is first cons..."
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1386'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## x509 [_x509]'
  relationships:
    next: '325'
    parent: '322'
    previous: '323'
- node_id: '325'
  node_depth: 2
  node_type: Node
  content_length: 1026
  content: |-
    **`x509.public_key_algorithm`** :   Algorithm used to generate the public key.

    type: keyword

    example: RSA

    **`x509.public_key_curve`** :   The curve used by the elliptic curve public key algorithm. This is algorithm specific.

    type: keyword

    example: nistp521

    **`x509.public_key_exponent`** :   Exponent used to derive the public key. This is algorithm specific.

    type: long

    example: 65537

    Field is not indexed.

    **`x509.public_key_size`** :   The size of the public key space in bits.

    type: long

    example: 2048

    **`x509.serial_number`** :   Unique serial number issued by the certificate authority. For consistency, if this value is alphanumeric, it should be formatted without colons and uppercase characters.

    type: keyword

    example: 55FBB9C7DEBF09809D12CCAA

    **`x509.signature_algorithm`** :   Identifier for certificate signature algorithm. We recommend using names found in Go Lang Crypto library. See https://github.com/golang/go/blob/go1.14/src/crypto/x509/x509.go#L337-L353 .

    type: ke...
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1394'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## x509 [_x509]'
  relationships:
    next: '326'
    parent: '322'
    previous: '324'
- node_id: '326'
  node_depth: 2
  node_type: Node
  content_length: 941
  content: "**`x509.subject.common_name`** :   List of common names (CN) of subject.\n\
    \ntype: keyword\n\nexample: shared.global.example.net\n\n**`x509.subject.country`**\
    \ :   List of country \xA9 code\n\ntype: keyword\n\nexample: US\n\n**`x509.subject.distinguished_name`**\
    \ :   Distinguished name (DN) of the certificate subject entity.\n\ntype: keyword\n\
    \nexample: C=US, ST=California, L=San Francisco, O=Example, Inc., CN=shared.global.example.net\n\
    \n**`x509.subject.locality`** :   List of locality names (L)\n\ntype: keyword\n\
    \nexample: San Francisco\n\n**`x509.subject.organization`** :   List of organizations\
    \ (O) of subject.\n\ntype: keyword\n\nexample: Example, Inc.\n\n**`x509.subject.organizational_unit`**\
    \ :   List of organizational units (OU) of subject.\n\ntype: keyword\n\n**`x509.subject.state_or_province`**\
    \ :   List of state or province names (ST, S, or P)\n\ntype: keyword\n\nexample:\
    \ California\n\n**`x509.version_number`** :   Version of x509 format.\n\ntype:\
    \ keyword\n\nexample: 3"
  metadata:
    docling_label: inline
    docling_ref: '#/groups/1400'
    headings:
    - '# ECS fields [exported-fields-ecs]'
    - '## x509 [_x509]'
  relationships:
    parent: '322'
    previous: '325'
