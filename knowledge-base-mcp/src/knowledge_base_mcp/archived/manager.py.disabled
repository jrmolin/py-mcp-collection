from fastmcp.contrib.mcp_mixin.mcp_mixin import MCPMixin, mcp_tool
from llama_index.core.indices.vector_store import VectorStoreIndex
from llama_index.core.vector_stores.types import MetadataFilter, MetadataFilters

from knowledge_base_mcp.vendored.duck_db_vector_store import DuckDBVectorStore


class ManagerServer(MCPMixin):
    vector_store_index: VectorStoreIndex

    def __init__(self, vector_store_index: VectorStoreIndex):
        self.vector_store_index = vector_store_index

    @mcp_tool()
    def remove_knowledge_base(self, knowledge_base: str) -> str:
        """Remove a knowledge base from the vector store."""

        nodes = self.vector_store_index.vector_store.get_nodes(
            filters=MetadataFilters(filters=[MetadataFilter(key="knowledge_base", value=knowledge_base)])
        )

        self.vector_store_index.delete_nodes(node_ids=[node.node_id for node in nodes])

        return f"Knowledge base {knowledge_base} removed"

    @mcp_tool()
    def remove_all_knowledge_bases(self) -> str:
        """Remove all knowledge bases from the vector store."""

        self.vector_store_index.vector_store.clear()
        return "All knowledge bases removed"

    @mcp_tool()
    def get_knowledge_bases(self) -> list[str]:
        """Get all knowledge bases from the vector store."""

        vector_store = self.vector_store_index.vector_store
        if isinstance(vector_store, DuckDBVectorStore):
            return vector_store.client.execute("""
            SELECT metadata_.knowledge_base, count(*) as count FROM documents
            WHERE metadata_.knowledge_base IS NOT NULL
            GROUP BY metadata_.knowledge_base;
            """).fetchall()

        msg = "Only DuckDBVectorStore is supported"
        raise NotImplementedError(msg)

    # @mcp_tool()
    # def get_vector_store_node_count(self) -> int:
    #     return len(self.vector_store_index.vector_store.get_nodes())

    # @mcp_tool()
    # def get_summary(self) -> str:
    #     return self.vector_store_index.summary
